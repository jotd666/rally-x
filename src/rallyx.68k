	.include	"breakpoint.inc"
	.include	"rallyx.inc"
	.include	"data.inc"
*	map(0x0000, 0x3fff).rom();
*	map(0x8000, 0x8fff).ram().w(FUNC(rallyx_state::videoram_w)).share(m_videoram);
*	map(0x9800, 0x9fff).ram();
*	map(0xa000, 0xa000).portr("P1");
*	map(0xa080, 0xa080).portr("P2");
*	map(0xa100, 0xa100).portr("DSW");
*	map(0xa000, 0xa00f).writeonly().share(m_radarattr);
*	map(0xa080, 0xa080).w("watchdog", FUNC(watchdog_timer_device::reset_w));
*	map(0xa100, 0xa11f).w(m_namco_sound, FUNC(namco_device::pacman_sound_w));
*	map(0xa130, 0xa130).w(FUNC(rallyx_state::scrollx_w));
*	map(0xa140, 0xa140).w(FUNC(rallyx_state::scrolly_w));
*	map(0xa170, 0xa170).nopw();            // ?
*	map(0xa180, 0xa187).w("mainlatch", FUNC(ls259_device::write_d0));

*	PORT_START("P1")
*	PORT_BIT( 0x01, IP_ACTIVE_LOW, IPT_SERVICE1 )
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON1 )
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT ) PORT_4WAY
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_4WAY
*	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN ) PORT_4WAY
*	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_JOYSTICK_UP ) PORT_4WAY
*	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_START1 )
*	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_COIN1 )
*
*	PORT_START("P2")
*	PORT_DIPNAME( 0x01, 0x01, DEF_STR( Cabinet ) )      PORT_DIPLOCATION("P2:1")
*	PORT_DIPSETTING(    0x01, DEF_STR( Upright ) )
*	PORT_DIPSETTING(    0x00, DEF_STR( Cocktail ) )
*	PORT_BIT( 0x02, IP_ACTIVE_LOW, IPT_BUTTON1 ) PORT_COCKTAIL
*	PORT_BIT( 0x04, IP_ACTIVE_LOW, IPT_JOYSTICK_LEFT ) PORT_4WAY PORT_COCKTAIL
*	PORT_BIT( 0x08, IP_ACTIVE_LOW, IPT_JOYSTICK_RIGHT ) PORT_4WAY PORT_COCKTAIL
*	PORT_BIT( 0x10, IP_ACTIVE_LOW, IPT_JOYSTICK_DOWN ) PORT_4WAY PORT_COCKTAIL
*	PORT_BIT( 0x20, IP_ACTIVE_LOW, IPT_JOYSTICK_UP ) PORT_4WAY PORT_COCKTAIL
*	PORT_BIT( 0x40, IP_ACTIVE_LOW, IPT_START2 )
*	PORT_BIT( 0x80, IP_ACTIVE_LOW, IPT_COIN2 )
*
*	PORT_START("DSW")
*	PORT_DIPNAME( 0xc0, 0xc0, DEF_STR( Coinage ) )      PORT_DIPLOCATION("DSW:7,8")
*	PORT_DIPSETTING(    0x40, DEF_STR( 2C_1C ) )
*	PORT_DIPSETTING(    0xc0, DEF_STR( 1C_1C ) )
*	PORT_DIPSETTING(    0x80, DEF_STR( 1C_2C ) )
*	PORT_DIPSETTING(    0x00, DEF_STR( Free_Play ) )
*	PORT_DIPNAME( 0x38, 0x08, DEF_STR( Difficulty ) )   PORT_DIPLOCATION("DSW:4,5,6")
*	PORT_DIPSETTING(    0x10, "1 Car, Medium" )
*	PORT_DIPSETTING(    0x28, "1 Car, Hard" )
*	PORT_DIPSETTING(    0x00, "2 Cars, Easy" )
*	PORT_DIPSETTING(    0x18, "2 Cars, Medium" )
*	PORT_DIPSETTING(    0x30, "2 Cars, Hard" )
*	PORT_DIPSETTING(    0x08, "3 Cars, Easy" )
*	PORT_DIPSETTING(    0x20, "3 Cars, Medium" )
*	PORT_DIPSETTING(    0x38, "3 Cars, Hard" )
*	PORT_DIPNAME( 0x06, 0x02, DEF_STR( Bonus_Life ) )   PORT_DIPLOCATION("DSW:2,3")
*	PORT_DIPSETTING(    0x02, "15000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x00)
*	PORT_DIPSETTING(    0x04, "30000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x00)
*	PORT_DIPSETTING(    0x06, "40000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x00)
*
*	PORT_DIPSETTING(    0x02, "20000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x08)
*	PORT_DIPSETTING(    0x04, "40000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x08)
*	PORT_DIPSETTING(    0x06, "60000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x08)
*
*	PORT_DIPSETTING(    0x02, "10000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x10)
*	PORT_DIPSETTING(    0x04, "20000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x10)
*	PORT_DIPSETTING(    0x06, "30000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x10)
*
*	PORT_DIPSETTING(    0x02, "15000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x18)
*	PORT_DIPSETTING(    0x04, "30000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x18)
*	PORT_DIPSETTING(    0x06, "40000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x18)
*
*	PORT_DIPSETTING(    0x02, "20000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x20)
*	PORT_DIPSETTING(    0x04, "40000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x20)
*	PORT_DIPSETTING(    0x06, "60000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x20)
*
*	PORT_DIPSETTING(    0x02, "10000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x28)
*	PORT_DIPSETTING(    0x04, "20000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x28)
*	PORT_DIPSETTING(    0x06, "30000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x28)
*
*	PORT_DIPSETTING(    0x02, "15000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x30)
*	PORT_DIPSETTING(    0x04, "30000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x30)
*	PORT_DIPSETTING(    0x06, "40000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x30)
*
*	PORT_DIPSETTING(    0x02, "20000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x38)
*	PORT_DIPSETTING(    0x04, "40000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x38)
*	PORT_DIPSETTING(    0x06, "60000" )     PORT_CONDITION("DSW", 0x38, EQUALS, 0x38)
*	PORT_DIPSETTING(    0x00, DEF_STR( None ) )
*	PORT_SERVICE_DIPLOC( 0x01, 0x01, "DSW:1")



l_0000:
	jra	boot_3800                          	| [$0000: jp   boot_3800]

* reaches here when all memory & screen tests are done
l_0003:
	                       	| [$0003: ld   sp,$8400]
	jra	l_003a                             	| [$0006: jr   $003A]

	jra	l_01f0                             	| [$0030: jp   $01F0]

l_003a:
	* im   0
	jbsr	osd_enable_interrupts
	move.b	#0xF7,d0                        	| [$003d: ld   a,$F7]
*out  ($00),a
	lea	timer_8000(a6),a0                      	| [$0041: ld   hl,$8000]
	lea	l_8001(a6),a1                      	| [$0044: ld   de,$8001]
	move.l	#0x0800,d1                      	| [$0047: ld   bc,$0800]
	clr.b	(a0)                             	| [$004a: ld   (hl),$00]
	jbsr	ldir                              	| [$004c: ldir]
	move.l	a0,-(sp)                        	| [$004e: push hl]
	move.b	#0x08,d1                        	| [$004f: ld   c,$08]
	move.b	#0x60,(a0)                      	| [$0051: ld   (hl),$60]
	jbsr	ldir                              	| [$0053: ldir]
	move.b	#0x18,d1                        	| [$0055: ld   c,$18]
	clr.b	(a0)                             	| [$0057: ld   (hl),$00]
	jbsr	ldir                              	| [$0059: ldir]
	exg	a1,a0                              	| [$005b: ex   de,hl]
	move.l	(sp)+,a0                        	| [$005c: pop  hl]
	move.l	#0x07E0,d1                      	| [$005d: ld   bc,$07E0]
	jbsr	ldir                              	| [$0060: ldir]
	jra	l_04e7                             	| [$0062: jp   $04E7]

irq_0069:
l_0069:
	            	| [$0069: ld   (watchdog_a080),a]
	move.b	#0x01,iyh                        	| [$006c: ld   iyh,$01]
	LOAD_WORD	value16_8069(a6),d5             	| [$006f: ld   hl,($8069)]
	LOAD_WORD	value16_8050(a6),d1             	| [$0072: ld   bc,($8050)]
	move.b	l_806B(a6),d0                   	| [$0076: ld   a,($806B)]
	                               	| [$0079: and  a]
	jeq	l_00a3                             	| [$007a: jr   z,$00A3]
	move.b	l_8048(a6),d0                   	| [$007c: ld   a,($8048)]
	btst.b	#0,d0                           	| [$007f: bit  0,a]
	jne	l_00ce                             	| [$0081: jp   nz,$00CE]
l_0084:
	LOAD_WORD	value16_804c(a6),d3             	| [$0084: ld   de,($804C)]
	add.w	d3,d5                            	| [$0088: add  hl,de]
	STORE_WORD	d5,value16_804c(a6)            	| [$0089: ld   ($804C),hl]
	* subtract MSBs
	move.w	d3,d0                           	| [$008c: ld   a,d]
	sub.w	d5,d0                            	| [$008d: sub  h]
	rol.w	#8,d0
	lea	l_8073(a6),a0                      	| [$008e: ld   hl,$8073]
	jbsr	l_0d8c                            	| [$0091: call $0D8C]
	add.b	d2,d0                            	| [$0094: add  a,c]
	move.b	d0,value16_8050(a6)                   	| [$0095: ld   ($8050),a]
	move.b	iyh,d0                          	| [$0098: ld   a,iyh]
	                               	| [$009a: and  a]
	jeq	l_00ce                             	| [$009b: jr   z,$00CE]
	LOAD_WORD	value16_805a(a6),d5             	| [$009d: ld   hl,($805A)]

	move.b	#0x00,iyh                        	| [$00a0: ld   iyh,$00]
l_00a3:
	move.b	l_8048(a6),d0                   	| [$00a3: ld   a,($8048)]
	btst.b	#1,d0                           	| [$00a6: bit  1,a]
	jne	l_00ce                             	| [$00a8: jp   nz,$00CE]
	LOAD_WORD	value16_804e(a6),d3             	| [$00ab: ld   de,($804E)]

	add.w	d3,d5                            	| [$00af: add  hl,de]
	STORE_WORD	d5,value16_804e(a6)            	| [$00b0: ld   ($804E),hl]
	* subtract MSBs
	move.w	d3,d0                           	| [$00b3: ld   a,d]
	sub.w	d5,d0                            	| [$00b4: sub  h]
	rol.w	#8,d0
	lea	l_8075(a6),a0                      	| [$00b5: ld   hl,$8075]
	jbsr	l_0d8c                            	| [$00b8: call $0D8C]
	neg.b	d0                               	| [$00bb: neg]
	add.b	d1,d0                            	| [$00bd: add  a,b]
	move.b	d0,l_8051(a6)                   	| [$00be: ld   ($8051),a]
	move.b	iyh,d0                          	| [$00c1: ld   a,iyh]
	                               	| [$00c3: and  a]
	jeq	l_00ce                             	| [$00c4: jr   z,$00CE]
	move.b	#0x00,iyh                        	| [$00c6: ld   iyh,$00]
	LOAD_WORD	value16_805a(a6),d5             	| [$00c9: ld   hl,($805A)]

	jra	l_0084                             	| [$00cc: jr   $0084]

l_00ce:
	lea	l_8068(a6),a2                      	| [$00ce: ld   ix,$8068]
	move.b	nb_enemy_cars_824e(a6),d0       	| [$00d2: ld   a,(nb_enemy_cars_824e)]
	addq.b	#1,d0                           	| [$00d5: inc  a]
	move.b	d0,d1                           	| [$00d6: ld   b,a]
	move.b	#0x01,iyl                        	| [$00d7: ld   iyl,$01]
l_00da:
	jbsr	l_00e0                            	| [$00da: call $00E0]
	jra	l_0178                             	| [$00dd: jp   $0178]

l_00e0:
	move.b	(0x00,a2),d0                    	| [$00e0: ld   a,(ix+$00)]
	                               	| [$00e3: and  a]
	jeq	l_00f3                             	| [$00e4: jr   z,$00F3]
	move.b	(0x15,a2),d0                    	| [$00e6: ld   a,(ix+$15)]
	                               	| [$00e9: and  a]
	jne	l_0185                             	| [$00ea: jp   nz,$0185]
	addq.b	#1,(0x00,a2)                    	| [$00ed: inc  (ix+$00)]
	jra	l_015a                             	| [$00f0: jp   $015A]

l_00f3:
	move.b	(0x02,a2),d5                    	| [$00f3: ld   h,(ix+$02)]
	move.b	(0x01,a2),d6                    	| [$00f6: ld   l,(ix+$01)]
	move.b	(0x03,a2),d0                    	| [$00f9: ld   a,(ix+$03)]
l_00fc:

	move.l	a2,-(sp)                        	| [$00fc: push ix]
	addq.w	#1,a2                           	| [$00fe: inc  ix]
	move.b	d0,d2                           	| [$0100: ld   c,a]
	tst.b	d0                               	| [$0101: and  a]
	jne	l_0108                             	| [$0102: jr   nz,$0108]
	addq.w	#2,a2                           	| [$0104: inc  ix] * 2
l_0108:
	move.b	(0x04,a2),d3                    	| [$0108: ld   d,(ix+$04)]
	move.b	(0x03,a2),d4                    	| [$010b: ld   e,(ix+$03)]
	LOAD_D5_16_FROM_D5D6
	LOAD_D3_16_FROM_D3D4
	add.w	d3,d5                            	| [$010e: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d6,(0x03,a2)                    	| [$010f: ld   (ix+$03),l]
	move.b	d5,(0x04,a2)                    	| [$0112: ld   (ix+$04),h]
	move.b	d5,d0                           	| [$0115: ld   a,h]
	add.b	#0x18,d0                         	| [$0116: add  a,$18]
	move.b	d0,d6                           	| [$0118: ld   l,a]
	subq.b	#1,d0                           	| [$0119: dec  a]
	jmi	l_0151                             	| [$011a: jp   m,$0151]
	sub.b	#0x2F,d0                         	| [$011d: sub  $2F]
	move.b	d0,d6                           	| [$011f: ld   l,a]
	jmi	l_012d                             	| [$0120: jp   m,$012D]
	move.b	d2,d0                           	| [$0123: ld   a,c]
	and.b	d2,d0                            	| [$0124: and  c]
	jne	l_0154                             	| [$0125: jr   nz,$0154]
l_0127:
	subq.b	#1,(0x07,a2)                    	| [$0127: dec  (ix+$07)]
l_012a:
	move.b	d6,(0x04,a2)                    	| [$012a: ld   (ix+$04),l]
l_012d:
	move.b	d5,d0                           	| [$012d: ld   a,h]
	sub.b	d3,d0                            	| [$012e: sub  d]
	btst.b	#7,d0                           	| [$012f: bit  7,a]
	jeq	l_0136                             	| [$0131: jr   z,$0136]
	addq.b	#1,(0x0a,a2)                    	| [$0133: inc  (ix+$0a)]
l_0136:
	add.b	(0x0b,a2),d0                     	| [$0136: add  a,(ix+$0b)]
	scs		d7
	move.b	d0,(0x0b,a2)                    	| [$0139: ld   (ix+$0b),a]
	tst.b	d7
	jne	l_0141                             	| [$013c: jr   nc,$0141]
	addq.b	#1,(0x0a,a2)                    	| [$013e: inc  (ix+$0a)]
l_0141:
	move.l	(sp)+,a2                        	| [$0141: pop  ix]
	subq.b	#1,iyl                          	| [$0143: dec  iyl]
	jne	l_015a                             	| [$0145: jr   nz,$015A]
	move.b	(0x03,a2),d0                    	| [$0147: ld   a,(ix+$03)]
	not.b	d0                               	| [$014a: cpl]
	LOAD_WORD	value16_805a(a6),d5             	| [$014b: ld   hl,($805A)]
	LOAD_D5D6_FROM_D5_16

	jra	l_00fc                             	| [$014e: jp   $00FC]

l_0151:
	and.b	d2,d0                            	| [$0151: and  c]
	jne	l_0127                             	| [$0152: jr   nz,$0127]
l_0154:
	addq.b	#1,(0x07,a2)                    	| [$0154: inc  (ix+$07)]
	jra	l_012a                             	| [$0157: jp   $012A]

l_015a:
	move.b	(0x08,a2),d0                    	| [$015a: ld   a,(ix+$08)]
	add.b	d0,d0                            	| [$015d: add  a,a]
	add.b	d0,d0                            	| [$015e: add  a,a]
	add.b	d0,d0                            	| [$015f: add  a,a]
	move.b	(0x0a,a2),d3                    	| [$0160: ld   d,(ix+$0a)]
	lsr.b	#1,d3                            	| [$0163: srl  d]
	roxr.b	#1,d0                           	| [$0165: rra]
	lsr.b	#1,d3                            	| [$0166: srl  d]
	roxr.b	#1,d0                           	| [$0168: rra]
	lsr.b	#1,d3                            	| [$0169: srl  d]
	roxr.b	#1,d0                           	| [$016b: rra]
	move.b	d0,(0x11,a2)                    	| [$016c: ld   (ix+$11),a]
	move.b	d3,d0                           	| [$016f: ld   a,d]
	and.b	#0x07,d0                         	| [$0170: and  $07]
	or.b	#0x98,d0                          	| [$0172: or   $98]
	move.b	d0,(0x12,a2)                    	| [$0174: ld   (ix+$12),a]
	rts                                    	| [$0177: ret]

l_0178:
	move.w	#0x0020,d3                      	| [$0178: ld   de,$0020]
	add.w	d3,a2                            	| [$017b: add  ix,de]
	clr.b	iyl                        	| [$017d: ld   iyl,$00]
	subq.b	#1,d1                           	| [$0180: dec  b]
	jne	l_00da                             	| [$0181: jp   nz,$00DA]
	rts                                    	| [$0184: ret]

l_0185:
	move.b	(0x0f,a2),d0                    	| [$0185: ld   a,(ix+$0f)]
	lea	l_2270(a6),a0                      	| [$0188: ld   hl,$2270]
l_018b:
	cmp.b	(a0),d0                          	| [$018b: cp   (hl)]
	addq.w	#1,a0                           	| [$018c: inc  hl]
	jne	l_018b                             	| [$018d: jr   nz,$018B]
	move.b	(0x00,a2),d0                    	| [$018f: ld   a,(ix+$00)]
	and.b	#0x03,d0                         	| [$0192: and  $03]
	jne	l_019a                             	| [$0194: jr   nz,$019A]
	move.b	(a0),d0                         	| [$0196: ld   a,(hl)]
	move.b	d0,(0x0f,a2)                    	| [$0197: ld   (ix+$0f),a]
l_019a:
	subq.b	#1,(0x00,a2)                    	| [$019a: dec  (ix+$00)]
	jne	l_015a                             	| [$019d: jp   nz,$015A]
	clr.b	(0x15,a2)                        	| [$01a0: ld   (ix+$15),$00]
	movem.w	d1/d2,-(sp)                    	| [$01a4: push bc]
	move.b	(0x0c,a2),d1                    	| [$01a5: ld   b,(ix+$0c)]
	move.b	(0x0e,a2),d2                    	| [$01a8: ld   c,(ix+$0e)]
l_01ab:
	movem.w	d1/d2,-(sp)                    	| [$01ab: push bc]
	jbsr	l_0e7f                            	| [$01ac: call $0E7F]
	movem.w	(sp)+,d1/d2                    	| [$01af: pop  bc]
	move.b	(a0),d0                         	| [$01b0: ld   a,(hl)]
	sub.b	#0xBD,d0                         	| [$01b1: sub  $BD]
	jeq	l_01c9                             	| [$01b3: jr   z,$01C9]
	cmp.b	#0x09,d0                         	| [$01b5: cp   $09]
	jcc	l_01ec                             	| [$01b7: jr   nc,$01EC]
	cmp.b	#0x03,d0                         	| [$01b9: cp   $03]
	jcs	l_01c3                             	| [$01bb: jr   c,$01C3]
	move.b	d2,d0                           	| [$01bd: ld   a,c] [uncovered]
	add.b	#0x08,d0                         	| [$01be: add  a,$08] [uncovered]
	move.b	d0,d2                           	| [$01c0: ld   c,a] [uncovered]
	jra	l_01ab                             	| [$01c1: jr   $01AB] [uncovered]

l_01c3:
	move.b	d1,d0                           	| [$01c3: ld   a,b]
	sub.b	#0x08,d0                         	| [$01c4: sub  $08]
	move.b	d0,d1                           	| [$01c6: ld   b,a]
	jra	l_01ab                             	| [$01c7: jr   $01AB]

l_01c9:
	move.b	#0x03,d1                        	| [$01c9: ld   b,$03]
	move.b	d5,d3                           	| [$01cb: ld   d,h]
	move.b	d6,d4                           	| [$01cc: ld   e,l]
	bset.b	#3,d5                           	| [$01cd: set  3,h]
l_01cf:
	move.b	#0x03,d2                        	| [$01cf: ld   c,$03]

	move.l	a0,-(sp)                        	| [$01d1: push hl]
	movem.w	d3/d4,-(sp)                    	| [$01d2: push de]
	move.l	a1,-(sp)                        	| [$01d2: push de]
l_01d3:
	move.b	(a1),d0                         	| [$01d3: ld   a,(de)]
	sub.b	#0xBD,d0                         	| [$01d4: sub  $BD]
	cmp.b	#0x09,d0                         	| [$01d6: cp   $09]
	jcc	l_01df                             	| [$01d8: jr   nc,$01DF]
	move.b	#0x81,d0                        	| [$01da: ld   a,$81]
	move.b	d0,(a1)                         	| [$01dc: ld   (de),a]
	move.b	#0x15,(a0)                      	| [$01dd: ld   (hl),$15]
l_01df:
	jbsr	advance_hl_and_de_0e5d                            	| [$01df: call $0E5D]
	subq.b	#1,d2                           	| [$01e2: dec  c]
	jne	l_01d3                             	| [$01e3: jr   nz,$01D3]
	move.l	(sp)+,a1                        	| [$01e5: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$01e5: pop  de]
	move.l	(sp)+,a0                        	| [$01e6: pop  hl]
	jbsr	advance_hl_and_de_0e6c                            	| [$01e7: call $0E6C]
	subq.b	#1,d1                           	| [...]
	jne	l_01cf                             	| [$01ea: djnz $01CF]
l_01ec:
	movem.w	(sp)+,d1/d2                    	| [$01ec: pop  bc]
	jra	l_015a                             	| [$01ed: jp   $015A]

l_01f0:

	move.l	a0,-(sp)                        	| [$01f0: push hl]
	movem.w	d3/d4,-(sp)                    	| [$01f1: push de]
	move.l	a1,-(sp)                        	| [$01f1: push de]
	movem.w	d1/d2,-(sp)                    	| [$01f2: push bc]
	move.l	a4,-(sp)                        	| [$01f2: push bc]
	move.w	d0,-(sp)                        	| [$01f3: push af]

	move.l	a2,-(sp)                        	| [$01f4: push ix]

	move.l	a3,-(sp)                        	| [$01f6: push iy]
	CLEAR_XC_FLAGS                         	| [$01f8: xor  a]
	clr.b	d0                               	| [$01f8: xor  a]
	                   	| [$01f9: ld   ($A181),a]
	            	| [$01fc: ld   (watchdog_a080),a]
	jbsr	l_14c5                            	| [$01ff: call $14C5]
	jbsr	l_154d                            	| [$0202: call $154D]
	move.b	l_8020(a6),d0                   	| [$0205: ld   a,($8020)]
	                               	| [$0208: and  a]
	jeq	l_0210                             	| [$0209: jr   z,$0210]
	cmp.b	#0x02,d0                         	| [$020b: cp   $02]
	jne	l_03bd                             	| [$020d: jp   nz,$03BD]
l_0210:
	move.b	l_804D(a6),d0                   	| [$0210: ld   a,($804D)]
	jbsr	osd_set_scroll_x             	| [$0213: ld   (scrollx_a130),a]
	move.b	l_804F(a6),d0                   	| [$0216: ld   a,($804F)]
	neg.b	d0                               	| [$0219: neg]
	jbsr	osd_set_scroll_y             	| [$021b: ld   (scrolly_a140),a]
	lea	l_8814(a6),a2                      	| [$021e: ld   ix,$8814]
	lea	l_8015(a6),a0                      	| [$0222: ld   hl,$8015]
	lea	pointer_8002(a6),a3                      	| [$0225: ld   iy,$8002]
	move.b	#0x06,d1                        	| [$0229: ld   b,$06]
l_022b:

	move.l	a3,-(sp)                        	| [$022b: push iy]
	move.b	(0x00,a3),d4                    	| [$022d: ld   e,(iy+$00)]
	move.b	(0x01,a3),d3                    	| [$0230: ld   d,(iy+$01)]
	move.b	d3,d0                           	| [$0233: ld   a,d]
	or.b	d4,d0                             	| [$0234: or   e]
	jeq	l_02a5                             	| [$0235: jr   z,$02A5]
	movem.w	d3/d4,-(sp)                    	| [$0237: push de]
	move.l	a1,a3                        	| [$0237: push de]
	                        	| [$0238: pop  iy]
	movem.w	d3/d4,-(sp)                    	| [$023a: push de]
	move.l	a1,-(sp)                        	| [$023a: push de]
	jbsr	l_0490                            	| [$023b: call $0490]
	move.b	(0x00,a3),d0                    	| [$023e: ld   a,(iy+$00)]
	ror.b	#1,d0                            	| [$0241: rrca]
	jcc	l_024b                             	| [$0242: jr   nc,$024B]
	bset.b	#7,(0x01,a2)                    	| [$0244: set  7,(ix+$01)]
	jra	l_024f                             	| [$0248: jp   $024F]

l_024b:
	bclr.b	#7,(0x01,a2)                    	| [$024b: res  7,(ix+$01)]
l_024f:
	move.b	(0x01,a3),d0                    	| [$024f: ld   a,(iy+$01)]
	move.b	d0,(a0)                         	| [$0252: ld   (hl),a]
	move.b	(0x03,a3),d0                    	| [$0253: ld   a,(iy+$03)]
	move.b	d0,(0x00,a2)                    	| [$0256: ld   (ix+$00),a]
	move.b	(0x04,a3),d0                    	| [$0259: ld   a,(iy+$04)]
	subq.w	#1,a0                           	| [$025c: dec  hl]
	move.b	d0,(a0)                         	| [$025d: ld   (hl),a]
	addq.w	#1,a0                           	| [$025e: inc  hl]
	move.b	(0x05,a3),d0                    	| [$025f: ld   a,(iy+$05)]
	and.b	#0x7F,d0                         	| [$0262: and  $7F]
	move.b	d0,d3                           	| [$0264: ld   d,a]
	move.b	(0x01,a2),d0                    	| [$0265: ld   a,(ix+$01)]
	and.b	#0x80,d0                         	| [$0268: and  $80]
	or.b	d3,d0                             	| [$026a: or   d]
	move.b	d0,(0x01,a2)                    	| [$026b: ld   (ix+$01),a]
	move.b	d1,d0                           	| [$026e: ld   a,b]
	move.l	(sp)+,a3                        	| [$026f: pop  iy]
	cmp.b	#0x06,d0                         	| [$0271: cp   $06]
	jeq	l_02a5                             	| [$0273: jr   z,$02A5]
	LOAD_WORD	pointer_8052(a6),d3             	| [$0275: ld   de,($8052)]
	LOAD_D3D4_FROM_D3_16
	move.b	l_8055(a6),d0                   	| [$0279: ld   a,($8055)]
	ror.b	#1,d0                            	| [$027c: rrca]
	and.b	#0x01,d0                         	| [$027d: and  $01]
	neg.b	d0                               	| [$027f: neg]
	add.b	(-0x01,a3),d0                    	| [$0281: add  a,(iy-$01)]
	sub.b	d3,d0                            	| [$0284: sub  d]
	cmp.b	#0x0B,d0                         	| [$0285: cp   $0B]
	jcc	l_02b7                             	| [$0287: jr   nc,$02B7]
	move.b	d0,d3                           	| [$0289: ld   d,a]
	move.b	value16_8054(a6),d0                   	| [$028a: ld   a,($8054)]
	ror.b	#1,d0                            	| [$028d: rrca]
	and.b	#0x01,d0                         	| [$028e: and  $01]
	neg.b	d0                               	| [$0290: neg]
	add.b	(-0x03,a3),d0                    	| [$0292: add  a,(iy-$03)]
	sub.b	d4,d0                            	| [$0295: sub  e]
	cmp.b	#0x0B,d0                         	| [$0296: cp   $0B]
	jcc	l_02b7                             	| [$0298: jr   nc,$02B7]
	cmp.b	#0x0A,d0                         	| [$029a: cp   $0A]
	bne.b	0f                               	| [...]
	jbsr	l_02c7                            	| [$029c: call z,$02C7]
0:
	move.b	d3,d0                           	| [$029f: ld   a,d]
	cmp.b	#0x0A,d0                         	| [$02a0: cp   $0A]
	bne.b	0f                               	| [...]
	jbsr	l_02d8                            	| [$02a2: call z,$02D8]
0:
l_02a5:
	move.l	(sp)+,a3                        	| [$02a5: pop  iy]
l_02a7:
	addq.w	#1,a3                           	| [$02a7: inc  iy]
	addq.w	#1,a3                           	| [$02a9: inc  iy]
	addq.w	#2,a2                           	| [$02ab: inc  ix] * 2
	addq.w	#2,a0                           	| [$02af: inc  hl] * 2
	subq.b	#1,d1                           	| [$02b1: dec  b]
	jne	l_022b                             	| [$02b2: jp   nz,$022B]
	jra	l_02eb                             	| [$02b5: jr   $02EB]

l_02b7:
	move.l	(sp)+,a3                        	| [$02b7: pop  iy]
	CLEAR_XC_FLAGS                         	| [$02b9: xor  a]
	clr.b	d0                               	| [$02b9: xor  a]
	move.b	d0,(0x00,a3)                    	| [$02ba: ld   (iy+$00),a]
	move.b	d0,(0x01,a3)                    	| [$02bd: ld   (iy+$01),a]
	subq.w	#1,a0                           	| [$02c0: dec  hl]
	move.b	#0xEC,d0                        	| [$02c1: ld   a,$EC]
	move.b	d0,(a0)                         	| [$02c3: ld   (hl),a]
	addq.w	#1,a0                           	| [$02c4: inc  hl]
	jra	l_02a7                             	| [$02c5: jr   $02A7]

l_02c7:
	move.b	value16_8054(a6),d0                   	| [$02c7: ld   a,($8054)]
	                               	| [$02ca: and  a]
	jeq	l_02d1                             	| [$02cb: jr   z,$02D1]
	subq.b	#1,d0                           	| [$02cd: dec  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$02ce: ret  z] [...]
0:
	jra	l_02e7                             	| [$02cf: jr   $02E7]

l_02d1:
	btst.b	#7,(-0x06,a3)                   	| [$02d1: bit  7,(iy-$06)]
	beq.b	0f                               	| [...]
	rts                                    	| [$02d5: ret  nz] [...]
0:
	jra	l_02e7                             	| [$02d6: jr   $02E7]

l_02d8:
	move.b	l_8055(a6),d0                   	| [$02d8: ld   a,($8055)]
	                               	| [$02db: and  a]
	jeq	l_02e2                             	| [$02dc: jr   z,$02E2]
	subq.b	#1,d0                           	| [$02de: dec  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$02df: ret  z] [...]
0:
	jra	l_02e7                             	| [$02e0: jr   $02E7]

l_02e2:
	btst.b	#7,(-0x04,a3)                   	| [$02e2: bit  7,(iy-$04)]
	bne.b	0f                               	| [...]
	rts                                    	| [$02e6: ret  z] [...]
0:
l_02e7:
	move.w	(sp)+,d0                        	| [$02e7: pop  af]
	jra	l_02b7                             	| [$02e8: jp   $02B7]

l_02eb:
	jbsr	l_0069                            	| [$02eb: call $0069]
	jbsr	l_0db2                            	| [$02ee: call $0DB2]
	jbsr	l_1c6b                            	| [$02f1: call $1C6B]
	lea	l_8068(a6),a2                      	| [$02f4: ld   ix,$8068]
	move.b	#0x09,d1                        	| [$02f8: ld   b,$09]
	lea	l_8294(a6),a0                      	| [$02fa: ld   hl,$8294]
	lea	l_8034(a6),a1                      	| [$02fd: ld   de,$8034]
	move.b	l_826F(a6),d0                   	| [$0300: ld   a,($826F)]
	and.b	#0x0F,d0                         	| [$0303: and  $0F]
	jne	l_030b                             	| [$0305: jr   nz,$030B]
	move.b	#0x0E,(a0)                      	| [$0307: ld   (hl),$0E]
	jra	l_0311                             	| [$0309: jr   $0311]

l_030b:
	and.b	#0x07,d0                         	| [$030b: and  $07]
	jne	l_0311                             	| [$030d: jr   nz,$0311]
	move.b	#0x08,(a0)                      	| [$030f: ld   (hl),$08]
l_0311:
	move.b	l_81A8(a6),d0                   	| [$0311: ld   a,($81A8)]
	                               	| [$0314: and  a]
	jne	l_0350                             	| [$0315: jr   nz,$0350]
	move.b	(0x08,a2),d0                    	| [$0317: ld   a,(ix+$08)]
	add.b	d0,d0                            	| [$031a: add  a,a]
	add.b	#0xE0,d0                         	| [$031b: add  a,$E0]
	bclr.b	#0,(a0)                         	| [$031d: res  0,(hl)]
	jcs	l_0323                             	| [$031f: jr   c,$0323]
	bset.b	#0,(a0)                         	| [$0321: set  0,(hl)]
l_0323:
	move.b	d0,(a1)                         	| [$0323: ld   (de),a]
	move.b	(0x0a,a2),d0                    	| [$0324: ld   a,(ix+$0a)]
	sub.b	#0x64,d0                         	| [$0327: sub  $64]
	jeq	l_0332                             	| [$0329: jr   z,$0332]
	add.b	#0x64,d0                         	| [$032b: add  a,$64]
	add.b	d0,d0                            	| [$032d: add  a,a]
	neg.b	d0                               	| [$032e: neg]
	add.b	#0x9D,d0                         	| [$0330: add  a,$9D]
l_0332:
	add.w	#0x800,a1                           	| [$0332: set  3,d]
	jbsr	write_d0_in_a1_videoram                         	| [$0334: ld   (de),a]
l_0335:
	move.b	d1,d0                           	| [$0335: ld   a,b]
	addq.w	#1,a0                           	| [$0336: inc  hl]
	sub.w	#0x7FF,a1                           	| [$0337: res  3,d]
											| [$0339: inc  de]
	move.w	#0x0020,d1                      	| [$033a: ld   bc,$0020]
	add.w	d1,a2                            	| [$033d: add  ix,bc]
	move.b	d0,d1                           	| [$033f: ld   b,a]
	subq.b	#1,d1                           	| [...]
	jne	l_0311                             	| [$0340: djnz $0311]
	lea	l_8294(a6),a0                      	| [$0342: ld   hl,$8294]
	lea	l_A004(a6),a1                      	| [$0345: ld   de,$A004]
	move.w	#0x0009,d1                      	| [$0348: ld   bc,$0009]
	jbsr	ldir                              	| [$034b: ldir]
	jra	l_036d                             	| [$034d: jp   $036D]
l_0350:
	move.b	(0x08,a2),d0                    	| [$0350: ld   a,(ix+$08)]
	add.b	d0,d0                            	| [$0353: add  a,a]
	neg.b	d0                               	| [$0354: neg]
	add.b	#0x41,d0                         	| [$0356: add  a,$41]
	bset.b	#0,(a0)                         	| [$0358: set  0,(hl)]
	move.b	d0,(a1)                         	| [$035a: ld   (de),a]
	move.b	(0x0a,a2),d0                    	| [$035b: ld   a,(ix+$0a)]
	sub.b	#0x64,d0                         	| [$035e: sub  $64]
	jeq	l_0367                             	| [$0360: jr   z,$0367]
	add.b	#0x64,d0                         	| [$0362: add  a,$64]
	add.b	d0,d0                            	| [$0364: add  a,a]
	add.b	#0x5F,d0                         	| [$0365: add  a,$5F]
l_0367:
	add.w	#0x800,a1                           	| [$0367: set  3,d]
	jbsr	write_d0_in_a1_videoram                         	| [$0369: ld   (de),a]
	jra	l_0335                             	| [$036a: jp   $0335]
l_036d:
	move.b	#0x05,d1                        	| [$036d: ld   b,$05]
	lea	l_8068(a6),a2                      	| [$036f: ld   ix,$8068]
	lea	l_8004(a6),a3                      	| [$0373: ld   iy,$8004]
	lea	l_824C(a6),a0                      	| [$0377: ld   hl,$824C]
	move.b	(a0),d0                         	| [$037a: ld   a,(hl)]
	subq.b	#1,(a0)                         	| [$037b: dec  (hl)]
	cmp.b	#0x32,d0                         	| [$037c: cp   $32]
	jcc	l_03bd                             	| [$037e: jr   nc,$03BD]
	tst.b	d0                               	| [$0380: and  a]
	jne	l_03bd                             	| [$0381: jr   nz,$03BD]
	move.b	d0,(a0)                         	| [$0383: ld   (hl),a]
l_0384:
	move.b	(0x01,a3),d5                    	| [$0384: ld   h,(iy+$01)]
	move.b	(0x00,a3),d6                    	| [$0387: ld   l,(iy+$00)]
	move.b	d6,d0                           	| [$038a: ld   a,l]
	or.b	d5,d0                             	| [$038b: or   h]
	jeq	l_03b7                             	| [$038c: jr   z,$03B7]
	move.b	(a0),d0                         	| [$038e: ld   a,(hl)]
	btst.b	#0,d0                           	| [$038f: bit  0,a]
	jne	l_03b7                             	| [$0391: jr   nz,$03B7]
	move.b	(0x0c,a2),d0                    	| [$0393: ld   a,(ix+$0c)]
	addq.w	#1,a0                           	| [$0396: inc  hl]
	sub.b	(a0),d0                          	| [$0397: sub  (hl)]
	jcc	l_039c                             	| [$0398: jr   nc,$039C]
	neg.b	d0                               	| [$039a: neg]
l_039c:
	cmp.b	#0x0B,d0                         	| [$039c: cp   $0B]
	jcc	l_03b7                             	| [$039e: jr   nc,$03B7]
	move.b	(0x0e,a2),d0                    	| [$03a0: ld   a,(ix+$0e)]
	addq.w	#2,a0                           	| [$03a3: inc  hl] * 2
	sub.b	(a0),d0                          	| [$03a5: sub  (hl)]
	jcc	l_03aa                             	| [$03a6: jr   nc,$03AA]
	neg.b	d0                               	| [$03a8: neg]
l_03aa:
	cmp.b	#0x0B,d0                         	| [$03aa: cp   $0B]
	jcc	l_03b7                             	| [$03ac: jr   nc,$03B7]
	jbsr	osd_enable_interrupts   | ei
	move.b	#0x01,d0                        	| [$03af: ld   a,$01]
	                   	| [$03b1: ld   ($A181),a]
	jra	l_16d3                             	| [$03b4: jp   $16D3]

l_03b7:
	addq.w	#1,a3                           	| [$03b7: inc  iy]
	addq.w	#1,a3                           	| [$03b9: inc  iy]
	subq.b	#1,d1                           	| [...]
	jne	l_0384                             	| [$03bb: djnz $0384]
l_03bd:
	move.b	l_824B(a6),d0                   	| [$03bd: ld   a,($824B)]
	addq.b	#1,d0                           	| [$03c0: inc  a]
	move.b	d0,l_824B(a6)                   	| [$03c1: ld   ($824B),a]
	jbsr	l_0d72                            	| [$03c4: call $0D72]
	move.b	l_826F(a6),d0                   	| [$03c7: ld   a,($826F)]
	addq.b	#1,d0                           	| [$03ca: inc  a]
	move.b	d0,l_826F(a6)                   	| [$03cb: ld   ($826F),a]
	add.b	#0x08,d0                         	| [$03ce: add  a,$08]
	and.b	#0x0F,d0                         	| [$03d0: and  $0F]
	bne.b	0f                               	| [...]
	jbsr	l_04c7                            	| [$03d2: call z,$04C7]
0:
	move.b	l_824D(a6),d0                   	| [$03d5: ld   a,($824D)]
	addq.b	#1,d0                           	| [$03d8: inc  a]
	move.b	d0,l_824D(a6)                   	| [$03d9: ld   ($824D),a]
	and.b	#0x3F,d0                         	| [$03dc: and  $3F]
	bne.b	0f                               	| [...]
	jbsr	l_0472                            	| [$03de: call z,$0472]
0:
	and.b	#0x07,d0                         	| [$03e1: and  $07]
	bne.b	0f                               	| [...]
	jbsr	l_0462                            	| [$03e3: call z,$0462]
0:
	move.b	l_8269(a6),d0                   	| [$03e6: ld   a,($8269)]
	addq.b	#1,d0                           	| [$03e9: inc  a]
	move.b	d0,l_8269(a6)                   	| [$03ea: ld   ($8269),a]
	LOAD_POINTER	pointer_899a(a6),a0             	| [$03ed: ld   hl,($899A)]

	move.b	l_828C(a6),d0                   	| [$03f0: ld   a,($828C)]
	                               	| [$03f3: and  a]
	jne	l_03f9                             	| [$03f4: jr   nz,$03F9]
	move.b	l_8288(a6),d0                   	| [$03f6: ld   a,($8288)]
l_03f9:
	subq.b	#1,d0                           	| [$03f9: dec  a]
	move.b	d0,l_828C(a6)                   	| [$03fa: ld   ($828C),a]
	jne	l_042e                             	| [$03fd: jr   nz,$042E]
	addq.b	#1,(a0)                         	| [$03ff: inc  (hl)]
	move.b	(a0),d0                         	| [$0400: ld   a,(hl)]
	lea	l_828A(a6),a0                      	| [$0401: ld   hl,$828A]
	move.b	#0x04,(a0)                      	| [$0404: ld   (hl),$04]
	cmp.b	#0x28,d0                         	| [$0406: cp   $28]
	jcs	l_0421                             	| [$0408: jr   c,$0421]
	move.b	#0x03,(a0)                      	| [$040a: ld   (hl),$03]
	cmp.b	#0x28,d0
	jeq	l_041e                             	| [$040c: jr   z,$041E]
	cmp.b	#0x50,d0                         	| [$040e: cp   $50]
	jcs	l_0421                             	| [$0410: jr   c,$0421]
	move.b	#0x02,(a0)                      	| [$0412: ld   (hl),$02]
	cmp.b	#0x50,d0
	jeq	l_041e                             	| [$0414: jr   z,$041E]
	cmp.b	#0xC8,d0                         	| [$0416: cp   $C8]
	jcs	l_0421                             	| [$0418: jr   c,$0421]
	move.b	#0x01,(a0)                      	| [$041a: ld   (hl),$01]
	cmp.b	#0xC8,d0
	jne	l_0421                             	| [$041c: jr   nz,$0421]
l_041e:
	jbsr	l_190b                            	| [$041e: call $190B]
l_0421:
	move.b	l_8269(a6),d0                   	| [$0421: ld   a,($8269)]
	move.b	d0,d1                           	| [$0424: ld   b,a]
	move.b	l_826E(a6),d0                   	| [$0425: ld   a,($826E)]
	cmp.b	d1,d0                            	| [$0428: cp   b]
	jcc	l_042e                             	| [$0429: jr   nc,$042E]
	move.b	d0,l_8269(a6)                   	| [$042b: ld   ($8269),a]
l_042e:
	nop                                    	| [$042e: nop]
	lea	l_89F4(a6),a0                      	| [$042f: ld   hl,$89F4]
	move.b	l_8021(a6),d0                   	| [$0432: ld   a,($8021)]
	                               	| [$0435: and  a]
	jne	l_043b                             	| [$0436: jr   nz,$043B]
	move.b	d0,(a0)                         	| [$0438: ld   (hl),a]
	addq.w	#1,a0                           	| [$0439: inc  hl]
	move.b	d0,(a0)                         	| [$043a: ld   (hl),a]
l_043b:
	jbsr	l_2400                            	| [$043b: call $2400]
	move.b	l_8024(a6),d0                   	| [$043e: ld   a,($8024)]
	cmp.b	#0x09,d0                         	| [$0441: cp   $09]
	scs		d7
	clr.b	d0                               	| [$0443: ld   a,$00]
	tst.b	d7
	jeq	l_0448                             	| [$0445: jr   nc,$0448]
	addq.b	#1,d0                           	| [$0447: inc  a]
l_0448:
	move.b	d0,l_A186(a6)                   	| [$0448: ld   ($A186),a]
	move.b	dsw_a100(a6),d0                 	| [$044b: ld   a,(dsw_a100)]
	and.b	#0x01,d0                         	| [$044e: and  $01]
	jeq	boot_3800                          	| [$0450: jp   z,boot_3800]
	move.b	#0x01,d0                        	| [$0453: ld   a,$01]
	                   	| [$0455: ld   ($A181),a]
	move.l	(sp)+,a3                        	| [$0458: pop  iy]
	move.l	(sp)+,a2                        	| [$045a: pop  ix]
	move.w	(sp)+,d0                        	| [$045c: pop  af]
	move.l	(sp)+,a4                        	| [$045d: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$045d: pop  bc]
	move.l	(sp)+,a1                        	| [$045e: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$045e: pop  de]
	move.l	(sp)+,a0                        	| [$045f: pop  hl]
	jbsr	osd_enable_interrupts   | ei
	rts                                    	| [$0461: ret]

l_0462:
	LOAD_WORD	previous_car_speed_802d(a6),d5             	| [$0462: ld   hl,($802D)]
	LOAD_WORD	value16_8069(a6),d3             	| [$0465: ld   de,($8069)]
	add.w	d3,d5                            	| [$0469: add  hl,de]
	asr.w	#1,d5                            	| [$046a: sra  h]
	                           	| [$046c: rr   l]
	STORE_WORD	d5,value16_8069(a6)            	| [$046e: ld   ($8069),hl]
	rts                                    	| [$0471: ret]

l_0472:
	move.b	d0,d1                           	| [$0472: ld   b,a]
	tst.b	l_8292(a6)                   	| [$0473: ld   a,($8292)]
	                               	| [$0476: and  a]
	                           	| [$0477: ld   a,b]
	bne.b	0f                               	| [...]
	rts                                    	| [$0478: ret  z] [...]
0:
	LOAD_WORD	car_speed_8027(a6),d5     	| [$0479: ld   hl,(car_speed_8027)]

	move.w	#-0x20,d3                       	| [$047c: ld   de,$FFE0]
	add.w	d3,d5                            	| [$047f: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,d0                           	| [$0480: ld   a,h]
	                               	| [$0481: and  a]
	jne	l_048b                             	| [$0482: jr   nz,$048B]
	move.b	l_802B(a6),d0                   	| [$0484: ld   a,($802B)] [uncovered]
	cmp.b	d6,d0                            	| [$0487: cp   l] [uncovered]
	jcs	l_048b                             	| [$0488: jr   c,$048B] [uncovered]
	move.b	d0,d6                           	| [$048a: ld   l,a] [uncovered]
l_048b:
	LOAD_D5_16_FROM_D5D6
	STORE_WORD	d5,car_speed_8027(a6)    	| [$048b: ld   (car_speed_8027),hl]
	move.b	d1,d0                           	| [$048e: ld   a,b]
	rts                                    	| [$048f: ret]

l_0490:
	move.b	l_81A8(a6),d0                   	| [$0490: ld   a,($81A8)]
	                               	| [$0493: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$0494: ret  z] [...]
0:

	move.w	d5,-(sp)                        	| [$0495: push hl] [uncovered]
	move.b	(0x00,a3),d3                    	| [$0496: ld   d,(iy+$00)] [uncovered]
	move.b	(0x01,a3),d4                    	| [$0499: ld   e,(iy+$01)] [uncovered]
	LOAD_WORD	0x0114(a6),d5                      	| [$049c: ld   hl,$0114] [uncovered]
	tst.b	d0                               	| [$049f: and  a] [uncovered]
	sub.w	d3,d5                            	| [$04a0: sbc  hl,de] [uncovered]
	LOAD_D5D6_FROM_D5_16
	move.b	(0x03,a3),d0                    	| [$04a2: ld   a,(iy+$03)] [uncovered]
	neg.b	d0                               	| [$04a5: neg] [uncovered]
	sub.b	#0x10,d0                         	| [$04a7: sub  $10] [uncovered]
	move.b	d0,d3                           	| [$04a9: ld   d,a] [uncovered]
	move.b	(0x04,a3),d0                    	| [$04aa: ld   a,(iy+$04)] [uncovered]
	eor.b	#0x03,d0                         	| [$04ad: xor  $03] [uncovered]
	move.b	(0x05,a3),d4                    	| [$04af: ld   e,(iy+$05)] [uncovered]
	lea	l_8188(a6),a3                      	| [$04b2: ld   iy,$8188] [uncovered]
	move.b	d5,(0x00,a3)                    	| [$04b6: ld   (iy+$00),h] [uncovered]
	move.b	d6,(0x01,a3)                    	| [$04b9: ld   (iy+$01),l] [uncovered]
	move.b	d3,(0x03,a3)                    	| [$04bc: ld   (iy+$03),d] [uncovered]
	move.b	d0,(0x04,a3)                    	| [$04bf: ld   (iy+$04),a] [uncovered]
	move.b	d4,(0x05,a3)                    	| [$04c2: ld   (iy+$05),e] [uncovered]
	move.w	(sp)+,d5                        	| [$04c5: pop  hl] [uncovered]
	rts                                    	| [$04c6: ret] [uncovered]

l_04c7:
	move.b	l_8020(a6),d0                   	| [$04c7: ld   a,($8020)]
	move.b	#0x04,d1                        	| [$04ca: ld   b,$04]
	LOAD_POINTER	pointer_8998(a6),a0             	| [$04cc: ld   hl,($8998)]

	cmp.b	#0x02,d0                         	| [$04cf: cp   $02]
	beq.b	0f                               	| [...]
	rts                                    	| [$04d1: ret  nz] [...]
0:
l_04d2:
	move.b	(a0),d7                         	| [$04d2: ld   a,(hl)]
	move.b	#0x67,d0                        	| [$04d5: ld   a,$67]
	cmp.b	#0x66,d7                         	| [$04d3: cp   $66]
	jeq	l_04db                             	| [$04d7: jr   z,$04DB]
	move.b	#0x66,d0                        	| [$04d9: ld   a,$66]
l_04db:
	move.b	d0,(a0)+                         	| [$04db: ld   (hl),a]
	                           	| [$04dc: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_04db                             	| [$04dd: djnz $04DB]
	rts                                    	| [$04df: ret]
l_04e0:
	move.b	#0x04,d1                        	| [$04e0: ld   b,$04]
	LOAD_POINTER	pointer_8998(a6),a0             	| [$04e2: ld   hl,($8998)]

	jra	l_04d2                             	| [$04e5: jr   $04D2]
l_04e7:
	lea	l_1F8B(a6),a0                      	| [$04e7: ld   hl,$1F8B]
	lea	l_8040(a6),a1                      	| [$04ea: ld   de,$8040]
	move.b	#0x66,d2                        	| [$04ed: ld   c,$66]
	jbsr	l_1c4e                            	| [$04ef: call $1C4E]
	jbsr	l_1b76                            	| [$04f2: call $1B76]
	move.b	dsw_a100(a6),d0                 	| [$04f5: ld   a,(dsw_a100)]
	move.b	d0,d1                           	| [$04f8: ld   b,a]
	lea	l_82AA(a6),a0                      	| [$04f9: ld   hl,$82AA]
	and.b	#0xC0,d0                         	| [$04fc: and  $C0]
	jeq	l_050e                             	| [$04fe: jr   z,$050E]
	addq.b	#1,(a0)                         	| [$0500: inc  (hl)]
	btst.b	#7,d0                           	| [$0501: bit  7,a]
	jeq	l_050e                             	| [$0503: jr   z,$050E]
	addq.w	#1,a0                           	| [$0505: inc  hl]
	addq.b	#1,(a0)                         	| [$0506: inc  (hl)]
	btst.b	#6,d0                           	| [$0507: bit  6,a]
	jne	l_050e                             	| [$0509: jr   nz,$050E]
	addq.b	#1,(a0)                         	| [$050b: inc  (hl)] [uncovered]
	                           	| [$050c: dec  hl] [uncovered]
	addq.b	#1,-(a0)                         	| [$050d: inc  (hl)] [uncovered]
l_050e:
	move.b	d1,d0                           	| [$050e: ld   a,b]
	ror.b	#3,d0                            	| [$050f: rrca] * 3
	and.b	#0x07,d0                         	| [$0512: and  $07]
	cmp.b	#0x02,d0                         	| [$0514: cp   $02]
	jcs	l_0539                             	| [$0516: jr   c,$0539]
	cmp.b	#0x05,d0                         	| [$0518: cp   $05] [uncovered]
	jcc	l_052a                             	| [$051a: jr   nc,$052A] [uncovered]
	subq.b	#1,d0                           	| [$051c: dec  a] [uncovered]
	move.b	d0,l_800E(a6)                   	| [$051d: ld   ($800E),a] [uncovered]
	lea	l_20D3(a6),a0                      	| [$0520: ld   hl,$20D3] [uncovered]
	move.b	#0x0B,d0                        	| [$0523: ld   a,$0B] [uncovered]
	lea	l_220B(a6),a1                      	| [$0525: ld   de,$220B] [uncovered]
	jra	l_0546                             	| [$0528: jr   $0546] [uncovered]
l_052a:
	subq.b	#0x04,d0                        	| [$052a: sub  $04]
	move.b	d0,l_800E(a6)                   	| [$052c: ld   ($800E),a]
	lea	l_211B(a6),a0                      	| [$052f: ld   hl,$211B]
	move.b	#0x08,d0                        	| [$0532: ld   a,$08]
	lea	l_2203(a6),a1                      	| [$0534: ld   de,$2203]
	jra	l_0546                             	| [$0537: jr   $0546]
l_0539:
	addq.b	#0x02,d0                        	| [$0539: add  a,$02]
	move.b	d0,l_800E(a6)                   	| [$053b: ld   ($800E),a]
	lea	l_205B(a6),a0                      	| [$053e: ld   hl,$205B]
	move.b	#0x11,d0                        	| [$0541: ld   a,$11]
	lea	l_2213(a6),a1                      	| [$0543: ld   de,$2213]
l_0546:
	STORE_POINTER	a0,pointer_82d2(a6)            	| [$0546: ld   ($82D2),hl]
	move.b	d0,l_82D8(a6)                   	| [$0549: ld   ($82D8),a]
	lea	l_8060(a6),a0                      	| [$054c: ld   hl,$8060]
	move.b	#0x70,d2                        	| [$054f: ld   c,$70]
	exg	a1,a0                              	| [$0551: ex   de,hl]
	jbsr	l_1c4e                            	| [$0552: call $1C4E]
	moveq	#0,d0
	move.b	l_800E(a6),d0                   	| [$0555: ld   a,($800E)]
	add.b	d0,d0                            	| [$0558: add  a,a]
	add.b	d0,d0                            	| [$0559: add  a,a]
	add.b	d0,d0                            	| [$055a: add  a,a]
	move.b	d0,d2                           	| [$055b: ld   c,a]
	move.b	d1,d0                           	| [$055c: ld   a,b]
	and.b	#0x06,d0                         	| [$055d: and  $06]
	or.b	d2,d0                             	| [$055f: or   c]
	lea	l_21E3(a6),a0                      	| [$0560: ld   hl,$21E3]
	add.w	d0,a0                            	| [$0563: add  a,l]
	                           	| [$0564: ld   l,a]
	                             	| [$0565: jr   nc,$0568]
	                           	| [$0567: inc  h] [uncovered]
l_0568:
	move.b	(a0)+,d4                         	| [$0568: ld   e,(hl)]
	                           	| [$0569: inc  hl]
	move.b	(a0),d3                         	| [$056a: ld   d,(hl)]
	LOAD_D3_16_FROM_D3D4
	STORE_WORD	d3,pointer_81b3(a6)            	| [$056b: ld   ($81B3),de]
	move.b	p2_a080(a6),d0            	| [$056f: ld   a,(watchdog_a080)]
	or.b	#0xFE,d0                          	| [$0572: or   $FE]
	not.b	d0                               	| [$0574: cpl]
	move.b	d0,l_81A9(a6)                   	| [$0575: ld   ($81A9),a]
	jbsr	l_14c5                            	| [$0578: call $14C5]
l_057b:
	move.b	l_81A9(a6),d0                   	| [$057b: ld   a,($81A9)]
	move.b	d0,l_A183(a6)                   	| [$057e: ld   ($A183),a]
	move.b	d0,l_81A8(a6)                   	| [$0581: ld   ($81A8),a]
	jbsr	l_1b76                            	| [$0584: call $1B76]
	move.b	l_8024(a6),d0                   	| [$0587: ld   a,($8024)]
	                               	| [$058a: and  a]
	jne	l_06ab                             	| [$058b: jp   nz,$06AB]
	move.b	d0,l_8021(a6)                   	| [$058e: ld   ($8021),a]
	addq.b	#1,d0                           	| [$0591: inc  a]
	                   	| [$0592: ld   ($A181),a]
	move.b	d0,l_8020(a6)                   	| [$0595: ld   ($8020),a]
	move.b	#0xF7,d0                        	| [$0598: ld   a,$F7]
*out  ($00),a
	move.b	#0x49,d0                        	| [$059c: ld   a,$49]
	jbsr	clear_screen_and_reset_scroll_1dcb                            	| [$059e: call $1DCB]
	lea	l_8C40(a6),a0                      	| [$05a1: ld   hl,$8C40]
	move.b	#0x90,d1                        	| [$05a4: ld   b,$90]
l_05a6:
	move.b	#0x4A,(a0)                      	| [$05a6: ld   (hl),$4A]
	addq.w	#1,a0                           	| [$05a8: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_05a6                             	| [$05a9: djnz $05A6]
	lea	l_8F00(a6),a0                      	| [$05ab: ld   hl,$8F00]
	lea	l_8F01(a6),a1                      	| [$05ae: ld   de,$8F01]
	move.w	#0x00FF,d1                      	| [$05b1: ld   bc,$00FF]
	move.b	#0x47,(a0)                      	| [$05b4: ld   (hl),$47]
	jbsr	ldir                              	| [$05b6: ldir]
	lea	l_1FF3(a6),a0                      	| [$05b8: ld   hl,$1FF3]
	jbsr	osd_enable_interrupts   | ei
	jbsr	l_1e1b                            	| [$05bc: call $1E1B]
	jbsr	l_1e1b                            	| [$05bf: call $1E1B]
	jbsr	l_1e1b                            	| [$05c2: call $1E1B]
	jbsr	l_1e1b                            	| [$05c5: call $1E1B]
	jbsr	l_1e1b                            	| [$05c8: call $1E1B]
	jbsr	l_1e1b                            	| [$05cb: call $1E1B]
	move.b	#0x01,d0                        	| [$05ce: ld   a,$01]
	move.b	d0,l_800F(a6)                   	| [$05d0: ld   ($800F),a]
	move.b	d0,l_8020(a6)                   	| [$05d3: ld   ($8020),a]
	move.b	d0,l_824B(a6)                   	| [$05d6: ld   ($824B),a]
	                   	| [$05d9: ld   ($A181),a]
	jbsr	osd_get_random                       	| [$05dc: ld   a,r]
	and.b	#0x1F,d0                         	| [$05de: and  $1F]
l_05e0:
	move.b	d0,d2                           	| [$05e0: ld   c,a]
	sub.b	#0x0A,d0                         	| [$05e1: sub  $0A]
	jcc	l_05e0                             	| [$05e3: jr   nc,$05E0]
	addq.b	#1,d2                           	| [$05e5: inc  c]
	lea	l_8EA8(a6),a0                      	| [$05e6: ld   hl,$8EA8]
	move.b	#0x07,d1                        	| [$05e9: ld   b,$07]
l_05eb:
	move.b	#0x44,(a0)                      	| [$05eb: ld   (hl),$44]
	addq.w	#1,a0                           	| [$05ed: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_05eb                             	| [$05ee: djnz $05EB]
	lea	l_8EC8(a6),a0                      	| [$05f0: ld   hl,$8EC8]
	move.b	#0x44,(a0)                      	| [$05f3: ld   (hl),$44]
	addq.w	#1,a0                           	| [$05f5: inc  hl]
	move.b	#0x44,(a0)                      	| [$05f6: ld   (hl),$44]
	lea	l_86A8(a6),a2                      	| [$05f8: ld   ix,$86A8]
	move.b	#0x87,(0x01,a2)                 	| [$05fc: ld   (ix+$01),$87]
	move.b	#0x88,(0x20,a2)                 	| [$0600: ld   (ix+$20),$88]
	move.b	#0x89,(0x21,a2)                 	| [$0604: ld   (ix+$21),$89]
	move.b	#0x81,d0                        	| [$0608: ld   a,$81]
	move.b	d0,(0x00,a2)                    	| [$060a: ld   (ix+$00),a]
	move.b	d0,(0x02,a2)                    	| [$060d: ld   (ix+$02),a]
	move.b	d0,(0x05,a2)                    	| [$0610: ld   (ix+$05),a]
	move.b	d0,(0x06,a2)                    	| [$0613: ld   (ix+$06),a]
	move.b	#0x50,(0x08,a2)                 	| [$0616: ld   (ix+$08),$50]
	move.b	#0x54,(0x09,a2)                 	| [$061a: ld   (ix+$09),$54]
	move.b	#0x53,(0x0a,a2)                 	| [$061e: ld   (ix+$0a),$53]
	clr.b	d3                               	| [$0622: ld   d,$00]
	move.b	#0xA0,d4                        	| [$0624: ld   e,$A0]
l_0626:
	move.b	#0x81,d0                        	| [$0626: ld   a,$81]
	move.b	d0,(0x03,a2)                    	| [$0628: ld   (ix+$03),a]
	move.b	d0,(0x04,a2)                    	| [$062b: ld   (ix+$04),a]
	move.b	d0,(0x05,a2)                    	| [$062e: ld   (ix+$05),a]
l_0631:
	move.b	l_824B(a6),d0                   	| [$0631: ld   a,($824B)]
	and.b	#0x3F,d0                         	| [$0634: and  $3F]
	jeq	l_0626                             	| [$0636: jr   z,$0626]
	and.b	#0x1F,d0                         	| [$0638: and  $1F]
	jne	l_0631                             	| [$063a: jr   nz,$0631]
	move.b	l_824B(a6),d0                   	| [$063c: ld   a,($824B)]
	addq.b	#1,d0                           	| [$063f: inc  a]
	move.b	d0,l_824B(a6)                   	| [$0640: ld   ($824B),a]
	move.b	#0x81,d0                        	| [$0644: ld   a,$81]
	subq.b	#1,d2                           	| [$0643: dec  c]
	jne	l_064b                             	| [$0646: jr   nz,$064B]
	move.b	#0x8A,d0                        	| [$0648: ld   a,$8A]
	move.b	d0,d3                           	| [$064a: ld   d,a]
l_064b:
	move.b	d0,(0x00,a2)                    	| [$064b: ld   (ix+$00),a]
	btst.b	#1,d3                           	| [$064e: bit  1,d]
	jeq	l_0656                             	| [$0650: jr   z,$0656]
	move.b	#0xAC,(0x05,a2)                 	| [$0652: ld   (ix+$05),$AC]
l_0656:
	move.b	#0xAA,(0x04,a2)                 	| [$0656: ld   (ix+$04),$AA]
	move.b	d4,(0x03,a2)                    	| [$065a: ld   (ix+$03),e]
	move.b	d4,d0                           	| [$065d: ld   a,e]
	addq.b	#1,d4                           	| [$065e: inc  e]
	cmp.b	#0xA9,d0                         	| [$065f: cp   $A9]
	jne	l_0631                             	| [$0661: jr   nz,$0631]
	move.b	#0xA0,(0x03,a2)                 	| [$0663: ld   (ix+$03),$A0]
	move.b	#0xAB,(0x05,a2)                 	| [$0667: ld   (ix+$05),$AB]
	move.b	#0xAC,(0x06,a2)                 	| [$066b: ld   (ix+$06),$AC]
	move.b	#0x01,d0                        	| [$066f: ld   a,$01]
	move.b	d0,l_824B(a6)                   	| [$0671: ld   ($824B),a]
l_0674:
	move.b	l_824B(a6),d0                   	| [$0674: ld   a,($824B)]
	and.b	#0x1F,d0                         	| [$0677: and  $1F]
	jne	l_0674                             	| [$0679: jr   nz,$0674]
	move.b	#0x01,d0                        	| [$067b: ld   a,$01]
	move.b	d0,l_81B0(a6)                   	| [$067d: ld   ($81B0),a]
	lea	l_E03F(a6),a0                      	| [$0680: ld   hl,$E03F]
	STORE_POINTER	a0,l_82F2(a6)            	| [$0683: ld   ($82F2),hl]
	lea	l_81AB(a6),a0                      	| [$0686: ld   hl,$81AB]
	move.b	#0x03,(a0)                      	| [$0689: ld   (hl),$03]
	jra	l_074c                             	| [$068b: jp   $074C]

l_068e:
	lea	l_824B(a6),a0                      	| [$068e: ld   hl,$824B]
	move.b	#0x88,(a0)                      	| [$0691: ld   (hl),$88]
l_0693:
	move.b	(a0),d0                         	| [$0693: ld   a,(hl)]
	                               	| [$0694: and  a]
	jne	l_0693                             	| [$0695: jr   nz,$0693]
	lea	l_8014(a6),a0                      	| [$0697: ld   hl,$8014]
	lea	pointer_8002(a6),a1                      	| [$069a: ld   de,$8002]
	move.b	#0x0C,d1                        	| [$069d: ld   b,$0C]
	CLEAR_XC_FLAGS                         	| [$069f: xor  a]
	clr.b	d0                               	| [$069f: xor  a]
	move.b	#0xEC,d2                        	| [$06a0: ld   c,$EC]
l_06a2:
	move.b	d2,(a0)                         	| [$06a2: ld   (hl),c]
	addq.w	#1,a0                           	| [$06a3: inc  hl]
	move.b	d0,(a1)                         	| [$06a4: ld   (de),a]
	addq.w	#1,a1                           	| [$06a5: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_06a2                             	| [$06a6: djnz $06A2]
	jra	l_057b                             	| [$06a8: jp   $057B]

l_06ab:
	                       	| [$06ab: ld   sp,$8400]
	move.b	#0x02,d0                        	| [$06ae: ld   a,$02]
	move.b	d0,l_8021(a6)                   	| [$06b0: ld   ($8021),a]
	subq.b	#1,d0                           	| [$06b3: dec  a]
	move.b	d0,l_8020(a6)                   	| [$06b4: ld   ($8020),a]
	                   	| [$06b7: ld   ($A181),a]
	jbsr	osd_enable_interrupts   | ei
	move.b	d0,l_81B0(a6)                   	| [$06bb: ld   ($81B0),a]
	move.b	d0,l_81B1(a6)                   	| [$06be: ld   ($81B1),a]
	lea	l_800E(a6),a0                      	| [$06c1: ld   hl,$800E]
	move.b	(a0),d0                         	| [$06c4: ld   a,(hl)]
	addq.w	#1,a0                           	| [$06c5: inc  hl]
	move.b	d0,(a0)                         	| [$06c6: ld   (hl),a]
	addq.w	#1,a0                           	| [$06c7: inc  hl]
	move.b	d0,(a0)                         	| [$06c8: ld   (hl),a]
	move.b	#0x66,d0                        	| [$06c9: ld   a,$66]
	jbsr	clear_screen_and_reset_scroll_1dcb                            	| [$06cb: call $1DCB]
	lea	l_1F30(a6),a0                      	| [$06ce: ld   hl,$1F30]
	lea	l_8566(a6),a1                      	| [$06d1: ld   de,$8566]
	jbsr	l_1c29                            	| [$06d4: call $1C29]

	move.l	a0,-(sp)                        	| [$06d7: push hl]
	LOAD_POINTER	pointer_81b3(a6),a0             	| [$06d8: ld   hl,($81B3)]

	move.b	(a0),d0                         	| [$06db: ld   a,(hl)]
	move.l	(sp)+,a0                        	| [$06dc: pop  hl]
	cmp.b	#0x49,d0                         	| [$06dd: cp   $49]
	jeq	l_06fe                             	| [$06df: jr   z,$06FE]
	lea	l_85E3(a6),a1                      	| [$06e1: ld   de,$85E3]
	jbsr	l_1c29                            	| [$06e4: call $1C29]
	LOAD_POINTER	pointer_81b3(a6),a0             	| [$06e7: ld   hl,($81B3)]

	move.w	#0x0007,d1                      	| [$06ea: ld   bc,$0007]
	add.w	d1,a0                            	| [$06ed: add  hl,bc]
	lea	l_85F1(a6),a1                      	| [$06ee: ld   de,$85F1]
	move.b	#0x01,d2                        	| [$06f1: ld   c,$01]
	jbsr	l_1c2b                            	| [$06f3: call $1C2B]
	LOAD_POINTER	pointer_81b3(a6),a0             	| [$06f6: ld   hl,($81B3)]

	move.b	#0x04,d2                        	| [$06f9: ld   c,$04]
	jbsr	l_1c2b                            	| [$06fb: call $1C2B]
l_06fe:
	lea	l_1F5A(a6),a0                      	| [$06fe: ld   hl,$1F5A]
	lea	l_866A(a6),a1                      	| [$0701: ld   de,$866A]
	jbsr	l_1c29                            	| [$0704: call $1C29]
	move.b	l_82AA(a6),d0                   	| [$0707: ld   a,($82AA)]
	                               	| [$070a: and  a]
	beq.b	0f                               	| [...]
	jbsr	l_1ed2                            	| [$070b: call nz,$1ED2]
0:
	lea	l_8728(a6),a1                      	| [$070e: ld   de,$8728]
	lea	l_1F6E(a6),a0                      	| [$0711: ld   hl,$1F6E]
	jbsr	l_1b15                            	| [$0714: call $1B15]
l_0717:
	move.b	l_824B(a6),d0                   	| [$0717: ld   a,($824B)]
	and.b	#0x1F,d0                         	| [$071a: and  $1F]
	bne.b	0f                               	| [...]
	jbsr	l_1c30                            	| [$071c: call z,$1C30]
0:
	and.b	#0x0F,d0                         	| [$071f: and  $0F]
	bne.b	0f                               	| [...]
	jbsr	l_1c3a                            	| [$0721: call z,$1C3A]
0:
	move.b	p1_a000(a6),d0                  	| [$0724: ld   a,(p1_a000)]
	and.b	#0x40,d0                         	| [$0727: and  $40]
	jeq	l_0743                             	| [$0729: jr   z,$0743]
	move.b	p2_a080(a6),d0            	| [$072b: ld   a,(watchdog_a080)]
	and.b	#0x40,d0                         	| [$072e: and  $40]
	jne	l_0717                             	| [$0730: jr   nz,$0717]
	move.b	l_8024(a6),d0                   	| [$0732: ld   a,($8024)] [uncovered]
	subq.b	#0x02,d0                        	| [$0735: sub  $02] [uncovered]
	jcs	l_0717                             	| [$0737: jr   c,$0717] [uncovered]
	move.b	d0,l_8024(a6)                   	| [$0739: ld   ($8024),a] [uncovered]
	lea	l_81AB(a6),a0                      	| [$073c: ld   hl,$81AB] [uncovered]
	move.b	#0x03,(a0)                      	| [$073f: ld   (hl),$03] [uncovered]
	jra	l_074c                             	| [$0741: jr   $074C] [uncovered]

l_0743:
	lea	l_8024(a6),a0                      	| [$0743: ld   hl,$8024]
	subq.b	#1,(a0)                         	| [$0746: dec  (hl)]
	lea	l_81AB(a6),a0                      	| [$0747: ld   hl,$81AB]
	move.b	#0x01,(a0)                      	| [$074a: ld   (hl),$01]
l_074c:
	CLEAR_XC_FLAGS                         	| [$074c: xor  a]
	clr.b	d0                               	| [$074c: xor  a]

	move.l	a0,-(sp)                        	| [$074d: push hl]
	lea	l_8014(a6),a0                      	| [$074e: ld   hl,$8014]
	lea	l_8015(a6),a1                      	| [$0751: ld   de,$8015]
	move.w	#0x000B,d1                      	| [$0754: ld   bc,$000B]
	move.b	#0xEC,(a0)                      	| [$0757: ld   (hl),$EC]
	jbsr	ldir                              	| [$0759: ldir]
	move.l	(sp)+,a0                        	| [$075b: pop  hl]
	                   	| [$075c: ld   ($A181),a]
	            	| [$075f: ld   (watchdog_a080),a]
	move.b	#0xF7,d0                        	| [$0762: ld   a,$F7]
*out  ($00),a
	jbsr	osd_enable_interrupts   | ei
	move.b	#0x80,d0                        	| [$0767: ld   a,$80]
	move.b	d0,l_89F5(a6)                   	| [$0769: ld   ($89F5),a]
	jbsr	l_1741                            	| [$076c: call $1741]
	jbsr	l_1c3a                            	| [$076f: call $1C3A]
	lea	l_1F9B(a6),a0                      	| [$0772: ld   hl,$1F9B]
	lea	unknown_8080(a6),a1                	| [$0775: ld   de,unknown_8080]
	move.b	#0x66,d2                        	| [$0778: ld   c,$66]
	jbsr	l_1c4e                            	| [$077a: call $1C4E]
	move.b	#0x72,d2                        	| [$077d: ld   c,$72]
	lea	l_1F93(a6),a0                      	| [$077f: ld   hl,$1F93]
	jbsr	l_0b08                            	| [$0782: call $0B08]
	jbsr	l_1c4e                            	| [$0785: call $1C4E]
	move.b	l_81AB(a6),d0                   	| [$0788: ld   a,($81AB)]
	move.b	d0,d1                           	| [$078b: ld   b,a]
	move.b	#0x66,d2                        	| [$078c: ld   c,$66]
	cmp.b	#0x01,d0                         	| [$078e: cp   $01]
	lea	l_1FBB(a6),a0                      	| [$0790: ld   hl,$1FBB]
	jeq	l_0798                             	| [$0793: jr   z,$0798]
	lea	l_1FA3(a6),a0                      	| [$0795: ld   hl,$1FA3]
l_0798:
	jbsr	l_0b08                            	| [$0798: call $0B08]
	jbsr	l_1c4e                            	| [$079b: call $1C4E]
	move.b	#0x72,d2                        	| [$079e: ld   c,$72]
	lea	l_1F93(a6),a0                      	| [$07a0: ld   hl,$1F93]
	subq.b	#1,d1                           	| [...]
	jne	l_07a8                             	| [$07a3: djnz $07A8]
	lea	l_1FBB(a6),a0                      	| [$07a5: ld   hl,$1FBB]
l_07a8:
	jbsr	l_0b08                            	| [$07a8: call $0B08]
	jbsr	l_1c4e                            	| [$07ab: call $1C4E]
	lea	l_1FBB(a6),a0                      	| [$07ae: ld   hl,$1FBB]
	jbsr	l_1c4e                            	| [$07b1: call $1C4E]
	CLEAR_XC_FLAGS                         	| [$07b4: xor  a]
	clr.b	d0                               	| [$07b4: xor  a]
	move.b	d0,l_81B2(a6)                   	| [$07b5: ld   ($81B2),a]
	move.b	#0x01,d0                        	| [$07b8: ld   a,$01]
	move.b	d0,l_81B7(a6)                   	| [$07ba: ld   ($81B7),a]
l_07bd:
	LOAD_POINTER	pointer_898a(a6),a0             	| [$07bd: ld   hl,($898A)]

	addq.b	#1,(a0)                         	| [$07c0: inc  (hl)]
	CLEAR_XC_FLAGS                         	| [$07c1: xor  a]
	clr.b	d0                               	| [$07c1: xor  a]
	LOAD_POINTER	pointer_898c(a6),a0             	| [$07c2: ld   hl,($898C)]

	move.b	d0,(a0)                         	| [$07c5: ld   (hl),a]
	move.b	d0,l_8292(a6)                   	| [$07c6: ld   ($8292),a]
	jbsr	l_190b                            	| [$07c9: call $190B]
	jbsr	l_1191                            	| [$07cc: call $1191]
	jbsr	l_11c5                            	| [$07cf: call $11C5]
	move.b	#0x03,d0                        	| [$07d2: ld   a,$03]
	                   	| [$07d4: ld   ($A181),a]
	jbsr	osd_enable_interrupts   | ei
	move.b	d0,l_8020(a6)                   	| [$07d8: ld   ($8020),a]
	move.b	d0,l_824B(a6)                   	| [$07db: ld   ($824B),a]
l_07de:
	move.b	l_824B(a6),d0                   	| [$07de: ld   a,($824B)]
	and.b	#0x3F,d0                         	| [$07e1: and  $3F]
	jne	l_07de                             	| [$07e3: jr   nz,$07DE]
l_07e5:
	CLEAR_XC_FLAGS                         	| [$07e5: xor  a]
	clr.b	d0                               	| [$07e5: xor  a]
	move.b	d0,l_8292(a6)                   	| [$07e6: ld   ($8292),a]
	lea	l_8290(a6),a0                      	| [$07e9: ld   hl,$8290]
	move.b	d0,(a0)                         	| [$07ec: ld   (hl),a]
	addq.w	#1,a0                           	| [$07ed: inc  hl]
	move.b	d0,(a0)                         	| [$07ee: ld   (hl),a]
	LOAD_POINTER	pointer_899c(a6),a0             	| [$07ef: ld   hl,($899C)]

	move.b	d0,(a0)                         	| [$07f2: ld   (hl),a]
	LOAD_POINTER	pointer_899a(a6),a0             	| [$07f3: ld   hl,($899A)]

	move.b	d0,(a0)                         	| [$07f6: ld   (hl),a]
	LOAD_POINTER	pointer_898e(a6),a0             	| [$07f7: ld   hl,($898E)]

	move.b	d0,(a0)+                         	| [$07fa: ld   (hl),a]
	                           	| [$07fb: inc  hl]
	move.b	#0x3C,(a0)                      	| [$07fc: ld   (hl),$3C]
	lea	l_828A(a6),a0                      	| [$07fe: ld   hl,$828A]
	move.b	#0x04,(a0)                      	| [$0801: ld   (hl),$04]
	jbsr	l_1b76                            	| [$0803: call $1B76]
	jbsr	l_190b                            	| [$0806: call $190B]
	moveq	#0x0000,d5                      	| [$0809: ld   hl,$0000]
	lea	l_9800(a6),a1                      	| [$080c: ld   de,$9800]
	move.b	#0x38,d2                        	| [$080f: ld   c,$38]
l_0811:
	move.b	#0x20,d1                        	| [$0811: ld   b,$20]
l_0813:
	* uses D5.W
	jbsr	l_12c5                            	| [$0813: call $12C5]
	move.b	d0,(a1)+                         	| [$0816: ld   (de),a]
											| [$0817: inc  de]
	add.w	#0x100,d5                           	| [$0818: inc  h]
	subq.b	#1,d1                           	| [...]
	jne	l_0813                             	| [$0819: djnz $0813]
	            	| [$081b: ld   (watchdog_a080),a]
	rol.w	#8,d5
	move.b	d1,d5                           	| [$081e: ld   h,b]
	rol.w	#8,d5
	addq.b	#1,d5                           	| [$081f: inc  l]
	subq.b	#1,d2                           	| [$0820: dec  c]
	jne	l_0811                             	| [$0821: jr   nz,$0811]
	LOAD_POINTER	pointer_8992(a6),a0       | [$0823: ld   hl,($8992)]

	move.b	#0x0A,d1                        	| [$0826: ld   b,$0A]
	move.b	#0x01,d0                        	| [$0828: ld   a,$01]
l_082a:
	move.b	(a0)+,d4                         	| [$082a: ld   e,(hl)]
	                           	| [$082b: inc  hl]
	move.b	(a0)+,d3                         	| [$082c: ld   d,(hl)]
	                           	| [$082d: inc  hl]
	LOAD_A1_FROM_D3D4
	move.b	d0,(a1)                         	| [$082e: ld   (de),a]
	subq.b	#1,d1                           	| [...]
	jne	l_082a                             	| [$082f: djnz $082A]
	addq.b	#1,d0                           	| [$0831: inc  a]
	move.b	d0,(a1)                         	| [$0832: ld   (de),a]
	move.b	nb_rocks_8251(a6),d0            	| [$0833: ld   a,(nb_rocks_8251)]
	move.b	d0,d1                           	| [$0836: ld   b,a]
	move.b	#0x03,d0                        	| [$0837: ld   a,$03]
	LOAD_POINTER	pointer_8996(a6),a0             	| [$0839: ld   hl,($8996)]

l_083c:
	move.b	(a0)+,d4                         	| [$083c: ld   e,(hl)]
	                           	| [$083d: inc  hl]
	move.b	(a0)+,d3                         	| [$083e: ld   d,(hl)]
	LOAD_A1_FROM_D3D4                           	| [$083f: inc  hl]
	move.b	d0,(a1)                         	| [$0840: ld   (de),a]
	subq.b	#1,d1                           	| [...]
	jne	l_083c                             	| [$0841: djnz $083C]
	lea	l_1FAB(a6),a0                      	| [$0843: ld   hl,$1FAB]
	lea	l_8120(a6),a1                      	| [$0846: ld   de,$8120]
	move.b	#0x6B,d2                        	| [$0849: ld   c,$6B]
	jbsr	l_1c4e                            	| [$084b: call $1C4E]
	lea	l_8140(a6),a1                      	| [$084e: ld   de,$8140]
	move.b	#0x66,d2                        	| [$0851: ld   c,$66]
	move.b	#0x02,d1                        	| [$0853: ld   b,$02]
l_0855:
	lea	l_1FBB(a6),a0                      	| [$0855: ld   hl,$1FBB]
	jbsr	l_1c4e                            	| [$0858: call $1C4E]
	subq.b	#1,d1                           	| [...]
	jne	l_0855                             	| [$085b: djnz $0855]
	move.b	#0x0E,d1                        	| [$085d: ld   b,$0E]
	move.b	#0x63,d2                        	| [$085f: ld   c,$63]
l_0861:
	lea	l_1FC3(a6),a0                      	| [$0861: ld   hl,$1FC3]
	jbsr	l_1c4e                            	| [$0864: call $1C4E]
	subq.b	#1,d1                           	| [...]
	jne	l_0861                             	| [$0867: djnz $0861]
	move.b	l_81B7(a6),d0                   	| [$0869: ld   a,($81B7)]
	                               	| [$086c: and  a]
	beq.b	0f                               	| [...]
	jbsr	l_095d                            	| [$086d: call nz,$095D]
0:
	lea	l_8380(a6),a1                      	| [$0870: ld   de,$8380]
	move.b	#0x66,d2                        	| [$0873: ld   c,$66]
	lea	l_1FB3(a6),a0                      	| [$0875: ld   hl,$1FB3]
	move.b	l_8383(a6),d0                   	| [$0878: ld   a,($8383)]
	                               	| [$087b: and  a]
	jeq	l_0884                             	| [$087c: jr   z,$0884]
	move.b	l_8021(a6),d0                   	| [$087e: ld   a,($8021)]
	                               	| [$0881: and  a]
	jeq	l_08a1                             	| [$0882: jr   z,$08A1]
l_0884:
	jbsr	l_1c4e                            	| [$0884: call $1C4E]
	LOAD_POINTER	pointer_898a(a6),a0             	| [$0887: ld   hl,($898A)]

	move.b	(a0),d0                         	| [$088a: ld   a,(hl)]
	subq.b	#1,d0                           	| [$088b: dec  a]
	lea	l_8383(a6),a0                      	| [$088c: ld   hl,$8383]
	clr.b	d1                               	| [$088f: ld   b,$00]
l_0891:
	cmp.b	#0x0A,d0                         	| [$0891: cp   $0A]
	jcs	l_089a                             	| [$0893: jr   c,$089A]
	addq.b	#1,d1                           	| [$0895: inc  b] [uncovered]
	sub.b	#0x0A,d0                         	| [$0896: sub  $0A] [uncovered]
	jra	l_0891                             	| [$0898: jr   $0891] [uncovered]

l_089a:
	move.b	d0,(a0)                         	| [$089a: ld   (hl),a]
	move.b	d1,d0                           	| [$089b: ld   a,b]
	subq.w	#1,a0                           	| [$089c: dec  hl]
	tst.b	d0                               	| [$089d: and  a]
	jeq	l_08a1                             	| [$089e: jr   z,$08A1]
	move.b	d0,(a0)                         	| [$08a0: ld   (hl),a] [uncovered]
l_08a1:
	move.b	l_81A8(a6),d0                   	| [$08a1: ld   a,($81A8)]
	move.b	d0,l_A183(a6)                   	| [$08a4: ld   ($A183),a]
	jbsr	l_12af                            	| [$08a7: call $12AF]
	jbsr	l_1d1b                            	| [$08aa: call $1D1B]
	CLEAR_XC_FLAGS                         	| [$08ad: xor  a]
	clr.b	d0                               	| [$08ad: xor  a]
	move.b	d0,l_82D0(a6)                   	| [$08ae: ld   ($82D0),a]
	LOAD_POINTER	pointer_898a(a6),a0             	| [$08b1: ld   hl,($898A)]

	move.b	(a0),d0                         	| [$08b4: ld   a,(hl)]
	and.b	#0x03,d0                         	| [$08b5: and  $03]
	jne	l_08e0                             	| [$08b7: jp   nz,$08E0]
	lea	l_89F5(a6),a0                      	| [$08ba: ld   hl,$89F5] [uncovered]
	move.b	#0x40,(a0)                      	| [$08bd: ld   (hl),$40] [uncovered]
	move.b	#0x4A,d0                        	| [$08bf: ld   a,$4A] [uncovered]
	jbsr	clear_screen_and_reset_scroll_1dcb                            	| [$08c1: call $1DCB] [uncovered]
	move.b	l_81A8(a6),d0                   	| [$08c4: ld   a,($81A8)] [uncovered]
	move.b	d0,l_A183(a6)                   	| [$08c7: ld   ($A183),a] [uncovered]
	lea	l_1FDB(a6),a0                      	| [$08ca: ld   hl,$1FDB] [uncovered]
	jbsr	l_1e1b                            	| [$08cd: call $1E1B] [uncovered]
	move.b	#0x03,d0                        	| [$08d0: ld   a,$03] [uncovered]
	move.b	d0,l_8020(a6)                   	| [$08d2: ld   ($8020),a] [uncovered]
	                   	| [$08d5: ld   ($A181),a] [uncovered]
	jbsr	osd_enable_interrupts   | ei    ; [uncovered]
	lea	l_89F5(a6),a0                      	| [$08d9: ld   hl,$89F5] [uncovered]
l_08dc:
	btst.b	#0,(a0)                         	| [$08dc: bit  0,(hl)] [uncovered]
	jeq	l_08dc                             	| [$08de: jr   z,$08DC] [uncovered]
l_08e0:
	jbsr	l_0aba                            	| [$08e0: call $0ABA]
	lea	l_2D0A(a6),a0                      	| [$08e3: ld   hl,$2D0A]
	STORE_POINTER	a0,pointer_8052(a6)            	| [$08e6: ld   ($8052),hl]
	move.b	#0x03,d0                        	| [$08e9: ld   a,$03]
	move.b	d0,l_8020(a6)                   	| [$08eb: ld   ($8020),a]
	                   	| [$08ee: ld   ($A181),a]
	jbsr	osd_enable_interrupts   | ei
	CLEAR_XC_FLAGS                         	| [$08f2: xor  a]
	clr.b	d0                               	| [$08f2: xor  a]
	jbsr	osd_set_scroll_y             	| [$08f3: ld   (scrolly_a140),a]
	jbsr	osd_set_scroll_x             	| [$08f6: ld   (scrollx_a130),a]
	jbsr	l_1131                            	| [$08f9: call $1131]
	lea	l_89F5(a6),a0                      	| [$08fc: ld   hl,$89F5]
l_08ff:
	btst.b	#0,(a0)                         	| [$08ff: bit  0,(hl)]
	jeq	l_08ff                             	| [$0901: jr   z,$08FF]
	move.b	#0x05,d1                        	| [$0903: ld   b,$05]
	move.w	#0x0020,d3                      	| [$0905: ld   de,$0020]
	move.b	#0x0D,d2                        	| [$0908: ld   c,$0D]
	LOAD_WORD	car_speed_8027(a6),d5     	| [$090a: ld   hl,(car_speed_8027)]

	STORE_WORD	d5,previous_car_speed_802d(a6)            	| [$090d: ld   ($802D),hl]
	LOAD_WORD	value16_8025(a6),d5             	| [$0910: ld   hl,($8025)]
	LOAD_D5D6_FROM_D5_16
	                         	| [$0913: xor  a]
	clr.b	d0                               	| [$0913: xor  a]
l_0914:
	add.w	d3,a2                            	| [$0914: add  ix,de]
	move.b	#0xB0,(0x00,a2)                 	| [$0916: ld   (ix+$00),$B0]
	move.b	d0,(0x03,a2)                    	| [$091a: ld   (ix+$03),a]
	move.b	d0,(0x04,a2)                    	| [$091d: ld   (ix+$04),a]
	move.b	d0,(0x05,a2)                    	| [$0920: ld   (ix+$05),a]
	move.b	d0,(0x06,a2)                    	| [$0923: ld   (ix+$06),a]
	move.b	d0,(0x07,a2)                    	| [$0926: ld   (ix+$07),a]
	move.b	d0,(0x13,a2)                    	| [$0929: ld   (ix+$13),a]
	move.b	d0,(0x15,a2)                    	| [$092c: ld   (ix+$15),a]
	move.b	d2,(0x08,a2)                    	| [$092f: ld   (ix+$08),c]
	addq.b	#2,d2                           	| [$0932: inc  c]
	move.b	#0x34,(0x0a,a2)                 	| [$0934: ld   (ix+$0a),$34]
	move.b	#0xF0,(0x0f,a2)                 	| [$0938: ld   (ix+$0f),$F0]
	move.b	#0x02,(0x10,a2)                 	| [$093c: ld   (ix+$10),$02]
	move.b	d6,(0x01,a2)                    	| [$0940: ld   (ix+$01),l]
	move.b	d5,(0x02,a2)                    	| [$0943: ld   (ix+$02),h]
	subq.b	#1,d1                           	| [...]
	jne	l_0914                             	| [$0946: djnz $0914]
	move.b	nb_enemy_cars_824e(a6),d0       	| [$0948: ld   a,(nb_enemy_cars_824e)]
	subq.b	#0x03,d0                        	| [$094b: sub  $03]
	jne	l_0954                             	| [$094d: jr   nz,$0954]
	move.b	#0x64,(-0x16,a2)                	| [$094f: ld   (ix-$16),$64]
	addq.b	#1,d0                           	| [$0953: inc  a]
l_0954:
	subq.b	#1,d0                           	| [$0954: dec  a]
	jne	l_09b1                             	| [$0955: jr   nz,$09B1]
	move.b	#0x64,(0x0a,a2)                 	| [$0957: ld   (ix+$0a),$64]
	jra	l_09b5                             	| [$095b: jr   $09B5]

l_095d:
	movem.w	d3/d4,-(sp)                    	| [$095d: push de]
	move.l	a1,-(sp)                        	| [$095d: push de]
	CLEAR_XC_FLAGS                         	| [$095e: xor  a]
	clr.b	d0                               	| [$095e: xor  a]
	move.b	d0,l_81B7(a6)                   	| [$095f: ld   ($81B7),a]
	lea	l_8340(a6),a1                      	| [$0962: ld   de,$8340]
	move.b	#0x02,d1                        	| [$0965: ld   b,$02]
	move.b	#0x63,d2                        	| [$0967: ld   c,$63]
l_0969:
	lea	l_1FBB(a6),a0                      	| [$0969: ld   hl,$1FBB]
	jbsr	l_1c4e                            	| [$096c: call $1C4E]
	subq.b	#1,d1                           	| [...]
	jne	l_0969                             	| [$096f: djnz $0969]
	move.l	(sp)+,a1                        	| [$0971: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$0971: pop  de]
	lea	l_8344(a6),a2                      	| [$0972: ld   ix,$8344]
	LOAD_POINTER	pointer_8988(a6),a0             	| [$0976: ld   hl,($8988)]

	move.b	(a0),d2                         	| [$0979: ld   c,(hl)]
	addq.b	#1,d2                           	| [$097a: inc  c]
	jra	l_0994                             	| [$097b: jr   $0994]

l_097d:
	lea	l_8344(a6),a2                      	| [$097d: ld   ix,$8344]
	lea	l_8340(a6),a1                      	| [$0981: ld   de,$8340]
	move.b	#0x02,d1                        	| [$0984: ld   b,$02]
	move.b	#0x63,d2                        	| [$0986: ld   c,$63]
l_0988:
	lea	l_1FBB(a6),a0                      	| [$0988: ld   hl,$1FBB]
	jbsr	l_1c4e                            	| [$098b: call $1C4E]
	subq.b	#1,d1                           	| [...]
	jne	l_0988                             	| [$098e: djnz $0988]
	LOAD_POINTER	pointer_8988(a6),a0             	| [$0990: ld   hl,($8988)]

	move.b	(a0),d2                         	| [$0993: ld   c,(hl)]
l_0994:
	subq.b	#1,d2                           	| [$0994: dec  c]
	bne.b	0f                               	| [...]
	rts                                    	| [$0995: ret  z] [...]
0:
	move.b	#0xB0,d0                        	| [$0996: ld   a,$B0]
	move.b	d0,(0x00,a2)                    	| [$0998: ld   (ix+$00),a]
	addq.b	#1,d0                           	| [$099b: inc  a]
	move.b	d0,(0x01,a2)                    	| [$099c: ld   (ix+$01),a]
	addq.b	#1,d0                           	| [$099f: inc  a]
	move.b	d0,(0x20,a2)                    	| [$09a0: ld   (ix+$20),a]
	addq.b	#1,d0                           	| [$09a3: inc  a]
	move.b	d0,(0x21,a2)                    	| [$09a4: ld   (ix+$21),a]
	jbsr	a2_to_ixl
	move.b	ixl,d0                          	| [$09a7: ld   a,ixl]
	addq.b	#2,d0                           	| [$09a9: inc  a] * 2
	and.b	#0xF7,d0                         	| [$09ab: and  $F7]
	move.b	d0,ixl                          	| [$09ad: ld   ixl,a]
	jbsr	ixl_to_a2
	jra	l_0994                             	| [$09af: jr   $0994]

l_09b5:
	                         	| [$09b5: xor  a]
	clr.b	d0                               	| [$09b5: xor  a]
	move.b	#0x0F,d2                        	| [$09b6: ld   c,$0F]
	move.b	#0x03,d1                        	| [$09b8: ld   b,$03]
	jbsr	l_1e11                            	| [$09ba: call $1E11]
l_09bd:
	add.w	d3,a2                            	| [$09bd: add  ix,de]
	move.b	#0xB0,(0x00,a2)                 	| [$09bf: ld   (ix+$00),$B0]
	move.b	d0,(0x03,a2)                    	| [$09c3: ld   (ix+$03),a]
	move.b	d0,(0x04,a2)                    	| [$09c6: ld   (ix+$04),a]
	move.b	d0,(0x05,a2)                    	| [$09c9: ld   (ix+$05),a]
	move.b	d0,(0x06,a2)                    	| [$09cc: ld   (ix+$06),a]
	move.b	d0,(0x07,a2)                    	| [$09cf: ld   (ix+$07),a]
	move.b	d2,(0x08,a2)                    	| [$09d2: ld   (ix+$08),c]
	addq.b	#2,d2                           	| [$09d5: inc  c]
	move.b	d0,(0x13,a2)                    	| [$09d7: ld   (ix+$13),a]
	move.b	d0,(0x15,a2)                    	| [$09da: ld   (ix+$15),a]
	move.b	#0x64,(0x0a,a2)                 	| [$09dd: ld   (ix+$0a),$64]
	move.b	#0xF2,(0x0f,a2)                 	| [$09e1: ld   (ix+$0f),$F2]
	move.b	#0x02,(0x10,a2)                 	| [$09e5: ld   (ix+$10),$02]
	move.b	d6,(0x01,a2)                    	| [$09e9: ld   (ix+$01),l]
	move.b	d5,(0x02,a2)                    	| [$09ec: ld   (ix+$02),h]
	subq.b	#1,d1                           	| [...]
	jne	l_09bd                             	| [$09ef: djnz $09BD]
	move.b	#0x0D,(0x08,a2)                 	| [$09f1: ld   (ix+$08),$0D]
	move.b	nb_enemy_cars_824e(a6),d0       	| [$09f5: ld   a,(nb_enemy_cars_824e)]
	subq.b	#0x06,d0                        	| [$09f8: sub  $06]
	jcs	l_0a0a                             	| [$09fa: jr   c,$0A0A]
	move.b	d0,d1                           	| [$09fc: ld   b,a] [uncovered]
	addq.b	#1,d1                           	| [$09fd: inc  b] [uncovered]
	lea	l_8108(a6),a2                      	| [$09fe: ld   ix,$8108] [uncovered]
l_0a02:
	add.w	d3,a2                            	| [$0a02: add  ix,de] [uncovered]
	move.b	#0x01,(0x0a,a2)                 	| [$0a04: ld   (ix+$0a),$01] [uncovered]
	subq.b	#1,d1                           	| [...]
	jne	l_0a02                             	| [$0a08: djnz $0A02] [uncovered]
l_0a0a:
	lea	pointer_8002(a6),a0                      	| [$0a0a: ld   hl,$8002]
	move.b	#0x0C,d1                        	| [$0a0d: ld   b,$0C]
	lea	l_8814(a6),a1                      	| [$0a0f: ld   de,$8814]
	CLEAR_XC_FLAGS                         	| [$0a12: xor  a]
	clr.b	d0                               	| [$0a12: xor  a]
l_0a13:
	move.b	d0,(a0)+                         	| [$0a13: ld   (hl),a]
	move.b	d0,(a1)+                         	| [$0a14: ld   (de),a]
	                           	| [$0a15: inc  hl]
	                           	| [$0a16: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_0a13                             	| [$0a17: djnz $0A13]
	lea	l_8073(a6),a0                      	| [$0a19: ld   hl,$8073]
	STORE_POINTER	a0,pointer_8002(a6)            	| [$0a1c: ld   ($8002),hl]
	move.b	#0x03,d0                        	| [$0a1f: ld   a,$03]
	move.b	d0,l_8020(a6)                   	| [$0a21: ld   ($8020),a]
	                   	| [$0a24: ld   ($A181),a]
	move.b	d0,l_824B(a6)                   	| [$0a27: ld   ($824B),a]
l_0a2a:
	move.b	l_824B(a6),d0                   	| [$0a2a: ld   a,($824B)]
	and.b	#0x3F,d0                         	| [$0a2d: and  $3F]
	jne	l_0a2a                             	| [$0a2f: jr   nz,$0A2A]
	lea	l_8295(a6),a0                      	| [$0a31: ld   hl,$8295]
	move.b	#0x08,d1                        	| [$0a34: ld   b,$08]
	move.b	#0x0C,d0                        	| [$0a36: ld   a,$0C]
l_0a38:
	move.b	d0,(a0)                         	| [$0a38: ld   (hl),a]
	addq.w	#1,a0                           	| [$0a39: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0a38                             	| [$0a3a: djnz $0A38]
	move.b	#0x08,d0                        	| [$0a3c: ld   a,$08]
	move.b	#0x03,d1                        	| [$0a3e: ld   b,$03]
l_0a40:
	move.b	d0,(a0)                         	| [$0a40: ld   (hl),a]
	addq.w	#1,a0                           	| [$0a41: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0a40                             	| [$0a42: djnz $0A40]
	CLEAR_XC_FLAGS                         	| [$0a44: xor  a]
	clr.b	d0                               	| [$0a44: xor  a]
	move.b	d0,l_828C(a6)                   	| [$0a45: ld   ($828C),a]
	LOAD_POINTER	pointer_899a(a6),a0             	| [$0a48: ld   hl,($899A)]

	move.b	(a0),d0                         	| [$0a4b: ld   a,(hl)]
	cmp.b	#0x64,d0                         	| [$0a4c: cp   $64]
	jcs	l_0a52                             	| [$0a4e: jr   c,$0A52]
	move.b	#0x64,(a0)                      	| [$0a50: ld   (hl),$64] [uncovered]
l_0a52:
	move.b	l_8021(a6),d0                   	| [$0a52: ld   a,($8021)]
	move.b	d0,l_8020(a6)                   	| [$0a55: ld   ($8020),a]
	move.b	#0x3C,d0                        	| [$0a58: ld   a,$3C]
	move.b	d0,l_824C(a6)                   	| [$0a5a: ld   ($824C),a]
	move.b	#0x01,d0                        	| [$0a5d: ld   a,$01]
	                   	| [$0a5f: ld   ($A181),a]
	lea	l_89F4(a6),a0                      	| [$0a62: ld   hl,$89F4]
	move.b	#0x40,(a0)                      	| [$0a65: ld   (hl),$40]
	addq.w	#1,a0                           	| [$0a67: inc  hl]
	move.b	#0x10,(a0)                      	| [$0a68: ld   (hl),$10]
	LOAD_POINTER	pointer_899c(a6),a0             	| [$0a6a: ld   hl,($899C)]

	move.b	#0x01,(a0)                      	| [$0a6d: ld   (hl),$01]
	jbsr	l_097d                            	| [$0a6f: call $097D]
	jbsr	l_1d6f                            	| [$0a72: call $1D6F]
	jbsr	l_0069                            	| [$0a75: call $0069]
	jra	l_0ab3                             	| [$0a78: jr   $0AB3]

l_0a7a:
	                       	| [$0a7a: ld   sp,$8400]
	move.b	value16_8050(a6),d0                   	| [$0a7d: ld   a,($8050)]
	addq.b	#0x07,d0                        	| [$0a80: add  a,$07]
	cmp.b	#0x0F,d0                         	| [$0a82: cp   $0F]
	bcs.b	0f                               	| [...]
	jbsr	l_100d                            	| [$0a84: call nc,$100D]
0:
	move.b	l_8051(a6),d0                   	| [$0a87: ld   a,($8051)]
	addq.b	#0x07,d0                        	| [$0a8a: add  a,$07]
	cmp.b	#0x0F,d0                         	| [$0a8c: cp   $0F]
	bcs.b	0f                               	| [...]
	jbsr	l_1055                            	| [$0a8e: call nc,$1055]
0:
	move.b	l_824B(a6),d0                   	| [$0a91: ld   a,($824B)]
	cmp.b	#0x04,d0                         	| [$0a94: cp   $04]
	bcs.b	0f                               	| [...]
	jbsr	l_1bcb                            	| [$0a96: call nc,$1BCB]
0:
	move.b	l_8022(a6),d0                   	| [$0a99: ld   a,($8022)]
	                               	| [$0a9c: and  a]
	jeq	l_0ea0                             	| [$0a9d: jp   z,$0EA0]
	subq.b	#1,d0                           	| [$0aa0: dec  a]
	jeq	l_0b24                             	| [$0aa1: jp   z,$0B24]
	subq.b	#1,d0                           	| [$0aa4: dec  a]
	jeq	l_0ea0                             	| [$0aa5: jp   z,$0EA0]
	subq.b	#1,d0                           	| [$0aa8: dec  a]
	jeq	l_1586                             	| [$0aa9: jp   z,$1586]
	subq.b	#1,d0                           	| [$0aac: dec  a]
	jeq	l_0ea0                             	| [$0aad: jp   z,$0EA0]
	jbsr	l_13cf                            	| [$0ab0: call $13CF]
l_0ab3:
	CLEAR_XC_FLAGS                         	| [$0ab3: xor  a]
	clr.b	d0                               	| [$0ab3: xor  a]
	move.b	d0,l_8022(a6)                   	| [$0ab4: ld   ($8022),a]
	jra	l_0a7a                             	| [$0ab7: jp   $0A7A]

l_0aba:
	lea	l_8068(a6),a2                      	| [$0aba: ld   ix,$8068]
	CLEAR_XC_FLAGS                         	| [$0abe: xor  a]
	clr.b	d0                               	| [$0abe: xor  a]
	move.b	d0,l_8023(a6)                   	| [$0abf: ld   ($8023),a]
	lea	l_8048(a6),a0                      	| [$0ac2: ld   hl,$8048]
	move.b	#0x18,d1                        	| [$0ac5: ld   b,$18]
l_0ac7:
	move.b	d0,(a0)                         	| [$0ac7: ld   (hl),a]
	addq.w	#1,a0                           	| [$0ac8: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_0ac7                             	| [$0ac9: djnz $0AC7]
	                   	| [$0acb: ld   ($A181),a]
	move.b	d0,l_8250(a6)                   	| [$0ace: ld   ($8250),a]
	move.b	d0,(0x00,a2)                    	| [$0ad1: ld   (ix+$00),a]
	move.b	d0,(0x01,a2)                    	| [$0ad4: ld   (ix+$01),a]
	move.b	d0,(0x02,a2)                    	| [$0ad7: ld   (ix+$02),a]
	move.b	d0,(0x03,a2)                    	| [$0ada: ld   (ix+$03),a]
	move.b	d0,(0x04,a2)                    	| [$0add: ld   (ix+$04),a]
	move.b	d0,(0x05,a2)                    	| [$0ae0: ld   (ix+$05),a]
	move.b	d0,(0x06,a2)                    	| [$0ae3: ld   (ix+$06),a]
	move.b	d0,(0x07,a2)                    	| [$0ae6: ld   (ix+$07),a]
	move.b	#0x0F,(0x08,a2)                 	| [$0ae9: ld   (ix+$08),$0F]
	move.b	#0x32,(0x0a,a2)                 	| [$0aed: ld   (ix+$0a),$32]
	move.b	d0,(0x0b,a2)                    	| [$0af1: ld   (ix+$0b),a]
	move.b	#0x70,(0x0c,a2)                 	| [$0af4: ld   (ix+$0c),$70]
	move.b	#0x74,(0x0e,a2)                 	| [$0af8: ld   (ix+$0e),$74]
	move.b	#0xF0,(0x0f,a2)                 	| [$0afc: ld   (ix+$0f),$F0]
	move.b	#0x01,(0x10,a2)                 	| [$0b00: ld   (ix+$10),$01]
	move.b	d0,(0x13,a2)                    	| [$0b04: ld   (ix+$13),a]
	rts                                    	| [$0b07: ret]

l_0b08:
	move.b	l_8021(a6),d0                   	| [$0b08: ld   a,($8021)]
	                               	| [$0b0b: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0b0c: ret  nz] [...]
0:
	movem.w	d3/d4,-(sp)                    	| [$0b0d: push de]
	move.l	a1,-(sp)                        	| [$0b0d: push de]
	addq.w	#1,a1                           	| [$0b0e: inc  de]
	move.b	(a1),d0                         	| [$0b0f: ld   a,(de)]
	                               	| [$0b10: and  a]
	move.l	(sp)+,a1                        	| [$0b11: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$0b11: pop  de]
	bne.b	0f                               	| [...]
	rts                                    	| [$0b12: ret  z] [...]
0:
	movem.w	d1/d2,-(sp)                    	| [$0b13: push bc] [uncovered]
	move.l	a4,-(sp)                        	| [$0b13: push bc] [uncovered]
	move.w	#0x0008,d1                      	| [$0b14: ld   bc,$0008] [uncovered]
	add.w	d1,a0                            	| [$0b17: add  hl,bc] [uncovered]
	exg	a1,a0                              	| [$0b18: ex   de,hl] [uncovered]
	move.b	#0x20,d2                        	| [$0b19: ld   c,$20] [uncovered]
	add.w	d1,a0                            	| [$0b1b: add  hl,bc] [uncovered]
	exg	a1,a0                              	| [$0b1c: ex   de,hl] [uncovered]
	move.l	(sp)+,a4                        	| [$0b1d: pop  bc] [uncovered]
	movem.w	(sp)+,d1/d2                    	| [$0b1d: pop  bc] [uncovered]
	BREAKPOINT	"service mode?"
*	exg	(sp),a0                            	| [$0b1e: ex   (sp),hl] [uncovered]
*	addq.w	#3,a0                           	| [$0b1f: inc  hl] [uncovered] * 3
*	exg	(sp),a0                            	| [$0b22: ex   (sp),hl] [uncovered]
	rts                                    	| [$0b23: ret] [uncovered]

l_0b24:
	lea	enemy_car_structs_8088(a6),a2      	| [$0b24: ld   ix,enemy_car_structs_8088]
	lea	l_8068(a6),a3                      	| [$0b28: ld   iy,$8068]
	move.b	nb_enemy_cars_824e(a6),d0       	| [$0b2c: ld   a,(nb_enemy_cars_824e)]
	move.b	d0,d1                           	| [$0b2f: ld   b,a]
	tst.b	d0                               	| [$0b30: and  a]
	jeq	l_0c91                             	| [$0b31: jp   z,$0C91]
l_0b34:
	move.b	(0x00,a2),d0                    	| [$0b34: ld   a,(ix+$00)]
	                               	| [$0b37: and  a]
	jne	l_0c88                             	| [$0b38: jp   nz,$0C88]
	CLEAR_XC_FLAGS                         	| [$0b3b: xor  a]
	clr.b	d0                               	| [$0b3b: xor  a]
	move.b	d0,l_81B5(a6)                   	| [$0b3c: ld   ($81B5),a]
	move.b	(0x13,a2),d0                    	| [$0b3f: ld   a,(ix+$13)]
	subq.b	#1,(0x13,a2)                    	| [$0b42: dec  (ix+$13)]
	tst.b	d0                               	| [$0b45: and  a]
	jne	l_0c4f                             	| [$0b46: jp   nz,$0C4F]
	move.b	d0,(0x13,a2)                    	| [$0b49: ld   (ix+$13),a]
	move.b	(0x08,a3),d0                    	| [$0b4c: ld   a,(iy+$08)]
	sub.b	(0x08,a2),d0                     	| [$0b4f: sub  (ix+$08)]
	scs		d7
	move.b	d0,d3                           	| [$0b52: ld   d,a]
	tst.b	d7
	jeq	l_0b57                             	| [$0b53: jr   nc,$0B57]
	neg.b	d0                               	| [$0b55: neg]
l_0b57:
	move.b	d0,d4                           	| [$0b57: ld   e,a]
	move.b	(0x0a,a2),d0                    	| [$0b58: ld   a,(ix+$0a)]
	sub.b	(0x0a,a3),d0                     	| [$0b5b: sub  (iy+$0a)]
	scs		d7
	move.b	d0,d5                           	| [$0b5e: ld   h,a]
	tst.b	d7
	jeq	l_0b63                             	| [$0b5f: jr   nc,$0B63]
	neg.b	d0                               	| [$0b61: neg]
l_0b63:
	move.b	d0,d6                           	| [$0b63: ld   l,a]
	move.b	d6,d0                           	| [$0b64: ld   a,l]
	cmp.b	#0x07,d0                         	| [$0b65: cp   $07]
	jcc	l_0b9c                             	| [$0b67: jr   nc,$0B9C]
	move.b	d4,d0                           	| [$0b69: ld   a,e]
	cmp.b	#0x07,d0                         	| [$0b6a: cp   $07]
	jcc	l_0b9c                             	| [$0b6c: jr   nc,$0B9C]
	move.b	d6,d0                           	| [$0b6e: ld   a,l]
	or.b	d4,d0                             	| [$0b6f: or   e]
	bne.b	0f                               	| [...]
	jbsr	l_0c98                            	| [$0b70: call z,$0C98]
0:
	jbsr	exx                               	| [$0b73: exx]
	BREAKPOINT	"value of A0???"
	move.b	(0x0c,a2),d1                    	| [$0b74: ld   b,(ix+$0c)]
	move.b	(0x0e,a2),d2                    	| [$0b77: ld   c,(ix+$0e)]
	jbsr	l_0e7f                            	| [$0b7a: call $0E7F]
	move.b	(a0),d0                         	| [$0b7d: ld   a,(hl)]
	jbsr	exx                               	| [$0b7e: exx]
	cmp.b	#0xBD,d0                         	| [$0b7f: cp   $BD]
	jcs	l_0b93                             	| [$0b81: jr   c,$0B93]
	cmp.b	#0xC6,d0                         	| [$0b83: cp   $C6]
	jcc	l_0b93                             	| [$0b85: jr   nc,$0B93]
	move.b	#0x88,(0x00,a2)                 	| [$0b87: ld   (ix+$00),$88]
	move.b	#0x01,(0x15,a2)                 	| [$0b8b: ld   (ix+$15),$01]
	move.b	#0x82,(0x13,a2)                 	| [$0b8f: ld   (ix+$13),$82]
l_0b93:
	move.b	#0x01,d2                        	| [$0b93: ld   c,$01]
	move.b	d1,d0                           	| [$0b95: ld   a,b]
	and.b	#0x03,d0                         	| [$0b96: and  $03]
	jeq	l_0ba6                             	| [$0b98: jr   z,$0BA6]
	jra	l_0bda                             	| [$0b9a: jr   $0BDA]

l_0b9c:
	move.b	d1,d0                           	| [$0b9c: ld   a,b]
	move.b	d0,l_81B5(a6)                   	| [$0b9d: ld   ($81B5),a]
	btst.b	#0,d0                           	| [$0ba0: bit  0,a]
	jeq	l_0bda                             	| [$0ba2: jr   z,$0BDA]
	move.b	#0x03,d2                        	| [$0ba4: ld   c,$03]
l_0ba6:
	move.b	(0x03,a3),d0                    	| [$0ba6: ld   a,(iy+$03)]
	                               	| [$0ba9: and  a]
	jne	l_0bc4                             	| [$0baa: jr   nz,$0BC4]
	btst.b	#7,(0x02,a3)                    	| [$0bac: bit  7,(iy+$02)]
	jeq	l_0bb5                             	| [$0bb0: jr   z,$0BB5]
	move.b	d2,d0                           	| [$0bb2: ld   a,c]
	jra	l_0bb7                             	| [$0bb3: jr   $0BB7]

l_0bb5:
	CLEAR_XC_FLAGS                         	| [$0bb5: xor  a]
	clr.b	d0                               	| [$0bb5: xor  a]
	sub.b	d2,d0                            	| [$0bb6: sub  c]
l_0bb7:
	add.b	d5,d0                            	| [$0bb7: add  a,h]
	move.b	d0,d5                           	| [$0bb8: ld   h,a]
	move.b	d5,d6                           	| [$0bbb: ld   l,h]
	btst.b	#7,d5                           	| [$0bb9: bit  7,h]
	jeq	l_0bda                             	| [$0bbc: jr   z,$0BDA]
	move.b	d6,d0                           	| [$0bbe: ld   a,l]
	neg.b	d0                               	| [$0bbf: neg]
	move.b	d0,d6                           	| [$0bc1: ld   l,a]
	jra	l_0bda                             	| [$0bc2: jr   $0BDA]

l_0bc4:
	btst.b	#7,(0x02,a3)                    	| [$0bc4: bit  7,(iy+$02)]
	jeq	l_0bce                             	| [$0bc8: jr   z,$0BCE]
	CLEAR_XC_FLAGS                         	| [$0bca: xor  a]
	clr.b	d0                               	| [$0bca: xor  a]
	sub.b	d2,d0                            	| [$0bcb: sub  c]
	jra	l_0bcf                             	| [$0bcc: jr   $0BCF]

l_0bce:
	move.b	d2,d0                           	| [$0bce: ld   a,c]
l_0bcf:
	add.b	d3,d0                            	| [$0bcf: add  a,d]
	move.b	d0,d3                           	| [$0bd0: ld   d,a]
	move.b	d3,d4                           	| [$0bd3: ld   e,d]
	btst.b	#7,d3                           	| [$0bd1: bit  7,d]
	jeq	l_0bda                             	| [$0bd4: jr   z,$0BDA]
	move.b	d3,d0                           	| [$0bd6: ld   a,d]
	neg.b	d0                               	| [$0bd7: neg]
	move.b	d0,d4                           	| [$0bd9: ld   e,a]
l_0bda:
	move.b	(0x05,a2),d0                    	| [$0bda: ld   a,(ix+$05)]
	addq.b	#0x03,d0                        	| [$0bdd: add  a,$03]
	cmp.b	#0x07,d0                         	| [$0bdf: cp   $07]
	jcc	l_0c4f                             	| [$0be1: jp   nc,$0C4F]
	move.b	(0x07,a2),d0                    	| [$0be4: ld   a,(ix+$07)]
	addq.b	#0x03,d0                        	| [$0be7: add  a,$03]
	cmp.b	#0x07,d0                         	| [$0be9: cp   $07]
	jcc	l_0c4f                             	| [$0beb: jp   nc,$0C4F]
	move.b	d6,d0                           	| [$0bee: ld   a,l]
	cmp.b	d4,d0                            	| [$0bef: cp   e]
	jcc	l_0bf7                             	| [$0bf0: jr   nc,$0BF7]
	move.b	d5,d2                           	| [$0bf2: ld   c,h]
	st.b	d0                                	| [$0bf3: ld   a,$FF]
	jra	l_0bfa                             	| [$0bf5: jr   $0BFA]

l_0bf7:
	move.b	d3,d2                           	| [$0bf7: ld   c,d]
	move.b	d5,d3                           	| [$0bf8: ld   d,h]
	                         	| [$0bf9: xor  a]
	clr.b	d0                               	| [$0bf9: xor  a]
l_0bfa:
	move.w	d0,-(sp)                        	| [$0bfa: push af]
	                               	| [$0bfe: and  a]
	LOAD_WORD	value16_8025(a6),d5             	| [$0bff: ld   hl,($8025)]

	move.b	l_81B5(a6),d0                   	| [$0bfb: ld   a,($81B5)]
	jeq	l_0c07                             	| [$0c02: jr   z,$0C07]
	LOAD_WORD	value16_8029(a6),d5             	| [$0c04: ld   hl,($8029)]

l_0c07:
	LOAD_D5D6_FROM_D5_16
	move.w	(sp)+,d0                        	| [$0c07: pop  af]
	btst.b	#7,d3                           	| [$0c08: bit  7,d]
	beq.b	0f                               	| [...]
	jbsr	l_1e11                            	| [$0c0a: call nz,$1E11]
0:
	move.b	#0x02,(0x14,a2)                 	| [$0c0d: ld   (ix+$14),$02]
	move.b	d0,d4                           	| [$0c11: ld   e,a]
	cmp.b	(0x03,a2),d0                     	| [$0c12: cp   (ix+$03)]
	jne	l_0c24                             	| [$0c15: jr   nz,$0C24]
	move.b	(0x02,a2),d0                    	| [$0c17: ld   a,(ix+$02)]
	eor.b	d5,d0                            	| [$0c1a: xor  h]
	move.b	d4,d0                           	| [$0c1d: ld   a,e]
	btst.b	#7,d0                           	| [$0c1b: bit  7,a]
	jne	l_0c29                             	| [$0c1e: jr   nz,$0C29]
	clr.b	(0x14,a2)                        	| [$0c20: ld   (ix+$14),$00]
l_0c24:
	jbsr	l_0cb1                            	| [$0c24: call $0CB1]
	jcc	l_0c7f                             	| [$0c27: jr   nc,$0C7F]
l_0c29:
	not.b	d0                               	| [$0c29: cpl]
	move.w	d0,-(sp)                        	| [$0c2a: push af]
	move.b	d2,d0                           	| [$0c2b: ld   a,c]
	eor.b	d5,d0                            	| [$0c2c: xor  h]
	btst.b	#7,d0                           	| [$0c2d: bit  7,a]
	beq.b	0f                               	| [...]
	jbsr	l_1e11                            	| [$0c2f: call nz,$1E11]
0:
	move.w	(sp)+,d0                        	| [$0c32: pop  af]
	move.b	#0x02,(0x14,a2)                 	| [$0c33: ld   (ix+$14),$02]
	cmp.b	(0x03,a2),d0                     	| [$0c37: cp   (ix+$03)]
	jne	l_0c4a                             	| [$0c3a: jr   nz,$0C4A]
	clr.b	(0x14,a2)                        	| [$0c3c: ld   (ix+$14),$00]
	move.b	d0,d4                           	| [$0c40: ld   e,a]
	move.b	(0x02,a2),d0                    	| [$0c41: ld   a,(ix+$02)]
	eor.b	d5,d0                            	| [$0c44: xor  h]
	btst.b	#7,d0                           	| [$0c45: bit  7,a]
	jne	l_0c4f                             	| [$0c47: jr   nz,$0C4F]
	move.b	d4,d0                           	| [$0c49: ld   a,e]
l_0c4a:
	jbsr	l_0cb1                            	| [$0c4a: call $0CB1]
	jcc	l_0c7f                             	| [$0c4d: jr   nc,$0C7F]
l_0c4f:
	LOAD_WORD	value16_8025(a6),d5             	| [$0c4f: ld   hl,($8025)]

	move.b	l_81B5(a6),d0                   	| [$0c52: ld   a,($81B5)]
	                               	| [$0c55: and  a]
	jeq	l_0c5b                             	| [$0c56: jr   z,$0C5B]
	LOAD_WORD	value16_8029(a6),d5             	| [$0c58: ld   hl,($8029)]

l_0c5b:
	LOAD_D5D6_FROM_D5_16
	move.b	(0x02,a2),d0                    	| [$0c5b: ld   a,(ix+$02)]
	eor.b	d5,d0                            	| [$0c5e: xor  h]
	btst.b	#7,d0                           	| [$0c5f: bit  7,a]
	beq.b	0f                               	| [...]
	jbsr	l_1e11                            	| [$0c61: call nz,$1E11]
0:
	move.b	(0x03,a2),d0                    	| [$0c64: ld   a,(ix+$03)]
	jbsr	l_0cb1                            	| [$0c67: call $0CB1]
	jcc	l_0c7f                             	| [$0c6a: jr   nc,$0C7F]
	move.b	#0x02,(0x14,a2)                 	| [$0c6c: ld   (ix+$14),$02]
	not.b	d0                               	| [$0c70: cpl]
	jbsr	l_0cb1                            	| [$0c71: call $0CB1]
	jcc	l_0c7f                             	| [$0c74: jr   nc,$0C7F]
	jbsr	l_1e11                            	| [$0c76: call $1E11]
	jbsr	l_0cb1                            	| [$0c79: call $0CB1]
	jcc	l_0c7f                             	| [$0c7c: jr   nc,$0C7F]
	not.b	d0                               	| [$0c7e: cpl]
l_0c7f:
	move.b	d0,(0x03,a2)                    	| [$0c7f: ld   (ix+$03),a]
	move.b	d5,(0x02,a2)                    	| [$0c82: ld   (ix+$02),h]
	move.b	d6,(0x01,a2)                    	| [$0c85: ld   (ix+$01),l]
l_0c88:
	move.w	#0x0020,d3                      	| [$0c88: ld   de,$0020]
	add.w	d3,a2                            	| [$0c8b: add  ix,de]
	subq.b	#1,d1                           	| [$0c8d: dec  b]
	jne	l_0b34                             	| [$0c8e: jp   nz,$0B34]
l_0c91:
	lea	l_8022(a6),a0                      	| [$0c91: ld   hl,$8022]
	addq.b	#1,(a0)                         	| [$0c94: inc  (hl)]
	jra	l_0a7a                             	| [$0c95: jp   $0A7A]

* < D5.W
* > carry
l_0cb1:
	movem.w	d1/d2,-(sp)                    	| [$0cb1: push bc]
	move.b	d0,d2                           	| [$0cb2: ld   c,a]

	move.w	d5,-(sp)                        	| [$0cb3: push hl]
	exg	d3,d5                              	| [$0cb4: ex   de,hl]
	LOAD_D3D4_FROM_D3_16
	move.b	(0x08,a2),d5                    	| [$0cb5: ld   h,(ix+$08)]
	move.b	(0x0a,a2),d6                    	| [$0cb8: ld   l,(ix+$0a)]
	clr.b	d1                               	| [$0cbb: ld   b,$00]
	clr.b	d4                               	| [$0cbd: ld   e,$00]
	move.b	d2,d0                           	| [$0cbf: ld   a,c]
	                               	| [$0cc0: and  a]
	jne	l_0d03                             	| [$0cc1: jr   nz,$0D03]
	move.b	(0x05,a2),d0                    	| [$0cc3: ld   a,(ix+$05)]
	add.b	#0x18,d0                         	| [$0cc6: add  a,$18]
	cmp.b	#0x2B,d0                         	| [$0cc8: cp   $2B]
	jcc	l_0ce8                             	| [$0cca: jr   nc,$0CE8]
	cmp.b	#0x06,d0                         	| [$0ccc: cp   $06]
	jcs	l_0ce5                             	| [$0cce: jr   c,$0CE5]
	cmp.b	#0x1E,d0                         	| [$0cd0: cp   $1E]
	jcc	l_0cd8                             	| [$0cd2: jr   nc,$0CD8]
	cmp.b	#0x13,d0                         	| [$0cd4: cp   $13]
	jcc	l_0ce9                             	| [$0cd6: jr   nc,$0CE9]
l_0cd8:
	move.b	l_805B(a6),d0                   	| [$0cd8: ld   a,($805B)]
	                               	| [$0cdb: and  a]
	jeq	l_0d5a                             	| [$0cdc: jp   z,$0D5A]
	addq.b	#1,d0                           	| [$0cdf: inc  a]
	jeq	l_0d5a                             	| [$0ce0: jp   z,$0D5A]
	jra	l_0ce9                             	| [$0ce3: jr   $0CE9] [uncovered]

l_0ce5:
	subq.b	#1,d5                           	| [$0ce5: dec  h]
	jra	l_0ce9                             	| [$0ce6: jr   $0CE9]

l_0ce8:
	addq.b	#1,d5                           	| [$0ce8: inc  h]
l_0ce9:
	btst.b	#7,d3                           	| [$0ce9: bit  7,d]
	jne	l_0cf8                             	| [$0ceb: jr   nz,$0CF8]
	move.b	(0x07,a2),d0                    	| [$0ced: ld   a,(ix+$07)]
	subq.b	#1,d4                           	| [$0cf0: dec  e]
	tst.b	d0                               	| [$0cf1: and  a]
	jmi	l_0d3c                             	| [$0cf2: jp   m,$0D3C]
	subq.b	#1,d6                           	| [$0cf5: dec  l]
	jra	l_0d3c                             	| [$0cf6: jr   $0D3C]

l_0cf8:
	move.b	(0x07,a2),d0                    	| [$0cf8: ld   a,(ix+$07)]
	addq.b	#1,d4                           	| [$0cfb: inc  e]
	subq.b	#1,d0                           	| [$0cfc: dec  a]
	jpl	l_0d3c                             	| [$0cfd: jp   p,$0D3C]
	addq.b	#1,d6                           	| [$0d00: inc  l]
	jra	l_0d3c                             	| [$0d01: jr   $0D3C]

l_0d03:
	move.b	(0x07,a2),d0                    	| [$0d03: ld   a,(ix+$07)]
	add.b	#0x18,d0                         	| [$0d06: add  a,$18]
	cmp.b	#0x2B,d0                         	| [$0d08: cp   $2B]
	jcc	l_0d26                             	| [$0d0a: jr   nc,$0D26]
	cmp.b	#0x06,d0                         	| [$0d0c: cp   $06]
	jcs	l_0d23                             	| [$0d0e: jr   c,$0D23]
	cmp.b	#0x1E,d0                         	| [$0d10: cp   $1E]
	jcc	l_0d18                             	| [$0d12: jr   nc,$0D18]
	cmp.b	#0x13,d0                         	| [$0d14: cp   $13]
	jcc	l_0d27                             	| [$0d16: jr   nc,$0D27]
l_0d18:
	move.b	l_805B(a6),d0                   	| [$0d18: ld   a,($805B)]
	                               	| [$0d1b: and  a]
	jeq	l_0d5a                             	| [$0d1c: jr   z,$0D5A]
	addq.b	#1,d0                           	| [$0d1e: inc  a]
	jeq	l_0d5a                             	| [$0d1f: jr   z,$0D5A]
	jra	l_0d27                             	| [$0d21: jr   $0D27] [uncovered]

l_0d23:
	addq.b	#1,d6                           	| [$0d23: inc  l]
	jra	l_0d27                             	| [$0d24: jr   $0D27]

l_0d26:
	subq.b	#1,d6                           	| [$0d26: dec  l]
l_0d27:
	move.b	(0x05,a2),d0                    	| [$0d27: ld   a,(ix+$05)]
	btst.b	#7,d3                           	| [$0d2a: bit  7,d]
	jne	l_0d36                             	| [$0d2c: jr   nz,$0D36]
	addq.b	#1,d1                           	| [$0d2e: inc  b]
	tst.b	d0                               	| [$0d2f: and  a]
	jmi	l_0d3c                             	| [$0d30: jp   m,$0D3C]
	addq.b	#1,d5                           	| [$0d33: inc  h]
	jra	l_0d3c                             	| [$0d34: jr   $0D3C]

l_0d36:
	subq.b	#1,d1                           	| [$0d36: dec  b]
	subq.b	#1,d0                           	| [$0d37: dec  a]
	jpl	l_0d3c                             	| [$0d38: jp   p,$0D3C]
	subq.b	#1,d5                           	| [$0d3b: dec  h]
l_0d3c:
	LOAD_D5_16_FROM_D5D6
	exg	d3,d5                              	| [$0d3c: ex   de,hl]
	LOAD_D3D4_FROM_D3_16
	jbsr	l_12f2                            	| [$0d3d: call $12F2]
	scs		d7                              	| [$0d40: ex   af,af'] save carry
	move.b	d3,d0                           	| [$0d41: ld   a,d]
	add.b	d1,d0                            	| [$0d42: add  a,b]
	move.b	d0,d3                           	| [$0d43: ld   d,a]
	move.b	d4,d0                           	| [$0d44: ld   a,e]
	add.b	d6,d0                            	| [$0d45: add  a,l]
	move.b	d0,d4                           	| [$0d46: ld   e,a]
	jbsr	l_12f2                            	| [$0d47: call $12F2]
	jcs	l_0d55                             	| [$0d4a: jr   c,$0D55]
	move.b	d3,d0                           	| [$0d4c: ld   a,d]
	add.b	d1,d0                            	| [$0d4d: add  a,b]
	move.b	d0,d3                           	| [$0d4e: ld   d,a]
	move.b	d4,d0                           	| [$0d4f: ld   a,e]
	add.b	d6,d0                            	| [$0d50: add  a,l]
	move.b	d0,d4                           	| [$0d51: ld   e,a]
	jbsr	l_12f2                            	| [$0d52: call $12F2]
l_0d55:
	tst.b	d7                              	| [$0d55: ex   af,af']
	jne		l_0d5a
	CLEAR_XC_FLAGS
	move.w	(sp)+,d5                        	| [$0d56: pop  hl]
	move.b	d2,d0                           	| [$0d57: ld   a,c]
	movem.w	(sp)+,d1/d2                    	| [$0d58: pop  bc]
	rts                                    	| [$0d59: ret]

l_0d5a:
	move.w	(sp)+,d5                        	| [$0d5a: pop  hl]
	move.b	d2,d0                           	| [$0d5b: ld   a,c]
	movem.w	(sp)+,d1/d2                    	| [$0d5c: pop  bc]
	SET_XC_FLAGS                           	| [$0d5d: scf]
	rts                                    	| [$0d5e: ret]

* < d5.W
decrease_and_wrap_d5w_0d5f:
	subq.w	#1,d5                           	| [$0d5f: dec  hl]
	move.b	d5,d0                           	| [$0d60: ld   a,l]
	or.b	#0xE0,d0                          	| [$0d61: or   $E0]
	addq.b	#1,d0                           	| [$0d63: inc  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$0d64: ret  nz] [...]
0:
	move.w	#0x9F00,d5                      	| [$0d65: ld   hl,$9F00]
	rts                                    	| [$0d68: ret]

* <D5.W
increase_and_wrap_d5w_0d69:
	addq.w	#1,d5                           	| [$0d69: inc  hl]
	move.b	d5,d0                           	| [$0d6a: ld   a,l]
	and.b	#0x1F,d0                         	| [$0d6b: and  $1F]
	beq.b	0f                               	| [...]
	rts                                    	| [$0d6d: ret  nz] [...]
0:
	move.w	#0x9F00,d5                      	| [$0d6e: ld   hl,$9F00] [uncovered]
	rts                                    	| [$0d71: ret] [uncovered]

l_0d72:

	move.l	a0,-(sp)                        	| [$0d72: push hl]
	movem.w	d3/d4,-(sp)                    	| [$0d73: push de]
	move.l	a1,-(sp)                        	| [$0d73: push de]
	move.w	d0,-(sp)                        	| [$0d74: push af]
	LOAD_WORD	timer_8000(a6),d5             	| [$0d75: ld   hl,($8000)]

	add.w	d5,d5                            	| [$0d78: add  hl,hl]
	jcc	l_0d7c                             	| [$0d79: jr   nc,$0D7C]
	addq.w	#1,d5                           	| [$0d7b: inc  l]
l_0d7c:
	move.b	d5,d0                           	| [$0d7c: ld   a,l]
	and.b	#0x49,d0                         	| [$0d7d: and  $49]
	jne	l_0d85                             	| [$0d7f: jr   nz,$0D85]
	move.w	#0x4080,d3                      	| [$0d81: ld   de,$4080]
	add.w	d3,d5                            	| [$0d84: add  hl,de]
l_0d85:
	STORE_WORD	d5,timer_8000(a6)            	| [$0d85: ld   ($8000),hl]
	move.w	(sp)+,d0                        	| [$0d88: pop  af]
	move.l	(sp)+,a1                        	| [$0d89: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$0d89: pop  de]
	move.l	(sp)+,a0                        	| [$0d8a: pop  hl]
	rts                                    	| [$0d8b: ret]

l_0d8c:
	move.b	d0,d3                           	| [$0d8c: ld   d,a]
	move.b	#0x09,d4                        	| [$0d8d: ld   e,$09]
	addq.w	#1,a0                           	| [$0d8f: inc  hl]
l_0d90:
	btst.b	#7,d0                           	| [$0d90: bit  7,a]
	jeq	l_0d97                             	| [$0d92: jr   z,$0D97]
	                           	| [$0d94: dec  hl]
	addq.b	#1,(1,a0)                         	| [$0d95: inc  (hl)]
	                           	| [$0d96: inc  hl]
l_0d97:
	add.b	(a0),d0                          	| [$0d97: add  a,(hl)]
	scs		d7
	move.b	d0,(a0)                         	| [$0d98: ld   (hl),a]
	tst.b	d7
	jeq	l_0d9e                             	| [$0d99: jr   nc,$0D9E]
	                           	| [$0d9b: dec  hl]
	addq.b	#1,(-1,a0)                         	| [$0d9c: inc  (hl)]
	                           	| [$0d9d: inc  hl]
l_0d9e:
	                           	| [$0d9e: ld   a,l]
	add.w	#0x20,a0                         	| [$0d9f: add  a,$20]
	                          	| [$0da1: jr   nc,$0DA4]
	                           	| [$0da3: inc  h]
	                           	| [$0da4: ld   l,a]
	move.b	d3,d0                           	| [$0da5: ld   a,d]
	subq.b	#1,d4                           	| [$0da6: dec  e]
	jne	l_0d90                             	| [$0da7: jr   nz,$0D90]
	rts                                    	| [$0da9: ret]

l_0db2:

	move.l	a0,-(sp)                        	| [$0db2: push hl]
	movem.w	d3/d4,-(sp)                    	| [$0db3: push de]
	move.l	a1,-(sp)                        	| [$0db3: push de]
	movem.w	d1/d2,-(sp)                    	| [$0db4: push bc]
	move.l	a4,-(sp)                        	| [$0db4: push bc]
	LOAD_POINTER	pointer_899e(a6),a0             	| [$0db5: ld   hl,($899E)]

	move.b	(a0),d0                         	| [$0db8: ld   a,(hl)]
	lea	l_8290(a6),a0                      	| [$0db9: ld   hl,$8290]
	CLEAR_XC_FLAGS
	roxr.b	#2,d0                            	| [$0dbc: rrca] * 2
	move.b	(a0),d0
	roxl.b	#1,d0                         	| [$0dbe: rl   (hl)]
	move.b	d0,(a0)+
	                         	| [$0dc0: ld   a,(hl)]
	and.b	#0x0F,d0                         	| [$0dc1: and  $0F]
	cmp.b	#0x0C,d0                         	| [$0dc3: cp   $0C]
										| [$0dc5: inc  hl]
	jne	l_0df4                             	| [$0dc6: jr   nz,$0DF4]
	move.b	(a0),d0                         	| [$0dc8: ld   a,(hl)]
	                               	| [$0dc9: and  a]
	jne	l_0df4                             	| [$0dca: jr   nz,$0DF4]
	LOAD_POINTER	pointer_898a(a6),a1             	| [$0dcc: ld   de,($898A)]

	move.b	(a1),d0                         	| [$0dd0: ld   a,(de)]
	and.b	#0x03,d0                         	| [$0dd1: and  $03]
	jeq	l_0df4                             	| [$0dd3: jr   z,$0DF4]
	move.b	l_8021(a6),d0                   	| [$0dd5: ld   a,($8021)]
	                               	| [$0dd8: and  a]
	jeq	l_0df4                             	| [$0dd9: jr   z,$0DF4]
	LOAD_POINTER	pointer_898e(a6),a1             	| [$0ddb: ld   de,($898E)]

	addq.w	#1,a1                           	| [$0ddf: inc  de]
	move.b	(a1),d0                         	| [$0de0: ld   a,(de)]
	                               	| [$0de1: and  a]
	jeq	l_0df4                             	| [$0de2: jr   z,$0DF4]
	move.b	#0x03,d1                        	| [$0de4: ld   b,$03]
l_0de6:
	subq.b	#1,d0                           	| [$0de6: dec  a]
	jeq	l_0df4                             	| [$0de7: jr   z,$0DF4]
	cmp.b	#0x0A,d0                         	| [$0de9: cp   $0A]
	bne.b	0f                               	| [...]
	jbsr	l_0daa                            	| [$0deb: call z,$0DAA]
0:
	subq.b	#1,d1                           	| [...]
	jne	l_0de6                             	| [$0dee: djnz $0DE6]
	move.b	d0,(a1)                         	| [$0df0: ld   (de),a]
	addq.b	#3,(a0)                         	| [$0df1: inc  (hl)] * 3
l_0df4:
	move.b	(a0),d0                         	| [$0df4: ld   a,(hl)]
	                               	| [$0df5: and  a]
	jeq	l_0e59                             	| [$0df6: jr   z,$0E59]
	lea	l_8068(a6),a2                      	| [$0df8: ld   ix,$8068]
	move.b	(0x0f,a2),d0                    	| [$0dfc: ld   a,(ix+$0f)]
	move.b	#0x08,d1                        	| [$0dff: ld   b,$08]
	move.b	#0xF0,d2                        	| [$0e01: ld   c,$F0]
	cmp.b	#0xF0,d0                         	| [$0e03: cp   $F0]
	jeq	l_0e1b                             	| [$0e05: jr   z,$0E1B]
	move.b	#0x18,d2                        	| [$0e07: ld   c,$18]
	cmp.b	#0xF2,d0                         	| [$0e09: cp   $F2]
	jeq	l_0e1b                             	| [$0e0b: jr   z,$0E1B]
	move.b	#0x08,d2                        	| [$0e0d: ld   c,$08]
	move.b	#0x20,d1                        	| [$0e0f: ld   b,$20]
	cmp.b	#0xFC,d0                         	| [$0e11: cp   $FC]
	jeq	l_0e1b                             	| [$0e13: jr   z,$0E1B]
	move.b	#0xF0,d1                        	| [$0e15: ld   b,$F0]
	cmp.b	#0xFD,d0                         	| [$0e17: cp   $FD]
	jne	l_0e59                             	| [$0e19: jr   nz,$0E59]
l_0e1b:
	move.b	(0x0c,a2),d0                    	| [$0e1b: ld   a,(ix+$0c)]
	sub.b	d1,d0                            	| [$0e1e: sub  b]
	move.b	d0,d1                           	| [$0e1f: ld   b,a]
	move.b	(0x0e,a2),d0                    	| [$0e20: ld   a,(ix+$0e)]
	add.b	d2,d0                            	| [$0e23: add  a,c]
	move.b	d0,d2                           	| [$0e24: ld   c,a]
	jbsr	l_0e7f                            	| [$0e25: call $0E7F]
	move.b	d5,d3                           	| [$0e28: ld   d,h]
	move.b	d6,d4                           	| [$0e29: ld   e,l]
	bset.b	#3,d5                           	| [$0e2a: set  3,h]
	LOAD_A0_FROM_D5D6
	LOAD_A1_FROM_D3D4
	btst.b	#7,(a0)                         	| [$0e2c: bit  7,(hl)]
	jeq	l_0e59                             	| [$0e2e: jr   z,$0E59]
	move.b	(a1),d0                         	| [$0e30: ld   a,(de)]
	cmp.b	#0x81,d0                         	| [$0e31: cp   $81]
	jne	l_0e59                             	| [$0e33: jr   nz,$0E59]
	bclr.b	#7,(a0)                         	| [$0e35: res  7,(hl)]
	move.b	#0x03,d1                        	| [$0e37: ld   b,$03]
	move.b	#0xBD,d0                        	| [$0e39: ld   a,$BD]
l_0e3b:
	move.b	#0x03,d2                        	| [$0e3b: ld   c,$03]

	move.l	a0,-(sp)                        	| [$0e3d: push hl]
	movem.w	d3/d4,-(sp)                    	| [$0e3e: push de]
	move.l	a1,-(sp)                        	| [$0e3e: push de]
l_0e3f:
	move.b	d0,(a1)                         	| [$0e3f: ld   (de),a]
	addq.b	#1,d0                           	| [$0e40: inc  a]
	move.b	#0x45,(a0)                      	| [$0e41: ld   (hl),$45]
	jbsr	advance_hl_and_de_0e5d                            	| [$0e43: call $0E5D]
	subq.b	#1,d2                           	| [$0e46: dec  c]
	jne	l_0e3f                             	| [$0e47: jr   nz,$0E3F]
	move.l	(sp)+,a1                        	| [$0e49: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$0e49: pop  de]
	move.l	(sp)+,a0                        	| [$0e4a: pop  hl]
	jbsr	advance_hl_and_de_0e6c                            	| [$0e4b: call $0E6C]
	subq.b	#1,d1                           	| [...]
	jne	l_0e3b                             	| [$0e4e: djnz $0E3B]
	lea	l_8291(a6),a0                      	| [$0e50: ld   hl,$8291]
	subq.b	#1,(a0)                         	| [$0e53: dec  (hl)]
	lea	l_89F4(a6),a0                      	| [$0e54: ld   hl,$89F4]
	bset.b	#4,(a0)                         	| [$0e57: set  4,(hl)]
l_0e59:
	move.l	(sp)+,a4                        	| [$0e59: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$0e59: pop  bc]
	move.l	(sp)+,a1                        	| [$0e5a: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$0e5a: pop  de]
	move.l	(sp)+,a0                        	| [$0e5b: pop  hl]
	rts                                    	| [$0e5c: ret]

* < A0,A1

advance_hl_and_de_0e5d:
	move.w	d0,-(sp)                        	| [$0e5d: push af]
	LOAD_D3D4_FROM_A1
	LOAD_D5D6_FROM_A0
	move.b	d4,d0                           	| [$0e5e: ld   a,e]
	or.b	#0xE0,d0                          	| [$0e5f: or   $E0]
	addq.b	#1,d0                           	| [$0e61: inc  a]
	jne	l_0e68                             	| [$0e62: jr   nz,$0E68]
	move.b	d4,d0                           	| [$0e64: ld   a,e]
	sub.b	#0x20,d0                         	| [$0e65: sub  $20]
	move.b	d0,d4                           	| [$0e67: ld   e,a]
l_0e68:
	addq.b	#1,d4                           	| [$0e68: inc  e]
	move.b	d4,d6                           	| [$0e69: ld   l,e]
	LOAD_A1_FROM_D3D4
	LOAD_A0_FROM_D5D6
	move.w	(sp)+,d0                        	| [$0e6a: pop  af]
	rts                                    	| [$0e6b: ret]

advance_hl_and_de_0e6c:
	movem.w	d1/d2,-(sp)                    	| [$0e6c: push bc]
	move.w	d0,-(sp)                        	| [$0e6d: push af]
	move.w	#0x0020,d1                      	| [$0e6e: ld   bc,$0020]
	LOAD_D5D6_FROM_A0
	add.w	d1,a0                            	| [$0e71: add  hl,bc]
	move.b	d5,d0                           	| [$0e72: ld   a,h]
	and.b	#0x03,d0                         	| [$0e73: and  $03]
	or.b	#0x8C,d0                          	| [$0e75: or   $8C]
	move.b	d0,d5                           	| [$0e77: ld   h,a]
	and.b	#0xF7,d0                         	| [$0e78: and  $F7]
	move.b	d0,d3                           	| [$0e7a: ld   d,a]
	move.b	d6,d4                           	| [$0e7b: ld   e,l]
	LOAD_A0_FROM_D5D6
	LOAD_A1_FROM_D3D4
	move.w	(sp)+,d0                        	| [$0e7c: pop  af]
	movem.w	(sp)+,d1/d2                    	| [$0e7d: pop  bc]
	rts                                    	| [$0e7e: ret]

l_0e7f:
	move.b	l_804D(a6),d0                   	| [$0e7f: ld   a,($804D)]
	add.b	d1,d0                            	| [$0e82: add  a,b]
	addq.b	#0x03,d0                        	| [$0e83: add  a,$03]
	ror.b	#3,d0                            	| [$0e85: rrca] * 3
	and.b	#0x1F,d0                         	| [$0e88: and  $1F]
	move.b	d0,d1                           	| [$0e8a: ld   b,a]
	move.b	l_804F(a6),d0                   	| [$0e8b: ld   a,($804F)]
	neg.b	d0                               	| [$0e8e: neg]
	sub.b	d2,d0                            	| [$0e90: sub  c]
	sub.b	#0x08,d0                         	| [$0e91: sub  $08]
	move.b	#0x21,d5                        	| [$0e93: ld   h,$21]
	roxl.b	#1,d0                           	| [$0e95: rla]
	roxl.b	#1,d5                           	| [$0e96: rl   h]
	roxl.b	#1,d0                           	| [$0e98: rla]
	roxl.b	#1,d5                           	| [$0e99: rl   h]
	and.b	#0xE0,d0                         	| [$0e9b: and  $E0]
	or.b	d1,d0                             	| [$0e9d: or   b]
	move.b	d0,d6                           	| [$0e9e: ld   l,a]
	rts                                    	| [$0e9f: ret]

l_0ea0:
	move.w	#0x0000,d3                      	| [$0ea0: ld   de,$0000]
	lea	l_8068(a6),a2                      	| [$0ea3: ld   ix,$8068]
	move.b	(0x13,a2),d0                    	| [$0ea7: ld   a,(ix+$13)]
	subq.b	#1,(0x13,a2)                    	| [$0eaa: dec  (ix+$13)]
	tst.b	d0                               	| [$0ead: and  a]
	jne	l_0fa6                             	| [$0eae: jp   nz,$0FA6]
	move.b	d0,(0x13,a2)                    	| [$0eb1: ld   (ix+$13),a]
	lea	l_89F4(a6),a0                      	| [$0eb4: ld   hl,$89F4]
	bset.b	#6,(a0)                         	| [$0eb7: set  6,(hl)]
	LOAD_WORD	car_speed_8027(a6),d5     	| [$0eb9: ld   hl,(car_speed_8027)]

	LOAD_POINTER	pointer_899e(a6),a4             	| [$0ebc: ld   bc,($899E)]

	move.b	(a4),d0                         	| [$0ec0: ld   a,(bc)]
	move.b	d0,d1                           	| [$0ec1: ld   b,a]

	jbsr	osd_disable_interrupts			| di
	STORE_WORD	d5,previous_car_speed_802d(a6)            	| [$0ec3: ld   ($802D),hl]
	                         	| [$0ec6: xor  a]
	clr.b	d0                               	| [$0ec6: xor  a]
	move.b	d0,l_8068(a6)                   	| [$0ec7: ld   ($8068),a]
	move.b	d0,l_8048(a6)                   	| [$0eca: ld   ($8048),a]
	LOAD_WORD	value16_8069(a6),d5             	| [$0ecd: ld   hl,($8069)]

	move.b	l_8020(a6),d0                   	| [$0ed0: ld   a,($8020)]
	                               	| [$0ed3: and  a]
	bne.b	0f                               	| [...]
	jbsr	l_1b8e                            	| [$0ed4: call z,$1B8E]
0:
	jbsr	l_0fd8                            	| [$0ed7: call $0FD8]
	jcc	l_0f55                             	| [$0eda: jr   nc,$0F55]
	move.b	l_806B(a6),d0                   	| [$0edc: ld   a,($806B)]
	LOAD_WORD	value16_8069(a6),d5             	| [$0edf: ld   hl,($8069)]

	jbsr	l_0cb1                            	| [$0ee2: call $0CB1]
	jcc	l_0f16                             	| [$0ee5: jr   nc,$0F16]
	not.b	d0                               	| [$0ee7: cpl]
	move.b	d0,d3                           	| [$0ee8: ld   d,a]
	tst.b	l_804B(a6)                   	| [$0ee9: ld   a,($804B)]
	sne		d7                               	| [$0eec: and  a]
	clr.b	d0                               	| [$0eed: ld   a,$00]
	move.b	d0,l_804B(a6)                   	| [$0eef: ld   ($804B),a]
	move.b	d3,d0                           	| [$0ef2: ld   a,d]
	tst.b	d7
	jeq	l_0f00                             	| [$0ef3: jr   z,$0F00]
	LOAD_WORD	value16_8049(a6),d5             	| [$0ef5: ld   hl,($8049)]

	jbsr	l_0cb1                            	| [$0ef8: call $0CB1]
	jcc	l_0f16                             	| [$0efb: jr   nc,$0F16]
	LOAD_WORD	value16_8069(a6),d5             	| [$0efd: ld   hl,($8069)] [uncovered]

l_0f00:
	LOAD_D5D6_FROM_D5_16
	tst.b	d0                               	| [$0f00: and  a]
	bne.b	0f                               	| [...]
	jbsr	l_1e11                            	| [$0f01: call z,$1E11]
0:
	jbsr	l_0cb1                            	| [$0f04: call $0CB1]
	jcc	l_0f16                             	| [$0f07: jr   nc,$0F16]
	jbsr	l_1e11                            	| [$0f09: call $1E11]
	jbsr	l_0cb1                            	| [$0f0c: call $0CB1]
	jcc	l_0f16                             	| [$0f0f: jr   nc,$0F16]
	tst.b	d0                               	| [$0f11: and  a] [uncovered]
	bne.b	0f                               	| [...]
	jbsr	l_1e11                            	| [$0f12: call z,$1E11] [uncovered]
0:
	not.b	d0                               	| [$0f15: cpl] [uncovered]
l_0f16:
	move.b	d0,l_806B(a6)                   	| [$0f16: ld   ($806B),a]
	LOAD_D5_16_FROM_D5D6
	STORE_WORD	d5,value16_8069(a6)            	| [$0f19: ld   ($8069),hl]
	exg	d3,d5                              	| [$0f1c: ex   de,hl]
	LOAD_WORD	previous_car_speed_802d(a6),d5             	| [$0f1d: ld   hl,($802D)]
	LOAD_D5D6_FROM_D5_16
	LOAD_D3D4_FROM_D3_16
	move.w	d0,-(sp)                        	| [$0f20: push af]
	move.b	d3,d0                           	| [$0f21: ld   a,d]
	eor.b	d5,d0                            	| [$0f22: xor  h]
	btst.b	#7,d0                           	| [$0f23: bit  7,a]
	beq.b	0f                               	| [...]
	jbsr	l_1e11                            	| [$0f25: call nz,$1E11]
0:
	move.w	(sp)+,d0                        	| [$0f28: pop  af]
	LOAD_D5_16_FROM_D5D6
	STORE_WORD	d5,previous_car_speed_802d(a6)            	| [$0f29: ld   ($802D),hl]
	jbsr	osd_enable_interrupts
	move.w	#0x0080,d5                      	| [$0f2d: ld   hl,$0080]
	tst.b	d0                               	| [$0f30: and  a]
	jeq	l_0f78                             	| [$0f31: jp   z,$0F78]
	btst.b	#5,d1                           	| [$0f34: bit  5,b]
	jeq	l_0fb0                             	| [$0f36: jp   z,$0FB0]
	btst.b	#4,d1                           	| [$0f39: bit  4,b]
	jeq	l_0fba                             	| [$0f3b: jp   z,$0FBA]
	move.b	l_806F(a6),d0                   	| [$0f3e: ld   a,($806F)]
	                               	| [$0f41: and  a]
	jeq	l_0f99                             	| [$0f42: jp   z,$0F99]
	cmp.b	#0x13,d0                         	| [$0f45: cp   $13]
	jpl	l_0f9c                             	| [$0f47: jp   p,$0F9C]
	cmp.b	#0xEE,d0                         	| [$0f4a: cp   $EE]
	jmi	l_0f94                             	| [$0f4c: jp   m,$0F94]
	btst.b	#7,d0                           	| [$0f4f: bit  7,a]
	jne	l_0f9c                             	| [$0f51: jr   nz,$0F9C]
	jra	l_0f94                             	| [$0f53: jr   $0F94]

l_0f55:
	* save condition codes
	exg	d0,d7                              	| [$0f55: ex   af,af']
	*ERROR	"review carry flags used below? if so, adapt"
	jcs	l_0f5c                             	| [$0f56: jr   c,$0F5C]
	exg	d0,d7                              	| [$0f58: ex   af,af']
	*ERROR	"review carry flags used below? if so, adapt"
	jra	l_0f16                             	| [$0f59: jp   $0F16]

l_0f5c:
	* restore d0 from d7
	exg	d0,d7                              	| [$0f5c: ex   af,af']
	
	movem.w	d1/d2,-(sp)                    	| [$0f5d: push bc]
	move.b	(0x03,a2),d1                    	| [$0f5e: ld   b,(ix+$03)]
	cmp.b	d1,d0                            	| [$0f61: cp   b]
	movem.w	(sp)+,d1/d2                    	| [$0f62: pop  bc]
	jeq	l_0f16                             	| [$0f63: jp   z,$0F16]
	                              	| [$0f66: ex   af,af']
	                        	| [$0f67: ld   a,$01]
	move.b	#1,l_804B(a6)                   	| [$0f69: ld   ($804B),a]
	                              	| [$0f6c: ex   af,af']
	LOAD_WORD	value16_8069(a6),d3             	| [$0f6d: ld   de,($8069)]

	STORE_WORD	d3,value16_8049(a6)            	| [$0f71: ld   ($8049),de]
	jra	l_0f16                             	| [$0f75: jp   $0F16]

l_0f78:
	btst.b	#3,d1                           	| [$0f78: bit  3,b]
	jeq	l_0fc4                             	| [$0f7a: jr   z,$0FC4]
	btst.b	#2,d1                           	| [$0f7c: bit  2,b]
	jeq	l_0fce                             	| [$0f7e: jr   z,$0FCE]
	move.b	l_806D(a6),d0                   	| [$0f80: ld   a,($806D)]
	                               	| [$0f83: and  a]
	jeq	l_0f99                             	| [$0f84: jr   z,$0F99]
	cmp.b	#0x13,d0                         	| [$0f86: cp   $13]
	jpl	l_0f9c                             	| [$0f88: jp   p,$0F9C]
	cmp.b	#0xEE,d0                         	| [$0f8b: cp   $EE]
	jmi	l_0f94                             	| [$0f8d: jp   m,$0F94]
	btst.b	#7,d0                           	| [$0f90: bit  7,a]
	jne	l_0f9c                             	| [$0f92: jr   nz,$0F9C]
l_0f94:
	move.w	#-0x80,d5                       	| [$0f94: ld   hl,$FF80]
	jra	l_0f9c                             	| [$0f97: jr   $0F9C]

l_0f99:
	move.w	#0x0000,d5                      	| [$0f99: ld   hl,$0000]
l_0f9c:
	STORE_WORD	d5,value16_805a(a6)            	| [$0f9c: ld   ($805A),hl]
	move.b	l_8020(a6),d0                   	| [$0f9f: ld   a,($8020)]
	                               	| [$0fa2: and  a]
	bne.b	0f                               	| [...]
	jbsr	l_1bc5                            	| [$0fa3: call z,$1BC5]
0:
l_0fa6:
	move.b	l_8022(a6),d0                   	| [$0fa6: ld   a,($8022)]
	addq.b	#1,d0                           	| [$0fa9: inc  a]
	move.b	d0,l_8022(a6)                   	| [$0faa: ld   ($8022),a]
	jra	l_0a7a                             	| [$0fad: jp   $0A7A]

l_0fb0:
	move.b	l_806F(a6),d0                   	| [$0fb0: ld   a,($806F)]
	cmp.b	#0x03,d0                         	| [$0fb3: cp   $03]
	jmi	l_0f9c                             	| [$0fb5: jp   m,$0F9C]
	jra	l_0f99                             	| [$0fb8: jr   $0F99]

l_0fba:
	move.b	l_806F(a6),d0                   	| [$0fba: ld   a,($806F)]
	cmp.b	#0xFE,d0                         	| [$0fbd: cp   $FE]
	jpl	l_0f94                             	| [$0fbf: jp   p,$0F94]
	jra	l_0f99                             	| [$0fc2: jr   $0F99]

l_0fc4:
	move.b	l_806D(a6),d0                   	| [$0fc4: ld   a,($806D)]
	cmp.b	#0x03,d0                         	| [$0fc7: cp   $03]
	jmi	l_0f9c                             	| [$0fc9: jp   m,$0F9C]
	jra	l_0f99                             	| [$0fcc: jr   $0F99]

l_0fce:
	move.b	l_806D(a6),d0                   	| [$0fce: ld   a,($806D)]
	cmp.b	#0xFE,d0                         	| [$0fd1: cp   $FE]
	jpl	l_0f94                             	| [$0fd3: jp   p,$0F94]
	jra	l_0f99                             	| [$0fd6: jr   $0F99]

* > C
l_0fd8:
	move.b	d1,d0                           	| [$0fd8: ld   a,b]
	btst.b	#5,d0                           	| [$0fd9: bit  5,a]
	jeq	l_0feb                             	| [$0fdb: jr   z,$0FEB]
	btst.b	#4,d0                           	| [$0fdd: bit  4,a]
	jeq	l_0ff8                             	| [$0fdf: jr   z,$0FF8]
	btst.b	#3,d0                           	| [$0fe1: bit  3,a]
	jeq	l_1005                             	| [$0fe3: jr   z,$1005]
	btst.b	#2,d0                           	| [$0fe5: bit  2,a]
	jeq	l_1009                             	| [$0fe7: jr   z,$1009]
	SET_XC_FLAGS                           	| [$0fe9: scf]
	rts                                    	| [$0fea: ret]

l_0feb:
	clr.b	d0                               	| [$0feb: ld   a,$00]
l_0fed:
	btst.b	#7,d5                           	| [$0fed: bit  7,h]
	jeq	l_0cb1                             	| [$0fef: jp   z,$0CB1]
	jbsr	l_1e11                            	| [$0ff2: call $1E11]
	jra	l_0cb1                             	| [$0ff5: jp   $0CB1]

l_0ff8:
	clr.b	d0                               	| [$0ff8: ld   a,$00]
l_0ffa:
	btst.b	#7,d5                           	| [$0ffa: bit  7,h]
	jne	l_0cb1                             	| [$0ffc: jp   nz,$0CB1]
	jbsr	l_1e11                            	| [$0fff: call $1E11]
	jra	l_0cb1                             	| [$1002: jp   $0CB1]

l_1005:
	st.b	d0                                	| [$1005: ld   a,$FF]
	jra	l_0fed                             	| [$1007: jr   $0FED]

l_1009:
	st.b	d0                                	| [$1009: ld   a,$FF]
	jra	l_0ffa                             	| [$100b: jr   $0FFA]

l_100d:
	jbsr	osd_disable_interrupts
	btst.b	#7,d0                           	| [$100e: bit  7,a]
	jeq	l_1034                             	| [$1010: jr   z,$1034]
	move.b	value16_8050(a6),d0                   	| [$1012: ld   a,($8050)]
	add.b	#0x08,d0                         	| [$1015: add  a,$08]
	move.b	d0,value16_8050(a6)                   	| [$1017: ld   ($8050),a]
	move.b	value16_8054(a6),d0                   	| [$101a: ld   a,($8054)]
	addq.b	#1,d0                           	| [$101d: inc  a]
	move.b	d0,value16_8054(a6)                   	| [$101e: ld   ($8054),a]
	cmp.b	#0x03,d0                         	| [$1021: cp   $03]
	jne	l_10cc                             	| [$1023: jp   nz,$10CC]
	                         	| [$1026: xor  a]
	clr.b	d0                               	| [$1026: xor  a]
	move.b	d0,value16_8054(a6)                   	| [$1027: ld   ($8054),a]
	move.b	pointer_8052(a6),d0                   	| [$102a: ld   a,($8052)]
	addq.b	#1,d0                           	| [$102d: inc  a]
	move.b	d0,pointer_8052(a6)                   	| [$102e: ld   ($8052),a]
	jra	l_10cc                             	| [$1031: jp   $10CC]

l_1034:
	move.b	value16_8050(a6),d0                   	| [$1034: ld   a,($8050)]
	sub.b	#0x08,d0                         	| [$1037: sub  $08]
	move.b	d0,value16_8050(a6)                   	| [$1039: ld   ($8050),a]
	move.b	value16_8054(a6),d0                   	| [$103c: ld   a,($8054)]
	subq.b	#1,d0                           	| [$103f: dec  a]
	move.b	d0,value16_8054(a6)                   	| [$1040: ld   ($8054),a]
	jpl	l_10f6                             	| [$1043: jp   p,$10F6]
	move.b	#0x02,d0                        	| [$1046: ld   a,$02]
	move.b	d0,value16_8054(a6)                   	| [$1048: ld   ($8054),a]
	move.b	pointer_8052(a6),d0                   	| [$104b: ld   a,($8052)]
	subq.b	#1,d0                           	| [$104e: dec  a]
	move.b	d0,pointer_8052(a6)                   	| [$104f: ld   ($8052),a]
	jra	l_10f6                             	| [$1052: jp   $10F6]

l_1055:
	jbsr	osd_disable_interrupts   | di
	btst.b	#7,d0                           	| [$1056: bit  7,a]
	jeq	l_107c                             	| [$1058: jr   z,$107C]
	move.b	l_8051(a6),d0                   	| [$105a: ld   a,($8051)]
	add.b	#0x08,d0                         	| [$105d: add  a,$08]
	move.b	d0,l_8051(a6)                   	| [$105f: ld   ($8051),a]
	move.b	l_8055(a6),d0                   	| [$1062: ld   a,($8055)]
	addq.b	#1,d0                           	| [$1065: inc  a]
	move.b	d0,l_8055(a6)                   	| [$1066: ld   ($8055),a]
	cmp.b	#0x03,d0                         	| [$1069: cp   $03]
	jne	l_109d                             	| [$106b: jp   nz,$109D]
	CLEAR_XC_FLAGS                         	| [$106e: xor  a]
	clr.b	d0                               	| [$106e: xor  a]
	move.b	d0,l_8055(a6)                   	| [$106f: ld   ($8055),a]
	move.b	l_8053(a6),d0                   	| [$1072: ld   a,($8053)]
	addq.b	#1,d0                           	| [$1075: inc  a]
	move.b	d0,l_8053(a6)                   	| [$1076: ld   ($8053),a]
	jra	l_109d                             	| [$1079: jp   $109D]

l_107c:
	move.b	l_8051(a6),d0                   	| [$107c: ld   a,($8051)]
	sub.b	#0x08,d0                         	| [$107f: sub  $08]
	move.b	d0,l_8051(a6)                   	| [$1081: ld   ($8051),a]
	move.b	l_8055(a6),d0                   	| [$1084: ld   a,($8055)]
	subq.b	#1,d0                           	| [$1087: dec  a]
	move.b	d0,l_8055(a6)                   	| [$1088: ld   ($8055),a]
	jpl	l_10c1                             	| [$108b: jp   p,$10C1]
	move.b	#0x02,d0                        	| [$108e: ld   a,$02]
	move.b	d0,l_8055(a6)                   	| [$1090: ld   ($8055),a]
	move.b	l_8053(a6),d0                   	| [$1093: ld   a,($8053)]
	subq.b	#1,d0                           	| [$1096: dec  a]
	move.b	d0,l_8053(a6)                   	| [$1097: ld   ($8053),a]
	jra	l_10c1                             	| [$109a: jp   $10C1]

l_109d:
	jbsr	l_1127                            	| [$109d: call $1127]
	LOAD_D5D6_FROM_A0
	LOAD_POINTER	value16_8054(a6),a1             	| [$10a0: ld   de,($8054)]

	addq.b	#1,d3                           	| [$10a4: inc  d]
	move.b	d3,d0                           	| [$10a5: ld   a,d]
	cmp.b	#0x03,d0                         	| [$10a6: cp   $03]
	jne	l_10ad                             	| [$10a8: jr   nz,$10AD]
	addq.b	#1,d5                           	| [$10aa: inc  h]
	clr.b	d3                               	| [$10ab: ld   d,$00]
l_10ad:
	move.b	d5,d0                           	| [$10ad: ld   a,h]
	add.b	#0x0A,d0                         	| [$10ae: add  a,$0A]
	move.b	d0,l_8059(a6)                   	| [$10b0: ld   ($8059),a]
	LOAD_POINTER	pointer_8056(a6),a0             	| [$10b3: ld   hl,($8056)]

	move.w	#-0x20,d1                       	| [$10b6: ld   bc,$FFE0]
	add.w	d1,a0                            	| [$10b9: add  hl,bc]
	LOAD_D5D6_FROM_A0
	bset.b	#2,d5                           	| [$10ba: set  2,h]
	LOAD_A0_FROM_D5D6
	STORE_POINTER	a0,pointer_8056(a6)            	| [$10bc: ld   ($8056),hl]
	jra	l_10c8                             	| [$10bf: jr   $10C8]

l_10c1:
	jbsr	l_1127                            	| [$10c1: call $1127]
	LOAD_D5D6_FROM_A0
	LOAD_WORD	value16_8054(a6),d3             	| [$10c4: ld   de,($8054)]

l_10c8:
	jbsr	osd_enable_interrupts
	jra	l_1162                             	| [$10c9: jp   $1162]

l_10cc:
	jbsr	l_1127                            	| [$10cc: call $1127]
	LOAD_D5D6_FROM_A0
	LOAD_WORD	value16_8054(a6),d3             	| [$10cf: ld   de,($8054)]

	addq.b	#1,d3                           	| [$10d3: inc  e]
	                           	| [$10d4: ld   a,e]
	cmp.b	#0x03,d3                        	| [$10d5: cp   $03]
	jne	l_10dc                             	| [$10d7: jr   nz,$10DC]
	clr.b	d3                               	| [$10d9: ld   e,$00]
	addq.b	#1,d6                           	| [$10db: inc  l]
l_10dc:
	move.b	d6,d0                           	| [$10dc: ld   a,l]
	add.b	#0x0A,d0                         	| [$10dd: add  a,$0A]
	move.b	d0,pointer_8058(a6)                   	| [$10df: ld   ($8058),a]
	LOAD_POINTER	pointer_8056(a6),a0             	| [$10e2: ld   hl,($8056)]

	move.b	d6,d0                           	| [$10e5: ld   a,l]
	and.b	#0x1F,d0                         	| [$10e6: and  $1F]
	jne	l_10f0                             	| [$10e8: jr   nz,$10F0]
	move.b	d6,d0                           	| [$10ea: ld   a,l]
	or.b	#0x1F,d0                          	| [$10eb: or   $1F]
	move.b	d0,d6                           	| [$10ed: ld   l,a]
	jra	l_10f1                             	| [$10ee: jr   $10F1]

l_10f0:
	LOAD_D5_16_FROM_D5D6
	subq.w	#1,d5                           	| [$10f0: dec  hl]
l_10f1:
	STORE_WORD	d5,pointer_8056(a6)            	| [$10f1: ld   ($8056),hl]
	jra	l_10fd                             	| [$10f4: jr   $10FD]

l_10f6:
	jbsr	l_1127                            	| [$10f6: call $1127]
	LOAD_D5D6_FROM_A0
	LOAD_POINTER	value16_8054(a6),a1             	| [$10f9: ld   de,($8054)]

l_10fd:
	jbsr	osd_enable_interrupts
	move.b	#0x20,d1                        	| [$10fe: ld   b,$20]
	move.b	d1,d2                           	| [$1100: ld   c,b]
	LOAD_POINTER	pointer_8058(a6),a0             	| [$1101: ld   hl,($8058)]

l_1104:
	jbsr	l_131e                            	| [$1104: call $131E]
	addq.b	#1,d3                           	| [$1107: inc  d]
	subq.b	#1,d1                           	| [$1108: dec  b]
	bne.b	0f                               	| [...]
	rts                                    	| [$1109: ret  z] [...]
0:

	                        	| [$110a: push hl]
	* it's a pointer but here it's processed as data (MSB address)
	LOAD_WORD	pointer_8056(a6),d5             	| [$110b: ld   hl,($8056)]
	move.b	d1,d0                           	| [$110e: ld   a,b]
	clr.b	d1                               	| [$110f: ld   b,$00]
	add.w	#0x20,d5                            	| [$1111: add  hl,bc]
	LOAD_D5D6_FROM_D5_16
	move.b	d0,d1                           	| [$1112: ld   b,a]
	move.b	d5,d0                           	| [$1113: ld   a,h]
	and.b	#0x03,d0                         	| [$1114: and  $03]
	or.b	#0x84,d0                          	| [$1116: or   $84]
	move.b	d0,d5                           	| [$1118: ld   h,a]
	LOAD_D5_16_FROM_D5D6
	STORE_WORD	d5,pointer_8056(a6)            	| [$1119: ld   ($8056),hl]
	                        	| [$111c: pop  hl]
	move.b	d3,d0                           	| [$111d: ld   a,d]
	cmp.b	#0x03,d0                         	| [$111e: cp   $03]
	jne	l_1104                             	| [$1120: jr   nz,$1104]
	clr.b	d3                               	| [$1122: ld   d,$00]
	add.w	#0x100,a0                           	| [$1124: inc  h]
	jra	l_1104                             	| [$1125: jr   $1104]

l_1127:
	jbsr	l_1497                            	| [$1127: call $1497]
	LOAD_POINTER	pointer_8052(a6),a0             	| [$112a: ld   hl,($8052)]

	STORE_POINTER	a0,pointer_8058(a6)            	| [$112d: ld   ($8058),hl]
	rts                                    	| [$1130: ret]

l_1131:
	jbsr	l_1127                            	| [$1131: call $1127]
	LOAD_POINTER	value16_8054(a6),a1             	| [$1134: ld   de,($8054)]

	move.b	#0x20,d1                        	| [$1138: ld   b,$20]
l_113a:
	jbsr	l_1162                            	| [$113a: call $1162]
	            	| [$113d: ld   (watchdog_a080),a]
	LOAD_WORD	pointer_8056(a6),d5             	| [$1140: ld   hl,($8056)]
	move.b	d1,d0                           	| [$1143: ld   a,b]
	move.w	#0x0020,d1                      	| [$1144: ld   bc,$0020]
	add.w	d1,d5                            	| [$1147: add  hl,bc]
	move.b	d0,d1                           	| [$1148: ld   b,a]
	LOAD_D5D6_FROM_D5_16
	bset.b	#2,d5                           	| [$1149: set  2,h]
	bclr.b	#3,d5                           	| [$114b: res  3,h]
	LOAD_D5_16_FROM_D5D6
	STORE_WORD	d5,pointer_8056(a6)            	| [$114d: ld   ($8056),hl]
	move.b	d3,d0                           	| [$1150: ld   a,d]
	subq.b	#1,d1                           	| [$1151: dec  b]
	bne.b	0f                               	| [...]
	rts                                    	| [$1152: ret  z] [...]
0:
	cmp.b	#0x03,d0                         	| [$1153: cp   $03]
	jne	l_113a                             	| [$1155: jr   nz,$113A]
	move.b	l_8059(a6),d0                   	| [$1157: ld   a,($8059)]
	addq.b	#1,d0                           	| [$115a: inc  a]
	move.b	d0,l_8059(a6)                   	| [$115b: ld   ($8059),a]
	clr.b	d3                               	| [$115e: ld   d,$00]
	jra	l_113a                             	| [$1160: jr   $113A]

l_1162:
	movem.w	d1/d2,-(sp)                    	| [$1162: push bc]
	movem.w	d3/d4,-(sp)                    	| [$1163: push de]
	move.l	a1,-(sp)                        	| [$1163: push de]
	move.b	#0x20,d1                        	| [$1164: ld   b,$20]
	LOAD_POINTER	pointer_8058(a6),a0             	| [$1166: ld   hl,($8058)]

l_1169:
	jbsr	l_131e                            	| [$1169: call $131E]
	addq.b	#1,d4                           	| [$116c: inc  e]

	move.w	d5,-(sp)                        	| [$116d: push hl]
	LOAD_WORD	pointer_8056(a6),d5             	| [$116e: ld   hl,($8056)]

	addq.w	#1,d5                           	| [$1171: inc  hl]
	move.b	d5,d0                           	| [$1172: ld   a,l]
	and.b	#0x1F,d0                         	| [$1173: and  $1F]
	jne	l_117c                             	| [$1175: jr   nz,$117C]
	subq.w	#1,d5                           	| [$1177: dec  hl]
	                           	| [$1178: ld   a,l]
	and.b	#0xE0,d5                         	| [$1179: and  $E0]
	                           	| [$117b: ld   l,a]
l_117c:
	STORE_WORD	d5,pointer_8056(a6)            	| [$117c: ld   ($8056),hl]
	move.w	(sp)+,d5                        	| [$117f: pop  hl]
	subq.b	#1,d1                           	| [$1180: dec  b]
	jeq	l_118d                             	| [$1181: jr   z,$118D]
	move.b	d4,d0                           	| [$1183: ld   a,e]
	cmp.b	#0x03,d0                         	| [$1184: cp   $03]
	jne	l_1169                             	| [$1186: jr   nz,$1169]
	clr.b	d4                               	| [$1188: ld   e,$00]
	addq.w	#1,a0                           	| [$118a: inc  l]
	jra	l_1169                             	| [$118b: jr   $1169]

l_118d:
	move.l	(sp)+,a1                        	| [$118d: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$118d: pop  de]
	movem.w	(sp)+,d1/d2                    	| [$118e: pop  bc]
	addq.b	#1,d3                           	| [$118f: inc  d]
	rts                                    	| [$1190: ret]

l_1191:
	LOAD_POINTER	pointer_8996(a6),a0             	| [$1191: ld   hl,($8996)]

	move.w	#0x0020,d3                      	| [$1194: ld   de,$0020]
	add.w	d3,a0                            	| [$1197: add  hl,de]
	LOAD_POINTER	pointer_8994(a6),a1             	| [$1198: ld   de,($8994)]

	st.b	d0                                	| [$119c: ld   a,$FF]
	move.b	#0x18,d1                        	| [$119e: ld   b,$18]
l_11a0:
	move.b	d0,(a0)+                         	| [$11a0: ld   (hl),a]
	move.b	d0,(a1)+                         	| [$11a1: ld   (de),a]
	                           	| [$11a2: inc  de]
	                           	| [$11a3: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_11a0                             	| [$11a4: djnz $11A0]
	move.b	nb_rocks_8251(a6),d0            	| [$11a6: ld   a,(nb_rocks_8251)]
	move.b	d0,d1                           	| [$11a9: ld   b,a]
	LOAD_POINTER	pointer_8996(a6),a2             	| [$11aa: ld   ix,($8996)]

	clr.b	d2                               	| [$11ae: ld   c,$00]
l_11b0:
	jbsr	l_0d72                            	| [$11b0: call $0D72]
	move.b	timer_8000(a6),d0                   	| [$11b3: ld   a,($8000)]
	and.b	#0x1E,d0                         	| [$11b6: and  $1E]
	add.b	#0xE0,d0                         	| [$11b8: add  a,$E0]
	move.b	d0,d6                           	| [$11ba: ld   l,a]
	move.b	l_828F(a6),d0                   	| [$11bb: ld   a,($828F)]
	move.b	d0,d5                           	| [$11be: ld   h,a]
	LOAD_A0_FROM_D5D6
	move.b	(a0)+,d4                         	| [$11bf: ld   e,(hl)]
	                           	| [$11c0: inc  hl]
	move.b	(a0),d3                         	| [$11c1: ld   d,(hl)]
	LOAD_A1_FROM_D3D4
	exg	a1,a0                              	| [$11c2: ex   de,hl]
	jra	l_11fc                             	| [$11c3: jr   $11FC]

l_11c5:
	                                    	| [$11c5: nop]
	LOAD_POINTER	pointer_8996(a6),a2             	| [$11c6: ld   ix,($8996)]

	move.w	#0x0020,d3                      	| [$11ca: ld   de,$0020]
	add.w	d3,a2                            	| [$11cd: add  ix,de]
	move.b	#0x01,d2                        	| [$11cf: ld   c,$01]
	move.b	#0x0A,d1                        	| [$11d1: ld   b,$0A]
	LOAD_POINTER	pointer_8992(a6),a2             	| [$11d3: ld   ix,($8992)]

	move.b	l_8020(a6),d0                   	| [$11d7: ld   a,($8020)]
	                               	| [$11da: and  a]
	jne	l_11e2                             	| [$11db: jr   nz,$11E2]
	move.b	#0x34,d0                        	| [$11dd: ld   a,$34] [uncovered]
	move.b	d0,l_828F(a6)                   	| [$11df: ld   ($828F),a] [uncovered]
l_11e2:
	move.b	d2,d0                           	| [$11e2: ld   a,c]
	                               	| [$11e3: and  a]
	jeq	l_11b0                             	| [$11e4: jr   z,$11B0]
	jbsr	l_0d72                            	| [$11e6: call $0D72]
	move.b	l_8001(a6),d0                   	| [$11e9: ld   a,($8001)]
	and.b	#0x3F,d0                         	| [$11ec: and  $3F]
	move.b	d0,d5                           	| [$11ee: ld   h,a]
	move.b	timer_8000(a6),d0                   	| [$11ef: ld   a,($8000)]
	and.b	#0x1F,d0                         	| [$11f2: and  $1F]
	move.b	d0,d6                           	| [$11f4: ld   l,a]
	move.b	d5,d4                           	| [$11f5: ld   e,h]
	move.b	d6,d3                           	| [$11f6: ld   d,l]
	jbsr	l_12f2                            	| [$11f7: call $12F2]
	jcs	l_11e2                             	| [$11fa: jr   c,$11E2]
l_11fc:
	movem.w	d1/d2,-(sp)                    	| [$11fc: push bc]
	move.b	#0x0A,d2                        	| [$11fd: ld   c,$0A]
	LOAD_POINTER	pointer_8994(a6),a1             	| [$11ff: ld   de,($8994)]

	jbsr	l_125f                            	| [$1203: call $125F]
	movem.w	(sp)+,d1/d2                    	| [$1206: pop  bc]
	jcs	l_11e2                             	| [$1207: jr   c,$11E2]
	move.b	nb_rocks_8251(a6),d0            	| [$1209: ld   a,(nb_rocks_8251)]
	movem.w	d1/d2,-(sp)                    	| [$120c: push bc]
	move.b	d0,d2                           	| [$120d: ld   c,a]

	move.l	a0,-(sp)                        	| [$120e: push hl]
	LOAD_POINTER	pointer_8996(a6),a0             	| [$120f: ld   hl,($8996)]

	move.w	#0x0020,d3                      	| [$1212: ld   de,$0020]
	add.w	d3,a0                            	| [$1215: add  hl,de]
	exg	a1,a0                              	| [$1216: ex   de,hl]
	move.l	(sp)+,a0                        	| [$1217: pop  hl]
	jbsr	l_125f                            	| [$1218: call $125F]
	movem.w	(sp)+,d1/d2                    	| [$121b: pop  bc]
	jcs	l_11e2                             	| [$121c: jr   c,$11E2]
	movem.w	d1/d2,-(sp)                    	| [$121e: push bc]
	lea	l_125B(a6),a1                      	| [$121f: ld   de,$125B]
	move.b	#0x02,d2                        	| [$1222: ld   c,$02]
	jbsr	l_125f                            	| [$1224: call $125F]
	movem.w	(sp)+,d1/d2                    	| [$1227: pop  bc]
	jcs	l_11e2                             	| [$1228: jr   c,$11E2]
	move.b	d5,(0x21,a2)                    	| [$122a: ld   (ix+$21),h]
	move.b	d6,(0x20,a2)                    	| [$122d: ld   (ix+$20),l]
	move.b	d6,d0                           	| [$1230: ld   a,l]
	add.b	d0,d0                            	| [$1231: add  a,a]
	add.b	d0,d0                            	| [$1232: add  a,a]
	add.b	d0,d0                            	| [$1233: add  a,a]
	lsr.b	#1,d5                            	| [$1234: srl  h]
	roxr.b	#1,d0                           	| [$1236: rra]
	lsr.b	#1,d5                            	| [$1237: srl  h]
	roxr.b	#1,d0                           	| [$1239: rra]
	lsr.b	#1,d5                            	| [$123a: srl  h]
	roxr.b	#1,d0                           	| [$123c: rra]
	move.b	d0,d6                           	| [$123d: ld   l,a]
	move.b	d5,d0                           	| [$123e: ld   a,h]
	and.b	#0x07,d0                         	| [$123f: and  $07]
	or.b	#0x98,d0                          	| [$1241: or   $98]
	move.b	d0,d5                           	| [$1243: ld   h,a]
	move.b	d5,(0x01,a2)                    	| [$1244: ld   (ix+$01),h]
	move.b	d6,(0x00,a2)                    	| [$1247: ld   (ix+$00),l]
	addq.w	#2,a2                           	| [$124a: inc  ix] * 2
	subq.b	#1,d1                           	| [...]
	jne	l_11e2                             	| [$124e: djnz $11E2]
	move.b	l_8020(a6),d0                   	| [$1250: ld   a,($8020)]
	                               	| [$1253: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1254: ret  nz] [...]
0:
	move.b	#0x28,d0                        	| [$1255: ld   a,$28] [uncovered]
	move.b	d0,l_828F(a6)                   	| [$1257: ld   ($828F),a] [uncovered]
	rts                                    	| [$125a: ret] [uncovered]

* < A1,D5/D6
l_125f:
	move.b	(a1)+,d0                         	| [$125f: ld   a,(de)]
	                           	| [$1260: inc  de]
	cmp.b	#0xFF,d0                         	| [$1261: cp   $FF]
	jeq	l_1277                             	| [$1263: jr   z,$1277]
	sub.b	d6,d0                            	| [$1265: sub  l]
	addq.b	#0x04,d0                        	| [$1266: add  a,$04]
	cmp.b	#0x09,d0                         	| [$1268: cp   $09]
	jcc	l_1277                             	| [$126a: jr   nc,$1277]
	move.b	(a1),d0                         	| [$126c: ld   a,(de)]
	cmp.b	#0xFF,d0                         	| [$126d: cp   $FF]
	jeq	l_1277                             	| [$126f: jr   z,$1277]
	sub.b	d5,d0                            	| [$1271: sub  h]
	addq.b	#0x04,d0                        	| [$1272: add  a,$04]
	cmp.b	#0x09,d0                         	| [$1274: cp   $09]
	bcc.b	0f                               	| [...]
	rts                                    	| [$1276: ret  c] [...]
0:
l_1277:
	addq.w	#1,a1                           	| [$1277: inc  de]
	subq.b	#1,d2                           	| [$1278: dec  c]
	jne	l_125f                             	| [$1279: jr   nz,$125F]
	CLEAR_XC_FLAGS                         	| [$127b: xor  a]
	clr.b	d0                               	| [$127b: xor  a]
	rts                                    	| [$127c: ret]

l_127d:
	move.b	#0x80,d2                        	| [$127d: ld   c,$80]
l_127f:

	move.l	a0,-(sp)                        	| [$127f: push hl]
	move.b	d4,d0                           	| [$1280: ld   a,e]
	ror.b	#2,d0                            	| [$1281: rrca] * 2
	addq.b	#0x04,d0                        	| [$1283: add  a,$04]
	and.b	#0x07,d0                         	| [$1285: and  $07]
	move.b	d0,d6                           	| [$1287: ld   l,a]
	move.b	d3,d0                           	| [$1288: ld   a,d]
	move.b	#0x40,d5                        	| [$1289: ld   h,$40]
	roxl.b	#3,d0                           	| [$128b: rla] * 3
	roxl.b	#1,d5                           	| [$128e: rl   h]
	and.b	#0xE0,d0                         	| [$1290: and  $E0]
	or.b	d6,d0                             	| [$1292: or   l]
	addq.b	#1,d5                           	| [$1293: inc  h]
	add.b	#0x80,d0                         	| [$1294: add  a,$80]
	jcc	l_1299                             	| [$1296: jr   nc,$1299]
	addq.b	#1,d5                           	| [$1298: inc  h]
l_1299:
	move.b	d0,d6                           	| [$1299: ld   l,a]
	LOAD_A0_FROM_D5D6
	move.b	d2,(a0)                         	| [$129a: ld   (hl),c]
	add.w	#0x800,a0                           	| [$129b: set  3,h]	; screen ?
	move.b	(a0),d0                         	| [$129d: ld   a,(hl)]
	and.b	#0x3F,d0                         	| [$129e: and  $3F]
	btst.b	#1,d4                           	| [$12a0: bit  1,e]
	jeq	l_12a6                             	| [$12a2: jr   z,$12A6]
	or.b	#0x40,d0                          	| [$12a4: or   $40]
l_12a6:
	btst.b	#1,d3                           	| [$12a6: bit  1,d]
	jeq	l_12ac                             	| [$12a8: jr   z,$12AC]
	or.b	#0x80,d0                          	| [$12aa: or   $80]
l_12ac:
	move.b	d0,(a0)                         	| [$12ac: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$12ad: pop  hl]
	rts                                    	| [$12ae: ret]

l_12af:
	LOAD_POINTER	pointer_8994(a6),a0             	| [$12af: ld   hl,($8994)]

	move.b	#0xC6,d2                        	| [$12b2: ld   c,$C6]
	move.b	#0x0A,d1                        	| [$12b4: ld   b,$0A]
l_12b6:
	move.b	(a0),d4                         	| [$12b6: ld   e,(hl)]
	move.b	d4,d0                           	| [$12b7: ld   a,e]
	addq.w	#1,a0                           	| [$12b8: inc  hl]
	move.b	(a0),d3                         	| [$12b9: ld   d,(hl)]
	addq.w	#1,a0                           	| [$12ba: inc  hl]
	and.b	d3,d0                            	| [$12bb: and  d]
	addq.b	#1,d0                           	| [$12bc: inc  a]
	jeq	l_12c2                             	| [$12bd: jr   z,$12C2]
	jbsr	l_127f                            	| [$12bf: call $127F]
l_12c2:
	subq.b	#1,d1                           	| [...]
	jne	l_12b6                             	| [$12c2: djnz $12B6]
	rts                                    	| [$12c4: ret]

* < D5.W
l_12c5:

	move.w	d5,-(sp)                        	| [$12c5: push hl]
	movem.w	d3/d4,-(sp)                    	| [$12c6: push de]
	movem.w	d1/d2,-(sp)                    	| [$12c7: push bc]
	                         	| [$12c8: xor  a]
	clr.b	d0                               	| [$12c8: xor  a]
	exg	d5,d3                              	| [$12c9: ex   de,hl]
	LOAD_D3D4_FROM_D3_16
	jbsr	l_12f2                            	| [$12ca: call $12F2]
	jcc	l_12ee                             	| [$12cd: jr   nc,$12EE]
	subq.b	#1,d3                           	| [$12cf: dec  d]
	subq.b	#1,d4                           	| [$12d0: dec  e]
	lea	l_2267(a6),a0                      	| [$12d1: ld   hl,$2267]
	move.b	#0x03,d2                        	| [$12d4: ld   c,$03]
l_12d6:
	move.b	#0x03,d1                        	| [$12d6: ld   b,$03]
l_12d8:
	jbsr	l_12f2                            	| [$12d8: call $12F2]
	jcc	l_12de                             	| [$12db: jr   nc,$12DE]
	or.b	(a0),d0                           	| [$12dd: or   (hl)]
l_12de:
	addq.w	#1,a0                           	| [$12de: inc  hl]
	addq.b	#1,d3                           	| [$12df: inc  d]
	subq.b	#1,d1                           	| [...]
	jne	l_12d8                             	| [$12e0: djnz $12D8]
	subq.b	#3,d3                           	| [$12e2: dec  d] * 3
	addq.b	#1,d4                           	| [$12e5: inc  e]
	subq.b	#1,d2                           	| [$12e6: dec  c]
	jne	l_12d6                             	| [$12e7: jr   nz,$12D6]
	tst.b	d0                               	| [$12e9: and  a]
	jne	l_12ee                             	| [$12ea: jr   nz,$12EE]
	or.b	#0x87,d0                          	| [$12ec: or   $87]
l_12ee:
	movem.w	(sp)+,d1/d2                    	| [$12ee: pop  bc]
	movem.w	(sp)+,d3/d4                    	| [$12ef: pop  de]
	move.w	(sp)+,d5                        	| [$12f0: pop  hl]
	rts                                    	| [$12f1: ret]

* < D0
* < D3/D4
* > C
l_12f2:
	movem.w	d3/d4,-(sp)                    	| [$12f2: push de]
	move.l	a1,-(sp)                        	| [$12f2: push de]
	movem.w	d1/d2,-(sp)                    	| [$12f3: push bc]
	move.b	d0,d2                           	| [$12f4: ld   c,a]
	move.b	d3,d0                           	| [$12f5: ld   a,d]
	cmp.b	#0x20,d0                         	| [$12f6: cp   $20]
	jcc	l_1319                             	| [$12f8: jr   nc,$1319]
	and.b	#0x07,d0                         	| [$12fa: and  $07]
	move.b	d0,d1                           	| [$12fc: ld   b,a]
	addq.b	#1,d1                           	| [$12fd: inc  b]
	move.b	d4,d0                           	| [$12fe: ld   a,e]
	cmp.b	#0x38,d0                         	| [$12ff: cp   $38]
	jcc	l_1319                             	| [$1301: jr   nc,$1319]
	move.b	d3,d0                           	| [$1303: ld   a,d]
	lsl.b	#4,d0                            	| [$1304: add  a,a]
												| [$1305: add  a,a]
												| [$1306: add  a,a]
												| [$1307: add  a,a]
	roxl.b	#1,d4                           	| [$1308: rl   e]
	add.b	d0,d0                            	| [$130a: add  a,a]
	roxl.b	#1,d4                           	| [$130b: rl   e]
	move.b	l_828F(a6),d0                   	| [$130d: ld   a,($828F)]
	move.b	d0,d3                           	| [$1310: ld   d,a]
	LOAD_A1_FROM_D3D4
	move.b	(a1),d0                         	| [$1311: ld   a,(de)]
l_1312:
	add.b	d0,d0                            	| [$1312: add  a,a]
	subq.b	#1,d1                           	| [...]
	jne	l_1312                             	| [$1313: djnz $1312]
	move.b	d2,d0                           	| [$1315: ld   a,c]
	movem.w	(sp)+,d1/d2                    	| [$1316: pop  bc]
	move.l	(sp)+,a1                        	| [$1317: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$1317: pop  de]
	rts                                    	| [$1318: ret]

l_1319:
	move.b	d2,d0                           	| [$1319: ld   a,c]
	movem.w	(sp)+,d1/d2                    	| [$131a: pop  bc]
	move.l	(sp)+,a1                        	| [$131b: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$131b: pop  de]
	SET_XC_FLAGS                           	| [$131c: scf]
	rts                                    	| [$131d: ret]

* < A0: pointer
l_131e:
	movem.w	d1/d2,-(sp)                    	| [$131e: push bc]
	movem.w	d3/d4,-(sp)                    	| [$131f: push de]
	move.l	a1,-(sp)                        	| [$131f: push de]
	LOAD_D5D6_FROM_A0
	move.w	d5,-(sp)                        	| [$1320: push hl]
	move.b	d5,d0                           	| [$1321: ld   a,h]
	cmp.b	#0x38,d0                         	| [$1322: cp   $38]
	jcc	l_13b5                             	| [$1324: jp   nc,$13B5]
	move.b	d6,d0                           	| [$1327: ld   a,l]
	cmp.b	#0x20,d0                         	| [$1328: cp   $20]
	jcc	l_13b5                             	| [$132a: jp   nc,$13B5]
	add.b	d0,d0                            	| [$132d: add  a,a]
	add.b	d0,d0                            	| [$132e: add  a,a]
	add.b	d0,d0                            	| [$132f: add  a,a]
	lsr.b	#1,d5                            	| [$1330: srl  h]
	roxr.b	#1,d0                           	| [$1332: rra]
	lsr.b	#1,d5                            	| [$1333: srl  h]
	roxr.b	#1,d0                           	| [$1335: rra]
	lsr.b	#1,d5                            	| [$1336: srl  h]
	roxr.b	#1,d0                           	| [$1338: rra]
	move.b	d0,d6                           	| [$1339: ld   l,a]
	move.b	d5,d0                           	| [$133a: ld   a,h]
	and.b	#0x07,d0                         	| [$133b: and  $07]
	or.b	#0x98,d0                          	| [$133d: or   $98]
	move.b	d0,d5                           	| [$133f: ld   h,a]
	LOAD_A0_FROM_D5D6
	move.b	(a0),d2                         	| [$1340: ld   c,(hl)]
	move.b	d2,d0                           	| [$1341: ld   a,c]
	and.b	#0xF8,d0                         	| [$1342: and  $F8]
	jeq	l_1386                             	| [$1344: jp   z,$1386]
	moveq	#0,d0
	move.b	d3,d0                           	| [$1347: ld   a,d]
	add.b	d0,d0                            	| [$1348: add  a,a]
	add.b	d3,d0                            	| [$1349: add  a,d]
	add.b	d4,d0                            	| [$134a: add  a,e]
	add.b	d0,d0                            	| [$134b: add  a,a]
	add.b	d0,d0                            	| [$134c: add  a,a]
	lea	l_223B(a6),a0                      	| [$134d: ld   hl,$223B]
	add.w	d0,a0                           	| [$1350: add  a,l]
												| [$1351: jr   nc,$1354]
												| [$1353: inc  h] [uncovered]

	                           	| [$1354: ld   l,a]
	clr.b	d4                               	| [$1355: ld   e,$00]
	move.b	(a0)+,d1                         	| [$1357: ld   b,(hl)]
	                           	| [$1358: inc  hl]
	move.b	(a0),d0                         	| [$1359: ld   a,(hl)]
	and.b	d2,d0                            	| [$135a: and  c]
	jeq	l_135f                             	| [$135b: jr   z,$135F]
	bset.b	#2,d4                           	| [$135d: set  2,e]
l_135f:
	addq.w	#1,a0                           	| [$135f: inc  hl]
	move.b	(a0),d0                         	| [$1360: ld   a,(hl)]
	and.b	d2,d0                            	| [$1361: and  c]
	jeq	l_1366                             	| [$1362: jr   z,$1366]
	bset.b	#1,d4                           	| [$1364: set  1,e]
l_1366:
	addq.w	#1,a0                           	| [$1366: inc  hl]
	move.b	(a0),d0                         	| [$1367: ld   a,(hl)]
	and.b	d2,d0                            	| [$1368: and  c]
	jeq	l_136d                             	| [$1369: jr   z,$136D]
	bset.b	#0,d4                           	| [$136b: set  0,e]
l_136d:
	moveq	#0,d0
	move.b	d4,d0                           	| [$136d: ld   a,e]
	lea	l_225F(a6),a0                      	| [$136e: ld   hl,$225F]
	add.w	d0,a0                           	| [$1371: add  a,l]
	                         	| [$1372: jr   nc,$1375]
	                          	| [$1374: inc  h] [uncovered]
	                           	| [$1375: ld   l,a]
	move.b	(a0),d2                         	| [$1376: ld   c,(hl)]
	LOAD_POINTER	pointer_8056(a6),a0             	| [$1377: ld   hl,($8056)]

	move.b	d2,(a0)                         	| [$137a: ld   (hl),c]
	add.w	#0x800,a0                           	| [$137b: set  3,h] screen?
	move.b	l_82B1(a6),d0                   	| [$137d: ld   a,($82B1)]
	or.b	d1,d0                             	| [$1380: or   b]
	move.b	d0,(a0)                         	| [$1381: ld   (hl),a] screen?
	move.l	(sp)+,a0                        	| [$1382: pop  hl]
	move.l	(sp)+,a1                        	| [$1383: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$1383: pop  de]
	movem.w	(sp)+,d1/d2                    	| [$1384: pop  bc]
	rts                                    	| [$1385: ret]

l_1386:
	CLEAR_XC_FLAGS                         	| [$1386: xor  a]
	clr.b	d0                               	| [$1386: xor  a]
	move.b	d0,d1                           	| [$1387: ld   b,a]
	move.b	d0,d5                           	| [$1388: ld   h,a]
	move.b	d2,d6                           	| [$1389: ld   l,c]
	LOAD_D5_16_FROM_D5D6
	LOAD_D1_16_FROM_D1D2
	add.w	d5,d5                            	| [$138a: add  hl,hl]
	add.w	d5,d5                            	| [$138b: add  hl,hl]
	add.w	d5,d5                            	| [$138c: add  hl,hl]
	add.w	d1,d5                            	| [$138d: add  hl,bc]
	moveq	#0,d1
	move.b	d3,d1                           	| [$138e: ld   c,d]
	add.w	d1,d5                            	| [$138f: add  hl,bc]
	add.w	d1,d5                            	| [$1390: add  hl,bc]
	add.w	d1,d5                            	| [$1391: add  hl,bc]
	move.b	d4,d1                           	| [$1392: ld   c,e]
	add.w	d1,d5                            	| [$1393: add  hl,bc]
	move.w	#0x2288,d1                      	| [$1394: ld   bc,$2288]
	add.w	d1,d5                            	| [$1397: add  hl,bc]
	LOAD_POINTER	pointer_8056(a6),a1             	| [$1398: ld   de,($8056)]
	LOAD_A0_FROM_D5_16
	move.b	(a0),d0                         	| [$139c: ld   a,(hl)]
	and.b	#0xC0,d0                         	| [$139d: and  $C0]
	or.b	#0x15,d0                          	| [$139f: or   $15]
	move.b	d0,d1                           	| [$13a1: ld   b,a]
	move.b	(a0),d0                         	| [$13a2: ld   a,(hl)]
	btst.b	#5,d0                           	| [$13a3: bit  5,a]
	jeq	l_13a8                             	| [$13a5: jr   z,$13A8]
	addq.b	#1,d1                           	| [$13a7: inc  b]
l_13a8:
	and.b	#0x1F,d0                         	| [$13a8: and  $1F]
	bset.b	#7,d0                           	| [$13aa: set  7,a]
	move.b	d0,(a1)                         	| [$13ac: ld   (de),a]
l_13ad:
	exg	a1,a0                              	| [$13ad: ex   de,hl]
	LOAD_D5D6_FROM_A0
	bset.b	#3,d5                           	| [$13ae: set  3,h]
	LOAD_A0_FROM_D5D6
	move.b	d1,(a0)                         	| [$13b0: ld   (hl),b]
	move.l	(sp)+,a0                        	| [$13b1: pop  hl]
	move.l	(sp)+,a1                        	| [$13b2: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$13b2: pop  de]
	movem.w	(sp)+,d1/d2                    	| [$13b3: pop  bc]
	rts                                    	| [$13b4: ret]

l_13b5:
	move.b	l_82D6(a6),d0                   	| [$13b5: ld   a,($82D6)]
	add.b	d3,d0                            	| [$13b8: add  a,d]
	add.b	d3,d0                            	| [$13b9: add  a,d]
	add.b	d3,d0                            	| [$13ba: add  a,d]
	add.b	d4,d0                            	| [$13bb: add  a,e]
	LOAD_POINTER	pointer_8056(a6),a1             	| [$13bc: ld   de,($8056)]

	move.b	d0,(a1)                         	| [$13c0: ld   (de),a]
	move.b	#0x51,d1                        	| [$13c1: ld   b,$51]
	move.b	l_82D6(a6),d0                   	| [$13c3: ld   a,($82D6)]
l_13c6:
	cmp.b	#0x5F,d0                         	| [$13c6: cp   $5F]
	jcs	l_13ad                             	| [$13c8: jr   c,$13AD]
	sub.b	#0x09,d0                         	| [$13ca: sub  $09] [uncovered]
	addq.b	#1,d1                           	| [$13cc: inc  b] [uncovered]
	jra	l_13c6                             	| [$13cd: jr   $13C6] [uncovered]

l_13cf:
	move.b	nb_enemy_cars_824e(a6),d0       	| [$13cf: ld   a,(nb_enemy_cars_824e)]
	                               	| [$13d2: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$13d3: ret  z] [...]
0:
	move.	#0x01F8,d5                      	| [$13d4: ld   hl,$01F8]
	jbsr	osd_disable_interrupts
	LOAD_WORD	value16_8054(a6),d3             	| [$13d8: ld   de,($8054)]
	LOAD_D3D4_FROM_D3_16
	
	move.b	value16_8050(a6),d0                   	| [$13dc: ld   a,($8050)]
	clr.w	d1                               	| [$13df: ld   b,$00]
	move.b	d0,d1                           	| [$13e1: ld   c,a]
	btst.b	#7,d0                           	| [$13e2: bit  7,a]
	jeq	l_13e7                             	| [$13e4: jr   z,$13E7]
	sub.w	#0x100,d1                           	| [$13e6: dec  b]
l_13e7:
	add.w	d1,d5                            	| [$13e7: add  hl,bc]
	move.w	#-0x08,d1                       	| [$13e8: ld   bc,$FFF8]
	addq.b	#1,d4                           	| [$13eb: inc  e]
l_13ec:
	subq.b	#1,d4                           	| [$13ec: dec  e]
	jeq	l_13f2                             	| [$13ed: jr   z,$13F2]
	add.w	d1,d5                            	| [$13ef: add  hl,bc]
	jra	l_13ec                             	| [$13f0: jr   $13EC]

l_13f2:
	STORE_WORD	d5,value16_8248(a6)            	| [$13f2: ld   ($8248),hl]
	move.b	l_8051(a6),d0                   	| [$13f5: ld   a,($8051)]
	add.b	#0x14,d0                         	| [$13f8: add  a,$14]
	neg.b	d0                               	| [$13fa: neg]
	addq.b	#1,d3                           	| [$13fc: inc  d]
l_13fd:
	subq.b	#1,d3                           	| [$13fd: dec  d]
	jeq	l_1403                             	| [$13fe: jr   z,$1403]
	sub.b	d2,d0                            	| [$1400: sub  c]
	jra	l_13fd                             	| [$1401: jr   $13FD]

l_1403:
	move.b	d0,l_824A(a6)                   	| [$1403: ld   ($824A),a]
	move.b	nb_enemy_cars_824e(a6),d0       	| [$1406: ld   a,(nb_enemy_cars_824e)]
	move.b	d0,d1                           	| [$1409: ld   b,a]
	lea	l_8093(a6),a2                      	| [$140a: ld   ix,$8093]
l_140e:
	LOAD_POINTER	pointer_8052(a6),a0             	| [$140e: ld   hl,($8052)]

	move.b	(-0x03,a2),d0                   	| [$1411: ld   a,(ix-$03)]
	sub.b	d6,d0                            	| [$1414: sub  l]
	cmp.b	#0x0B,d0                         	| [$1415: cp   $0B]
	jcc	l_1423                             	| [$1417: jr   nc,$1423]
	move.b	d0,d2                           	| [$1419: ld   c,a]
	move.b	(-0x01,a2),d0                   	| [$141a: ld   a,(ix-$01)]
	sub.b	d5,d0                            	| [$141d: sub  h]
	move.b	d0,d3                           	| [$1420: ld   d,a]
	cmp.b	#0x0B,d0                         	| [$141e: cp   $0B]
	jcs	l_142c                             	| [$1421: jr   c,$142C]
l_1423:
	move.w	#0x0020,d3                      	| [$1423: ld   de,$0020]
l_1426:
	add.w	d3,a2                            	| [$1426: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_140e                             	| [$1428: djnz $140E]
	jbsr	osd_enable_interrupts   | ei
	rts                                    	| [$142b: ret]

l_142c:

	move.l	a2,a0                        	| [$142c: push ix]
	                        	| [$142e: pop  hl]
	lea	pointer_8002(a6),a3                      	| [$142f: ld   iy,$8002]
	move.b	#0x06,d4                        	| [$1433: ld   e,$06]
l_1435:
	move.b	(0x00,a3),d0                    	| [$1435: ld   a,(iy+$00)]
	cmp.b	d6,d0                            	| [$1438: cp   l]
	jne	l_1441                             	| [$1439: jr   nz,$1441]
	move.b	(0x01,a3),d0                    	| [$143b: ld   a,(iy+$01)]
	cmp.b	d5,d0                            	| [$143e: cp   h]
	jeq	l_1423                             	| [$143f: jr   z,$1423]
l_1441:
	addq.w	#2,a3                           	| [$1441: inc  iy]
	                           	| [$1443: inc  iy]
	subq.b	#1,d4                           	| [$1445: dec  e]
	jne	l_1435                             	| [$1446: jr   nz,$1435]
	move.b	#0x06,d4                        	| [$1448: ld   e,$06]
l_144a:
	subq.w	#2,a3                           	| [$144a: dec  iy]
	                           	| [$144c: dec  iy]
	move.b	(0x00,a3),d0                    	| [$144e: ld   a,(iy+$00)]
	or.b	(0x01,a3),d0                      	| [$1451: or   (iy+$01)]
	jeq	l_1466                             	| [$1454: jr   z,$1466]
	subq.b	#1,d4                           	| [$1456: dec  e]
	jne	l_144a                             	| [$1457: jr   nz,$144A]
	move.w	#-0x0b,d3                       	| [$1459: ld   de,$FFF5] [uncovered]
	add.w	d3,a2                            	| [$145c: add  ix,de] [uncovered]
	jbsr	l_1697                            	| [$145e: call $1697] [uncovered]
	move.w	#0x002B,d3                      	| [$1461: ld   de,$002B] [uncovered]
	jra	l_1426                             	| [$1464: jr   $1426] [uncovered]

l_1466:
	move.b	d6,(0x00,a3)                    	| [$1466: ld   (iy+$00),l]
	move.b	d5,(0x01,a3)                    	| [$1469: ld   (iy+$01),h]
	move.b	d3,d0                           	| [$146c: ld   a,d]
	add.b	d0,d0                            	| [$146d: add  a,a]
	add.b	d3,d0                            	| [$146e: add  a,d]
	add.b	d0,d0                            	| [$146f: add  a,a]
	add.b	d0,d0                            	| [$1470: add  a,a]
	add.b	d0,d0                            	| [$1471: add  a,a]
	move.b	d0,d3                           	| [$1472: ld   d,a]
	move.b	l_824A(a6),d0                   	| [$1473: ld   a,($824A)]
	sub.b	d3,d0                            	| [$1476: sub  d]
	move.b	d0,(0x03,a2)                    	| [$1477: ld   (ix+$03),a]
	move.b	d2,d0                           	| [$147a: ld   a,c]
	add.b	d0,d0                            	| [$147b: add  a,a]
	add.b	d2,d0                            	| [$147c: add  a,c]
	add.b	d0,d0                            	| [$147d: add  a,a]
	add.b	d0,d0                            	| [$147e: add  a,a]
	add.b	d0,d0                            	| [$147f: add  a,a]
	clr.w	d3                               	| [$1481: ld   d,$00]
	move.b	d0,d3                           	| [$1480: ld   e,a]
	LOAD_WORD	value16_8248(a6),d5             	| [$1483: ld   hl,($8248)]

	add.w	d3,d5                            	| [$1486: add  hl,de]
	LOAD_D5D6_FROM_D5_16
	move.b	d5,(0x00,a2)                    	| [$1487: ld   (ix+$00),h]
	move.b	d6,(0x01,a2)                    	| [$148a: ld   (ix+$01),l]
	                         	| [$148d: xor  a]
	clr.b	d0                               	| [$148d: xor  a]
	move.b	d0,(-0x04,a2)                   	| [$148e: ld   (ix-$04),a]
	move.b	d0,(-0x06,a2)                   	| [$1491: ld   (ix-$06),a]
	jra	l_1423                             	| [$1494: jp   $1423]

l_1497:

	move.w	d5,-(sp)                        	| [$1497: push hl]
	move.w	d0,-(sp)                        	| [$1498: push af]
	move.b	l_804D(a6),d0                   	| [$1499: ld   a,($804D)]
	move.b	d0,d6                           	| [$149c: ld   l,a]
	move.b	l_804F(a6),d0                   	| [$149d: ld   a,($804F)]
	neg.b	d0                               	| [$14a0: neg]
	move.b	d0,d5                           	| [$14a2: ld   h,a]
	move.b	value16_8050(a6),d0                   	| [$14a3: ld   a,($8050)]
	add.b	d6,d0                            	| [$14a6: add  a,l]
	and.b	#0xF8,d0                         	| [$14a7: and  $F8]
	sub.b	#0x10,d0                         	| [$14a9: sub  $10]
	ror.b	#3,d0                            	| [$14ab: rrca] * 3
	move.b	d0,d6                           	| [$14ae: ld   l,a]
	move.b	l_8051(a6),d0                   	| [$14af: ld   a,($8051)]
	add.b	d5,d0                            	| [$14b2: add  a,h]
	move.b	#0x21,d5                        	| [$14b3: ld   h,$21]
	CLEAR_XC_FLAGS
	roxl.b	#1,d0                            	| [$14b5: rlca]
	roxl.b	#1,d5                           	| [$14b6: rl   h]
	CLEAR_XC_FLAGS
	roxl.b	#1,d0                            	| [$14b8: rlca]
	roxl.b	#1,d5                           	| [$14b9: rl   h]
	and.b	#0xE0,d0                         	| [$14bb: and  $E0]
	or.b	d6,d0                             	| [$14bd: or   l]
	move.b	d0,d6                           	| [$14be: ld   l,a]
	LOAD_D5_16_FROM_D5D6
	STORE_WORD	d5,pointer_8056(a6)            	| [$14bf: ld   ($8056),hl]
	move.w	(sp)+,d0                        	| [$14c2: pop  af]
	move.w	(sp)+,d5                        	| [$14c3: pop  hl]
	rts                                    	| [$14c4: ret]

l_14c5:
	                                    	| [$14c5: nop]

	move.l	a0,-(sp)                        	| [$14c6: push hl]
	movem.w	d3/d4,-(sp)                    	| [$14c7: push de]
	move.l	a1,-(sp)                        	| [$14c7: push de]
	movem.w	d1/d2,-(sp)                    	| [$14c8: push bc]
	move.w	d0,-(sp)                        	| [$14c9: push af]
	move.b	l_82AA(a6),d0                   	| [$14ca: ld   a,($82AA)]
	                               	| [$14cd: and  a]
	jne	l_14d7                             	| [$14ce: jr   nz,$14D7]
	lea	l_8024(a6),a0                      	| [$14d0: ld   hl,$8024] [uncovered]
	move.b	#0xFF,(a0)                      	| [$14d3: ld   (hl),$FF] [uncovered]
	jra	l_1513                             	| [$14d5: jr   $1513] [uncovered]

l_14d7:
	lea	l_82AC(a6),a0                      	| [$14d7: ld   hl,$82AC]
	move.b	p1_a000(a6),d0                  	| [$14da: ld   a,(p1_a000)]
	move.b	d0,d1                           	| [$14dd: ld   b,a]
	CLEAR_XC_FLAGS
	roxr.b	#1,d0                           	| [$14de: rra]
	move.b	(a0),d7
	roxl.b	#1,d7                         	| [$14df: rl   (hl)]
	move.b	d7,(a0)+                           	| [$14e1: inc  hl]
	roxl.b	#1,d1                           	| [$14e2: rl   b]
	move.b	(a0),d7                         	| [$14e4: rl   (hl)]
	roxl.b	#1,d7                           	| [$14e6: inc  hl]
	move.b	d7,(a0)+
	move.b	p2_a080(a6),d0            	| [$14e7: ld   a,(watchdog_a080)]
	roxl.b	#1,d0                           	| [$14ea: rla]
	move.b	(a0),d7                         	| [$14eb: rl   (hl)]
	roxl.b	#1,d7
	move.b	d7,(a0)+
	move.b	(a0),d0                         	| [$14ed: ld   a,(hl)]
	
	and.b	#0x0F,d0                         	| [$14ee: and  $0F]
	cmp.b	#0x0C,d0                         	| [$14f0: cp   $0C]
	bne.b	0f                               	| [...]
	jbsr	l_1518                            	| [$14f2: call z,$1518]
0:
	                           	| [$14f5: dec  hl]
	move.b	-(a0),d0                         	| [$14f6: ld   a,(hl)]
	and.b	#0x0F,d0                         	| [$14f7: and  $0F]
	cmp.b	#0x0C,d0                         	| [$14f9: cp   $0C]
	bne.b	0f                               	| [...]
	jbsr	l_1518                            	| [$14fb: call z,$1518]
0:
	                           	| [$14fe: dec  hl]
	move.b	-(a0),d0                         	| [$14ff: ld   a,(hl)]
	and.b	#0x0F,d0                         	| [$1500: and  $0F]
	move.b	#0x01,d1                        	| [$1502: ld   b,$01]
	cmp.b	#0x0C,d0                         	| [$1504: cp   $0C]
	jne	l_1513                             	| [$1506: jr   nz,$1513]
	move.b	l_89F6(a6),d0                   	| [$1508: ld   a,($89F6)] [uncovered]
	bset.b	#6,d0                           	| [$150b: set  6,a] [uncovered]
	move.b	d0,l_89F6(a6)                   	| [$150d: ld   ($89F6),a] [uncovered]
	jbsr	l_152a                            	| [$1510: call $152A] [uncovered]
l_1513:
	move.w	(sp)+,d0                        	| [$1513: pop  af]
	movem.w	(sp)+,d1/d2                    	| [$1514: pop  bc]
	move.l	(sp)+,a1                        	| [$1515: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$1515: pop  de]
	move.l	(sp)+,a0                        	| [$1516: pop  hl]
	rts                                    	| [$1517: ret]

l_1518:
	exg	a1,a0                              	| [$1518: ex   de,hl]
	lea	l_82A8(a6),a0                      	| [$1519: ld   hl,$82A8]
	addq.b	#1,(a0)                         	| [$151c: inc  (hl)]
	addq.w	#1,a0                           	| [$151d: inc  hl]
	addq.b	#1,(a0)                         	| [$151e: inc  (hl)]
	btst.b	#0,(a0)                         	| [$151f: bit  0,(hl)]
	addq.w	#1,a0                           	| [$1521: inc  hl]
	jeq	l_1525                             	| [$1522: jr   z,$1525]
	addq.w	#1,a0                           	| [$1524: inc  hl]
l_1525:
	move.b	(a0),d1                         	| [$1525: ld   b,(hl)]
	exg	a1,a0                              	| [$1526: ex   de,hl]
	move.b	d1,d0                           	| [$1527: ld   a,b]
	                               	| [$1528: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1529: ret  z] [...]
0:
l_152a:
	exg	a1,a0                              	| [$152a: ex   de,hl]
	lea	l_8024(a6),a0                      	| [$152b: ld   hl,$8024]
l_152e:
	addq.b	#1,(a0)                         	| [$152e: inc  (hl)]
	jne	l_1532                             	| [$152f: jr   nz,$1532]
	subq.b	#1,(a0)                         	| [$1531: dec  (hl)] [uncovered]
l_1532:
	subq.b	#1,d1                           	| [...]
	jne	l_152e                             	| [$1532: djnz $152E]
	exg	a1,a0                              	| [$1534: ex   de,hl]
	move.b	l_8021(a6),d0                   	| [$1535: ld   a,($8021)]
	                               	| [$1538: and  a]
	jeq	l_1544                             	| [$1539: jr   z,$1544]
	move.b	l_8020(a6),d0                   	| [$153b: ld   a,($8020)]
	cmp.b	#0x01,d0                         	| [$153e: cp   $01]
	bne.b	0f                               	| [...]
	jbsr	l_1ed2                            	| [$1540: call z,$1ED2]
0:
	rts                                    	| [$1543: ret]

l_1544:
	lea	l_89F4(a6),a0                      	| [$1544: ld   hl,$89F4]
	move.b	d0,(a0)                         	| [$1547: ld   (hl),a]
	addq.w	#1,a0                           	| [$1548: inc  hl]
	move.b	d0,(a0)                         	| [$1549: ld   (hl),a]
	jra	l_06ab                             	| [$154a: jp   $06AB]

l_154d:
	move.b	l_82A8(a6),d0                   	| [$154d: ld   a,($82A8)]
	                               	| [$1550: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1551: ret  z] [...]
0:

	move.l	a0,-(sp)                        	| [$1552: push hl]
	movem.w	d3/d4,-(sp)                    	| [$1553: push de]
	move.l	a1,-(sp)                        	| [$1553: push de]
	movem.w	d1/d2,-(sp)                    	| [$1554: push bc]
	move.l	a4,-(sp)                        	| [$1554: push bc]
	lea	l_82AF(a6),a0                      	| [$1555: ld   hl,$82AF]
	lea	l_A187(a6),a1                      	| [$1558: ld   de,$A187]
	move.b	(a0),d0                         	| [$155b: ld   a,(hl)]
	addq.w	#1,a0                           	| [$155c: inc  hl]
	tst.b	d0                               	| [$155d: and  a]
	jne	l_156b                             	| [$155e: jr   nz,$156B]
	CLEAR_XC_FLAGS                         	| [$1560: xor  a]
	clr.b	d0                               	| [$1560: xor  a]
	move.b	d0,(a0)                         	| [$1561: ld   (hl),a]
	addq.b	#1,d0                           	| [$1562: inc  a]
	move.b	d0,(a1)                         	| [$1563: ld   (de),a]
	subq.w	#1,a0                           	| [$1564: dec  hl]
	move.b	#0x01,(a0)                      	| [$1565: ld   (hl),$01]
l_1567:
	move.l	(sp)+,a4                        	| [$1567: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$1567: pop  bc]
	move.l	(sp)+,a1                        	| [$1568: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$1568: pop  de]
	move.l	(sp)+,a0                        	| [$1569: pop  hl]
	rts                                    	| [$156a: ret]

l_156b:
	addq.b	#1,(a0)                         	| [$156b: inc  (hl)]
	move.b	(a0),d0                         	| [$156c: ld   a,(hl)]
	cmp.b	#0x10,d0                         	| [$156d: cp   $10]
	jne	l_157f                             	| [$156f: jr   nz,$157F]
	subq.w	#1,a0                           	| [$1571: dec  hl]
	clr.b	(a0)                             	| [$1572: ld   (hl),$00]
	lea	l_82A8(a6),a0                      	| [$1574: ld   hl,$82A8]
	subq.b	#1,(a0)                         	| [$1577: dec  (hl)]
	lea	l_89F6(a6),a0                      	| [$1578: ld   hl,$89F6]
	move.b	#0x80,(a0)                      	| [$157b: ld   (hl),$80]
	jra	l_1567                             	| [$157d: jr   $1567]

l_157f:
	sub.b	#0x08,d0                         	| [$157f: sub  $08]
	jne	l_1567                             	| [$1581: jr   nz,$1567]
	move.b	d0,(a1)                         	| [$1583: ld   (de),a]
	jra	l_1567                             	| [$1584: jr   $1567]

l_1586:
	lea	l_8068(a6),a2                      	| [$1586: ld   ix,$8068]
	move.b	(0x11,a2),d6                    	| [$158a: ld   l,(ix+$11)]
	move.b	(0x12,a2),d5                    	| [$158d: ld   h,(ix+$12)]
	LOAD_D5_16_FROM_D5D6
	move.b	(0x05,a2),d0                    	| [$1590: ld   a,(ix+$05)]
	add.b	#0x0C,d0                         	| [$1593: add  a,$0C]
	cmp.b	#0x19,d0                         	| [$1595: cp   $19]
	jcs	l_15a1                             	| [$1597: jr   c,$15A1]
	btst.b	#7,d0                           	| [$1599: bit  7,a]
	jne	l_15a0                             	| [$159b: jr   nz,$15A0]
	addq.w	#1,a0                           	| [$159d: inc  hl]
	jra	l_15a1                             	| [$159e: jr   $15A1]

l_15a0:
	subq.w	#1,a0                           	| [$15a0: dec  hl]
l_15a1:
	move.b	(0x07,a2),d0                    	| [$15a1: ld   a,(ix+$07)]
	move.w	#0x0020,d3                      	| [$15a4: ld   de,$0020]
	add.b	#0x0C,d0                         	| [$15a7: add  a,$0C]
	cmp.b	#0x19,d0                         	| [$15a9: cp   $19]
	jcs	l_15b7                             	| [$15ab: jr   c,$15B7]
	btst.b	#7,d0                           	| [$15ad: bit  7,a]
	jeq	l_15b4                             	| [$15af: jr   z,$15B4]
	add.w	d3,a0                            	| [$15b1: add  hl,de]
	jra	l_15b7                             	| [$15b2: jr   $15B7]

l_15b4:
	                               	| [$15b4: and  a]
	sub.w	d3,d5                            	| [$15b5: sbc  hl,de]
l_15b7:
	LOAD_A0_FROM_D5_16
	exg	a0,a1                              	| [$15b7: ex   de,hl]
	LOAD_POINTER	pointer_8992(a6),a0             	| [$15b8: ld   hl,($8992)]

	move.b	#0x0A,d1                        	| [$15bb: ld   b,$0A]
l_15bd:
	move.b	d4,d0                           	| [$15bd: ld   a,e]
	cmp.b	(a0),d0                          	| [$15be: cp   (hl)]
	addq.w	#1,a0                           	| [$15bf: inc  hl]
	jne	l_15c4                             	| [$15c0: jr   nz,$15C4]
	move.b	d3,d0                           	| [$15c2: ld   a,d]
	cmp.b	(a0),d0                          	| [$15c3: cp   (hl)]
l_15c4:
	addq.w	#1,a0                           	| [$15c4: inc  hl]
	jeq	l_17af                             	| [$15c5: jp   z,$17AF]
	subq.b	#1,d1                           	| [...]
	jne	l_15bd                             	| [$15c8: djnz $15BD]
	move.b	l_824C(a6),d0                   	| [$15ca: ld   a,($824C)]
	                               	| [$15cd: and  a]
	jne	l_1673                             	| [$15ce: jp   nz,$1673]
	move.b	(a1),d0                         	| [$15d1: ld   a,(de)]
	cmp.b	#0x03,d0                         	| [$15d2: cp   $03]
	jeq	l_1996                             	| [$15d4: jp   z,$1996]
l_15d7:
	lea	enemy_car_structs_8088(a6),a2      	| [$15d7: ld   ix,enemy_car_structs_8088]
	lea	l_80A8(a6),a3                      	| [$15db: ld   iy,$80A8]
	move.b	#0x07,d1                        	| [$15df: ld   b,$07]
l_15e1:
	movem.w	d1/d2,-(sp)                    	| [$15e1: push bc]
	move.l	a4,-(sp)                        	| [$15e1: push bc]

	move.l	a3,-(sp)                        	| [$15e2: push iy]
l_15e4:
	move.b	(0x13,a2),d0                    	| [$15e4: ld   a,(ix+$13)]
	                               	| [$15e7: and  a]
	jeq	l_15ef                             	| [$15e8: jr   z,$15EF]
	subq.b	#1,(0x13,a2)                    	| [$15ea: dec  (ix+$13)]
	jra	l_161b                             	| [$15ed: jr   $161B]

l_15ef:
	move.b	(0x08,a2),d0                    	| [$15ef: ld   a,(ix+$08)]
	sub.b	(0x08,a3),d0                     	| [$15f2: sub  (iy+$08)]
	move.b	d0,d6                           	| [$15f5: ld   l,a]
	move.b	(0x05,a2),d0                    	| [$15f6: ld   a,(ix+$05)]
	sub.b	(0x05,a3),d0                     	| [$15f9: sub  (iy+$05)]
	jbsr	l_16c3                            	| [$15fc: call $16C3]
	jne	l_1614                             	| [$15ff: jr   nz,$1614]
	move.b	(0x0a,a2),d0                    	| [$1601: ld   a,(ix+$0a)]
	sub.b	(0x0a,a3),d0                     	| [$1604: sub  (iy+$0a)]
	move.b	d0,d6                           	| [$1607: ld   l,a]
	move.b	(0x07,a3),d0                    	| [$1608: ld   a,(iy+$07)]
	sub.b	(0x07,a2),d0                     	| [$160b: sub  (ix+$07)]
	jbsr	l_16c3                            	| [$160e: call $16C3]
	bne.b	0f                               	| [...]
	jbsr	l_167a                            	| [$1611: call z,$167A]
0:
l_1614:
	move.w	#0x0020,d3                      	| [$1614: ld   de,$0020]
	add.w	d3,a3                            	| [$1617: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_15e4                             	| [$1619: djnz $15E4]
l_161b:
	move.w	#0x0020,d3                      	| [$161b: ld   de,$0020]
	move.l	(sp)+,a3                        	| [$161e: pop  iy]
	move.l	(sp)+,a4                        	| [$1620: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$1620: pop  bc]
	add.w	d3,a2                            	| [$1621: add  ix,de]
	add.w	d3,a3                            	| [$1623: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_15e1                             	| [$1625: djnz $15E1]
	move.b	#0x08,d2                        	| [$1627: ld   c,$08]
	lea	enemy_car_structs_8088(a6),a2      	| [$1629: ld   ix,enemy_car_structs_8088]
l_162d:
	move.b	(0x13,a2),d0                    	| [$162d: ld   a,(ix+$13)]
	                               	| [$1630: and  a]
	jne	l_166a                             	| [$1631: jr   nz,$166A]
	move.b	(0x12,a2),d5                    	| [$1633: ld   h,(ix+$12)]
	move.b	(0x11,a2),d6                    	| [$1636: ld   l,(ix+$11)]
	LOAD_D5_16_FROM_D5D6                               	| [$1661: and  a]
	move.b	(0x05,a2),d0                    	| [$1639: ld   a,(ix+$05)]
	add.b	#0x0C,d0                         	| [$163c: add  a,$0C]
	cmp.b	#0x19,d0                         	| [$163e: cp   $19]
	jcs	l_164e                             	| [$1640: jr   c,$164E]
	btst.b	#7,d0                           	| [$1642: bit  7,a]
	jne	l_164b                             	| [$1644: jr   nz,$164B]
	jbsr	increase_and_wrap_d5w_0d69                            	| [$1646: call $0D69]
	jra	l_164e                             	| [$1649: jr   $164E]

l_164b:
	jbsr	decrease_and_wrap_d5w_0d5f                            	| [$164b: call $0D5F]
l_164e:
	move.b	(0x07,a2),d0                    	| [$164e: ld   a,(ix+$07)]
	move.w	#0x0020,d3                      	| [$1651: ld   de,$0020]
	add.b	#0x0C,d0                         	| [$1654: add  a,$0C]
	cmp.b	#0x19,d0                         	| [$1656: cp   $19]
	jcs	l_1664                             	| [$1658: jr   c,$1664]
	btst.b	#7,d0                           	| [$165a: bit  7,a]
	jeq	l_1661                             	| [$165c: jr   z,$1661]
	add.w	d3,d5                            	| [$165e: add  hl,de]
	jra	l_1664                             	| [$165f: jr   $1664]

l_1661:
	sub.w	d3,d5                            	| [$1662: sbc  hl,de]
l_1664:
	LOAD_A0_FROM_D5_16
	move.b	(a0),d0                         	| [$1664: ld   a,(hl)]
	cmp.b	#0x03,d0                         	| [$1665: cp   $03]
	bne.b	0f                               	| [...]
	jbsr	l_1697                            	| [$1667: call z,$1697]
0:
l_166a:
	move.w	#0x0020,d3                      	| [$166a: ld   de,$0020]
	add.w	d3,a2                            	| [$166d: add  ix,de]
	subq.b	#1,d2                           	| [$166f: dec  c]
	jne	l_162d                             	| [$1670: jp   nz,$162D]
l_1673:
	lea	l_8022(a6),a0                      	| [$1673: ld   hl,$8022]
	addq.b	#1,(a0)                         	| [$1676: inc  (hl)]
	jra	l_0a7a                             	| [$1677: jp   $0A7A]

l_167a:

	move.l	a2,-(sp)                        	| [$167a: push ix]

	move.l	a3,a2                        	| [$167c: push iy]
	                        	| [$167e: pop  ix]
	jbsr	l_1697                            	| [$1680: call $1697]
	move.l	(sp)+,a2                        	| [$1683: pop  ix]
	move.b	(0x02,a3),d0                    	| [$1685: ld   a,(iy+$02)]
	move.b	(0x02,a2),d7
	eor.b	d0,d7                            	| [$1688: xor  (ix+$02)]
	move.b	(0x02,a2),d0                    	| [$168d: ld   a,(ix+$02)]
	btst.b	#7,d7                           	| [$168b: bit  7,a]
	jeq	l_1694                             	| [$1690: jr   z,$1694]
	neg.b	d0                               	| [$1692: neg]
l_1694:
	move.b	d0,(0x02,a2)                    	| [$1694: ld   (ix+$02),a]
l_1697:

	move.l	a0,-(sp)                        	| [$1697: push hl]
	move.b	#0xE0,(0x00,a2)                 	| [$1698: ld   (ix+$00),$E0]
	move.b	#0x32,(0x13,a2)                 	| [$169c: ld   (ix+$13),$32]
	move.b	#0x1,d5                      	| [$16a0: ld   hl,$0100]
	moveq	#0,d6                      	| [$16a0: ld   hl,$0100]
	btst.b	#7,(0x02,a2)                    	| [$16a3: bit  7,(ix+$02)]
	jne	l_16ab                             	| [$16a7: jr   nz,$16AB]
	st.b	d5                                	| [$16a9: ld   h,$FF]
l_16ab:
	move.b	d5,(0x02,a2)                    	| [$16ab: ld   (ix+$02),h]
	move.b	d6,(0x01,a2)                    	| [$16ae: ld   (ix+$01),l]
	move.b	#0x08,d1                        	| [$16b1: ld   b,$08]

	move.w	iyl,-(sp)                        	| [$16b3: push iy]
	clr.b	iyl                        	| [$16b5: ld   iyl,$00]
l_16b8:
	jbsr	l_00f3                            	| [$16b8: call $00F3]
	subq.b	#1,d1                           	| [...]
	jne	l_16b8                             	| [$16bb: djnz $16B8]
	move.w	(sp)+,iyl                        	| [$16bd: pop  iy]
	move.b	#0x01,d1                        	| [$16bf: ld   b,$01]
	move.l	(sp)+,a0                        	| [$16c1: pop  hl]
	rts                                    	| [$16c2: ret]

l_16c3:
	subq.b	#2,d6                           	| [$16c3: dec  l]
	                           	| [$16c4: dec  l]
	add.b	#0x23,d0                         	| [$16c5: add  a,$23]
l_16c7:
	btst.b	#7,d0                           	| [$16c7: bit  7,a]
	jne	l_16d0                             	| [$16c9: jr   nz,$16D0]
	addq.b	#1,d6                           	| [$16cb: inc  l]
	sub.b	#0x18,d0                         	| [$16cc: sub  $18]
	jra	l_16c7                             	| [$16ce: jr   $16C7]

l_16d0:
	move.b	d6,d0                           	| [$16d0: ld   a,l]
	                               	| [$16d1: and  a]
	rts                                    	| [$16d2: ret]

l_16d3:
	move.b	#0x03,d0                        	| [$16d3: ld   a,$03]
	move.b	d0,l_8020(a6)                   	| [$16d5: ld   ($8020),a]
	move.b	#0xEC,d0                        	| [$16d8: ld   a,$EC]
	move.b	d0,l_8014(a6)                   	| [$16da: ld   ($8014),a]
	lea	l_89F4(a6),a0                      	| [$16dd: ld   hl,$89F4]
	move.b	#0x80,(a0)                      	| [$16e0: ld   (hl),$80]
	addq.w	#1,a0                           	| [$16e2: inc  hl]
	move.b	#0x08,(a0)                      	| [$16e3: ld   (hl),$08]
	jbsr	l_176e                            	| [$16e5: call $176E]
	move.b	l_8021(a6),d0                   	| [$16e8: ld   a,($8021)]
	                               	| [$16eb: and  a]
	jeq	l_068e                             	| [$16ec: jp   z,$068E]
	LOAD_POINTER	pointer_8988(a6),a0             	| [$16ef: ld   hl,($8988)]

	subq.b	#1,(a0)                         	| [$16f2: dec  (hl)]
	jeq	l_19b9                             	| [$16f3: jp   z,$19B9]
l_16f6:
	lea	l_81AA(a6),a0                      	| [$16f6: ld   hl,$81AA]
	move.b	(a0),d0                         	| [$16f9: ld   a,(hl)]
	move.b	d0,d1                           	| [$16fa: ld   b,a]
	addq.w	#1,a0                           	| [$16fb: inc  hl]
	and.b	(a0),d0                          	| [$16fc: and  (hl)]
	jeq	l_172a                             	| [$16fd: jp   z,$172A]
	move.b	d1,d0                           	| [$1700: ld   a,b] [uncovered]
	cmp.b	#0x02,d0                         	| [$1701: cp   $02] [uncovered]
	jeq	l_1710                             	| [$1703: jr   z,$1710] [uncovered]
	jbsr	l_1741                            	| [$1705: call $1741] [uncovered]
	move.b	#0x01,d0                        	| [$1708: ld   a,$01] [uncovered]
	move.b	d0,l_81B7(a6)                   	| [$170a: ld   ($81B7),a] [uncovered]
	jra	l_172a                             	| [$170d: jp   $172A] [uncovered]

l_172a:
	LOAD_POINTER	pointer_898a(a6),a0             	| [$172a: ld   hl,($898A)]

	move.b	(a0),d0                         	| [$172d: ld   a,(hl)]
	and.b	#0x03,d0                         	| [$172e: and  $03]
	jeq	l_07bd                             	| [$1730: jp   z,$07BD]
	CLEAR_XC_FLAGS                         	| [$1733: xor  a]
	clr.b	d0                               	| [$1733: xor  a]
	move.b	d0,l_824B(a6)                   	| [$1734: ld   ($824B),a]
l_1737:
	move.b	l_824B(a6),d0                   	| [$1737: ld   a,($824B)]
	cmp.b	#0x78,d0                         	| [$173a: cp   $78]
	jne	l_1737                             	| [$173c: jr   nz,$1737]
	jra	l_07e5                             	| [$173e: jp   $07E5]

l_1741:
	subq.w	#1,a0                           	| [$1741: dec  hl]
	move.b	#0x02,(a0)                      	| [$1742: ld   (hl),$02]
	subq.w	#1,a0                           	| [$1744: dec  hl]
	move.b	(a0),d0                         	| [$1745: ld   a,(hl)]
	subq.w	#1,a0                           	| [$1746: dec  hl]
	move.b	d0,(a0)                         	| [$1747: ld   (hl),a]
	lea	l_1F00(a6),a0                      	| [$1748: ld   hl,$1F00]
	lea	pointer_8988(a6),a1                      	| [$174b: ld   de,$8988]
	move.w	#0x0018,d1                      	| [$174e: ld   bc,$0018]
	jbsr	ldir                              	| [$1751: ldir]
	rts                                    	| [$1753: ret]

l_176e:
	move.b	#0x20,d0                        	| [$176e: ld   a,$20]
	sub.b	d1,d0                            	| [$1770: sub  b]
	sub.b	d1,d0                            	| [$1771: sub  b]
	move.b	d0,d6                           	| [$1772: ld   l,a]
	move.b	#0x80,d5                        	| [$1773: ld   h,$80]
	LOAD_A0_FROM_D5D6
	move.b	#0xEC,(a0)                      	| [$1775: ld   (hl),$EC]
	move.b	(0x0c,a2),d0                    	| [$1777: ld   a,(ix+$0c)]
	sub.b	#0x08,d0                         	| [$177a: sub  $08]
	move.b	d0,d1                           	| [$177c: ld   b,a]
	move.b	(0x0e,a2),d0                    	| [$177d: ld   a,(ix+$0e)]
	add.b	#0x08,d0                         	| [$1780: add  a,$08]
	move.b	d0,d2                           	| [$1782: ld   c,a]
	jbsr	l_0e7f                            	| [$1783: call $0E7F]
	move.b	d5,d3                           	| [$1786: ld   d,h]
	move.b	d6,d4                           	| [$1787: ld   e,l]
	bset.b	#3,d5                           	| [$1788: set  3,h]
	move.b	#0xB4,d0                        	| [$178a: ld   a,$B4]
	move.b	#0x03,d2                        	| [$178c: ld   c,$03]
l_178e:

	move.l	a0,-(sp)                        	| [$178e: push hl]
	movem.w	d3/d4/d5/d6,-(sp)                    	| [$178f: push de]
	move.l	a1,-(sp)                        	| [$178f: push de]
	move.b	#0x03,d1                        	| [$1790: ld   b,$03]
l_1792:
	move.b	d0,(a1)                         	| [$1792: ld   (de),a]
	move.b	#0x46,(a0)                      	| [$1793: ld   (hl),$46]
	jbsr	advance_hl_and_de_0e5d                            	| [$1795: call $0E5D]
	addq.b	#1,d0                           	| [$1798: inc  a]
	subq.b	#1,d1                           	| [...]
	jne	l_1792                             	| [$1799: djnz $1792]
	move.l	(sp)+,a1                        	| [$179b: pop  de]
	movem.w	(sp)+,d3/d4/d5/d6                   	| [$179b: pop  de]
	move.l	(sp)+,a0                        	| [$179c: pop  hl]
	jbsr	advance_hl_and_de_0e6c                            	| [$179d: call $0E6C]
	subq.b	#1,d2                           	| [$17a0: dec  c]
	jne	l_178e                             	| [$17a1: jr   nz,$178E]
l_17a3:
	LOAD_POINTER	pointer_8998(a6),a0             	| [$17a3: ld   hl,($8998)]

	move.b	#0x04,d1                        	| [$17a6: ld   b,$04]
	move.b	#0x66,d0                        	| [$17a8: ld   a,$66]
l_17aa:
	move.b	d0,(a0)                         	| [$17aa: ld   (hl),a]
	addq.w	#1,a0                           	| [$17ab: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_17aa                             	| [$17ac: djnz $17AA]
	rts                                    	| [$17ae: ret]

l_17af:

	move.l	a0,-(sp)                        	| [$17af: push hl]
	                         	| [$17b0: xor  a]
	clr.b	d0                               	| [$17b0: xor  a]
	move.b	d0,(a1)                         	| [$17b1: ld   (de),a]
	lea	l_89F4(a6),a0                      	| [$17b3: ld   hl,$89F4]
	move.b	#0x04,d2                        	| [$17b6: ld   c,$04]
	subq.b	#1,d1                           	| [$17b2: dec  b]
	jne	l_17c1                             	| [$17b8: jr   nz,$17C1]
	move.b	#0x08,d2                        	| [$17ba: ld   c,$08]
	move.b	#0x01,d0                        	| [$17bc: ld   a,$01]
	move.b	d0,l_8023(a6)                   	| [$17be: ld   ($8023),a]
l_17c1:
	move.b	(a0),d0                         	| [$17c1: ld   a,(hl)]
	or.b	d2,d0                             	| [$17c2: or   c]
	move.b	d0,(a0)                         	| [$17c3: ld   (hl),a]
	move.l	(sp)+,a0                        	| [$17c4: pop  hl]
	                         	| [$17c5: xor  a]
	clr.b	d0                               	| [$17c5: xor  a]
	                           	| [$17c6: dec  hl]
	move.b	d0,-(a0)                         	| [$17c7: ld   (hl),a]
	                           	| [$17c8: dec  hl]
	move.b	d0,-(a0)                         	| [$17c9: ld   (hl),a]
	move.w	#0x0020,d3                      	| [$17ca: ld   de,$0020]
	add.w	d3,a0                            	| [$17cd: add  hl,de]
	subq.b	#1,d0                           	| [$17ce: dec  a]
	move.b	(a0),d4                         	| [$17cf: ld   e,(hl)]
	move.b	d0,(a0)                         	| [$17d0: ld   (hl),a]
	addq.w	#1,a0                           	| [$17d1: inc  hl]
	move.b	(a0),d3                         	| [$17d2: ld   d,(hl)]
	move.b	d0,(a0)                         	| [$17d3: ld   (hl),a]
	jbsr	l_127d                            	| [$17d4: call $127D]
	jbsr	l_12af                            	| [$17d7: call $12AF]
	move.b	(0x05,a2),d0                    	| [$17da: ld   a,(ix+$05)]
	add.b	#0x0C,d0                         	| [$17dd: add  a,$0C]
	cmp.b	#0x19,d0                         	| [$17df: cp   $19]
	jcs	l_17eb                             	| [$17e1: jr   c,$17EB]
	sub.b	#0x18,d0                         	| [$17e3: sub  $18]
	cmp.b	#0x1E,d0                         	| [$17e5: cp   $1E]
	jcs	l_17eb                             	| [$17e7: jr   c,$17EB]
	add.b	#0x30,d0                         	| [$17e9: add  a,$30]
l_17eb:
	sub.b	#0x0C,d0                         	| [$17eb: sub  $0C]
	neg.b	d0                               	| [$17ed: neg]
	add.b	(0x0c,a2),d0                     	| [$17ef: add  a,(ix+$0c)]
	move.b	d0,d1                           	| [$17f2: ld   b,a]
	move.b	(0x07,a2),d0                    	| [$17f3: ld   a,(ix+$07)]
	add.b	#0x0C,d0                         	| [$17f6: add  a,$0C]
	cmp.b	#0x19,d0                         	| [$17f8: cp   $19]
	jcs	l_1804                             	| [$17fa: jr   c,$1804]
	sub.b	#0x18,d0                         	| [$17fc: sub  $18]
	cmp.b	#0x1E,d0                         	| [$17fe: cp   $1E]
	jcs	l_1804                             	| [$1800: jr   c,$1804]
	add.b	#0x30,d0                         	| [$1802: add  a,$30]
l_1804:
	sub.b	#0x0C,d0                         	| [$1804: sub  $0C]
	neg.b	d0                               	| [$1806: neg]
	add.b	(0x0e,a2),d0                     	| [$1808: add  a,(ix+$0e)]
	move.b	d0,d2                           	| [$180b: ld   c,a]
	movem.w	d1/d2,-(sp)                    	| [$180c: push bc]
	move.l	a4,-(sp)                        	| [$180c: push bc]
	jbsr	l_0e7f                            	| [$180d: call $0E7F]
	move.b	#0x81,(a0)                      	| [$1810: ld   (hl),$81]
	move.l	(sp)+,a4                        	| [$1812: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$1812: pop  bc]

	move.l	a0,-(sp)                        	| [$1813: push hl]
	movem.w	d1/d2,-(sp)                    	| [$1814: push bc]
	move.l	a4,-(sp)                        	| [$1814: push bc]
	move.b	d1,d0                           	| [$1815: ld   a,b]
	sub.b	#0x08,d0                         	| [$1816: sub  $08]
	move.b	d0,d1                           	| [$1818: ld   b,a]
	movem.w	d1/d2,-(sp)                    	| [$1819: push bc]
	move.l	a4,-(sp)                        	| [$1819: push bc]
	jbsr	l_0e7f                            	| [$181a: call $0E7F]
	move.b	#0x81,(a0)                      	| [$181d: ld   (hl),$81]
	move.l	(sp)+,a4                        	| [$181f: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$181f: pop  bc]
	move.b	d2,d0                           	| [$1820: ld   a,c]
	sub.b	#0x08,d0                         	| [$1821: sub  $08]
	move.b	d0,d2                           	| [$1823: ld   c,a]
	movem.w	d1/d2,-(sp)                    	| [$1824: push bc]
	move.l	a4,-(sp)                        	| [$1824: push bc]
	jbsr	l_0e7f                            	| [$1825: call $0E7F]
	move.b	#0x81,(a0)                      	| [$1828: ld   (hl),$81]
	move.l	(sp)+,a4                        	| [$182a: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$182a: pop  bc]
	move.b	d2,d0                           	| [$182b: ld   a,c]
	move.l	(sp)+,a4                        	| [$182c: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$182c: pop  bc]
	move.b	d0,d2                           	| [$182d: ld   c,a]
	jbsr	l_0e7f                            	| [$182e: call $0E7F]
	move.b	#0x81,(a0)                      	| [$1831: ld   (hl),$81]
	move.l	(sp)+,a0                        	| [$1833: pop  hl]
	move.b	d6,d0                           	| [$1834: ld   a,l]
	move.w	#0x0020,d3                      	| [$1837: ld   de,$0020]
	and.b	#0x1F,d0                         	| [$1835: and  $1F]
	jne	l_183d                             	| [$183a: jr   nz,$183D]
	add.w	d3,a0                            	| [$183c: add  hl,de]
l_183d:
	subq.w	#1,a0                           	| [$183d: dec  hl]
	move.b	l_8250(a6),d0                   	| [$183e: ld   a,($8250)]
	addq.b	#1,d0                           	| [$1841: inc  a]
	move.b	d0,l_8250(a6)                   	| [$1842: ld   ($8250),a]
	cmp.b	#0x0A,d0                         	| [$1845: cp   $0A]
	jne	l_184b                             	| [$1847: jr   nz,$184B]
	move.b	#0x01,d0                        	| [$1849: ld   a,$01] [uncovered]
l_184b:
	add.b	#0x9F,d0                         	| [$184b: add  a,$9F]
	move.b	d0,(a0)                         	| [$184d: ld   (hl),a]
	* TODO write to screen?
	jbsr	l_188d                            	| [$184e: call $188D]
	jbsr	move_wrap_pointer_1988                            	| [$1851: call $1988]
	move.b	#0xAA,(a0)                      	| [$1854: ld   (hl),$AA]
	* TODO write to screen?
	jbsr	l_188d                            	| [$1856: call $188D]
	move.b	l_8250(a6),d0                   	| [$1859: ld   a,($8250)]
	cmp.b	#0x0A,d0                         	| [$185c: cp   $0A]
	jne	l_1868                             	| [$185e: jr   nz,$1868]
	jbsr	move_wrap_pointer_1988                            	| [$1860: call $1988] [uncovered]
	move.b	#0xAB,(a0)                      	| [$1863: ld   (hl),$AB] [uncovered]
	* TODO write to screen?
	jbsr	l_188d                            	| [$1865: call $188D] [uncovered]
l_1868:
	move.b	l_8023(a6),d0                   	| [$1868: ld   a,($8023)]
	                               	| [$186b: and  a]
	jeq	l_1896                             	| [$186c: jr   z,$1896]

	move.l	a0,-(sp)                        	| [$186e: push hl]
	jbsr	move_wrap_pointer_1988                            	| [$186f: call $1988]
	move.b	(a0),d0                         	| [$1872: ld   a,(hl)]
	cmp.b	#0x81,d0                         	| [$1873: cp   $81]
	jne	l_187f                             	| [$1875: jr   nz,$187F]
	move.b	#0xAC,(a0)                      	| [$1877: ld   (hl),$AC]
	* TODO write to screen?
	jbsr	l_188d                            	| [$1879: call $188D]
	move.l	(sp)+,a0                        	| [$187c: pop  hl]
	jra	l_1896                             	| [$187d: jr   $1896]

l_188d:
	add.w	#0x800,a0                           	| [$188d: set  3,h]
	bset.b	#6,(a0)                         	| [$188f: set  6,(hl)]
	bclr.b	#7,(a0)                         	| [$1891: res  7,(hl)]
	* TODO write to screen?
	sub.w	#0x800,a0                           	| [$1893: res  3,h]
	rts                                    	| [$1895: ret]

l_1896:
	LOAD_POINTER	pointer_898c(a6),a0             	| [$1896: ld   hl,($898C)]

	addq.b	#1,(a0)                         	| [$1899: inc  (hl)]
	move.b	(a0),d0                         	| [$189a: ld   a,(hl)]
	cmp.b	#0x0A,d0                         	| [$189b: cp   $0A]
	jne	l_18a4                             	| [$189d: jr   nz,$18A4]
	move.b	#0x03,d0                        	| [$189f: ld   a,$03]
	move.b	d0,l_8020(a6)                   	| [$18a1: ld   ($8020),a]
l_18a4:
	move.b	l_8250(a6),d0                   	| [$18a4: ld   a,($8250)]
	move.b	d0,d1                           	| [$18a7: ld   b,a]
	move.b	l_8023(a6),d0                   	| [$18a8: ld   a,($8023)]
	                               	| [$18ab: and  a]
	jeq	l_18b0                             	| [$18ac: jr   z,$18B0]
	asl.b	#1,d1                            	| [$18ae: sla  b]
l_18b0:
	move.b	#0x0A,d2                        	| [$18b0: ld   c,$0A]
l_18b2:
	movem.w	d1/d2,-(sp)                    	| [$18b2: push bc]
	move.l	a4,-(sp)                        	| [$18b2: push bc]
	jbsr	l_1d6f                            	| [$18b3: call $1D6F]
	jbsr	l_1df5                            	| [$18b6: call $1DF5]
	move.l	(sp)+,a4                        	| [$18b9: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$18b9: pop  bc]
	subq.b	#1,d2                           	| [$18ba: dec  c]
	jne	l_18b2                             	| [$18bb: jr   nz,$18B2]
	subq.b	#1,d1                           	| [...]
	jne	l_18b0                             	| [$18bd: djnz $18B0]
	jbsr	l_1d6f                            	| [$18bf: call $1D6F]
	jbsr	l_190b                            	| [$18c2: call $190B]
	LOAD_POINTER	pointer_898c(a6),a0             	| [$18c5: ld   hl,($898C)]

	move.b	(a0),d0                         	| [$18c8: ld   a,(hl)]
	cmp.b	#0x0A,d0                         	| [$18c9: cp   $0A]
	jne	l_15d7                             	| [$18cb: jp   nz,$15D7]
	move.b	l_8021(a6),d0                   	| [$18ce: ld   a,($8021)]
	                               	| [$18d1: and  a]
	jeq	l_068e                             	| [$18d2: jp   z,$068E]
	jbsr	l_17a3                            	| [$18d5: call $17A3]
	lea	l_89F4(a6),a0                      	| [$18d8: ld   hl,$89F4]
	move.b	(a0),d0                         	| [$18db: ld   a,(hl)]
	and.b	#0x3F,d0                         	| [$18dc: and  $3F]
	move.b	d0,(a0)                         	| [$18de: ld   (hl),a]
	addq.w	#1,a0                           	| [$18df: inc  hl]
	move.b	#0x28,(a0)                      	| [$18e0: ld   (hl),$28]
	move.b	#0xEC,d0                        	| [$18e2: ld   a,$EC]
	move.b	d0,l_8014(a6)                   	| [$18e4: ld   ($8014),a]
	move.b	#0x03,d0                        	| [$18e7: ld   a,$03]
	move.b	d0,l_8020(a6)                   	| [$18e9: ld   ($8020),a]
	move.b	d0,l_824B(a6)                   	| [$18ec: ld   ($824B),a]
l_18ef:
	move.b	l_824B(a6),d0                   	| [$18ef: ld   a,($824B)]
	and.b	#0x3F,d0                         	| [$18f2: and  $3F]
	jne	l_18ef                             	| [$18f4: jr   nz,$18EF]
l_18f6:
	btst.b	#0,(a0)                         	| [$18f6: bit  0,(hl)]
	jeq	l_18f6                             	| [$18f8: jr   z,$18F6]
	jbsr	l_1d2d                            	| [$18fa: call $1D2D]
	move.b	#0xE0,d0                        	| [$18fd: ld   a,$E0]
	move.b	d0,l_824B(a6)                   	| [$18ff: ld   ($824B),a]
l_1902:
	move.b	l_824B(a6),d0                   	| [$1902: ld   a,($824B)]
	                               	| [$1905: and  a]
	jne	l_1902                             	| [$1906: jr   nz,$1902]
	jra	l_07bd                             	| [$1908: jp   $07BD]

l_190b:
	move.b	l_8292(a6),d0                   	| [$190b: ld   a,($8292)]
	                               	| [$190e: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$190f: ret  nz] [...]
0:
	LOAD_POINTER	pointer_898a(a6),a0             	| [$1910: ld   hl,($898A)]

	move.b	(a0),d0                         	| [$1913: ld   a,(hl)]
	subq.b	#1,d0                           	| [$1914: dec  a]
	ror.b	#2,d0                            	| [$1915: rrca] * 2
	and.b	#0x03,d0                         	| [$1917: and  $03]
	move.b	d0,d1                           	| [$1919: ld   b,a]
	addq.b	#1,d1                           	| [$191a: inc  b]
	or.b	#0x30,d0                          	| [$191b: or   $30]
	move.b	d0,l_828F(a6)                   	| [$191d: ld   ($828F),a]
	sub.b	#0x23,d0                         	| [$1920: sub  $23]
	move.b	d0,l_82B1(a6)                   	| [$1922: ld   ($82B1),a]
	move.b	#0x53,d0                        	| [$1925: ld   a,$53]
l_1927:
	add.b	#0x09,d0                         	| [$1927: add  a,$09]
	subq.b	#1,d1                           	| [...]
	jne	l_1927                             	| [$1929: djnz $1927]
	move.b	d0,l_82D6(a6)                   	| [$192b: ld   ($82D6),a]
	move.b	l_82D8(a6),d0                   	| [$192e: ld   a,($82D8)]
	move.b	d0,d3                           	| [$1931: ld   d,a]
	move.b	(a0),d0                         	| [$1932: ld   a,(hl)]
l_1933:
	cmp.b	d3,d0                            	| [$1933: cp   d]
	jcs	setup_new_level_193a                             	| [$1934: jr   c,$193A]
	subq.b	#0x04,d0                        	| [$1936: sub  $04] [uncovered]
	jra	l_1933                             	| [$1938: jr   $1933] [uncovered]

setup_new_level_193a:
	subq.b	#0x02,d0                        	| [$193a: sub  $02]
	add.b	d0,d0                            	| [$193c: add  a,a]
	add.b	d0,d0                            	| [$193d: add  a,a]
	add.b	d0,d0                            	| [$193e: add  a,a]
	move.b	d0,d6                           	| [$193f: ld   l,a]
	clr.b	d5                               	| [$1940: ld   h,$00]
	LOAD_A0_FROM_D5D6
	moveq	#0,d3
	LOAD_WORD	pointer_82d2(a6),d3             | [$1942: ld   de,($82D2)]
	add.l	d3,a0                            	| [$1946: add  hl,de]
	move.b	(a0)+,d0                         	| [$1947: ld   a,(hl)]
	move.b	d0,nb_enemy_cars_824e(a6)       	| [$1948: ld   (nb_enemy_cars_824e),a]
	                           	| [$194b: inc  hl]
	move.b	(a0)+,d0                         	| [$194c: ld   a,(hl)]
	move.b	d0,l_826E(a6)                   	| [$194d: ld   ($826E),a]
	                           	| [$1950: inc  hl]
	move.b	(a0)+,d0                         	| [$1951: ld   a,(hl)]
	move.b	d0,l_8288(a6)                   	| [$1952: ld   ($8288),a]
	                           	| [$1955: inc  hl]
	move.b	(a0)+,d0                         	| [$1956: ld   a,(hl)]
	move.b	d0,nb_rocks_8251(a6)            	| [$1957: ld   (nb_rocks_8251),a]
	                           	| [$195a: inc  hl]
	move.b	l_828A(a6),d0                   	| [$195b: ld   a,($828A)]
	move.b	d0,d1                           	| [$195e: ld   b,a]
	LOAD_POINTER	pointer_898c(a6),a1             	| [$195f: ld   de,($898C)]

	move.b	(a1),d0                         	| [$1963: ld   a,(de)]
	subq.b	#1,d1                           	| [$1964: dec  b]
	jeq	l_1978                             	| [$1965: jr   z,$1978]
	addq.w	#1,a0                           	| [$1967: inc  hl]
	subq.b	#1,d1                           	| [$1968: dec  b]
	jeq	l_1978                             	| [$1969: jr   z,$1978]
	cmp.b	#0x08,d0                         	| [$196b: cp   $08]
	jcc	l_1978                             	| [$196d: jr   nc,$1978]
	addq.w	#1,a0                           	| [$196f: inc  hl]
	subq.b	#1,d1                           	| [$1970: dec  b]
	jeq	l_1978                             	| [$1971: jr   z,$1978]
	cmp.b	#0x05,d0                         	| [$1973: cp   $05]
	jcc	l_1978                             	| [$1975: jr   nc,$1978]
	addq.w	#1,a0                           	| [$1977: inc  hl]
l_1978:
	clr.w	d3                               	| [$1979: ld   d,$00]
	move.b	(a0),d3                         	| [$1978: ld   e,(hl)]
	lea	l_214B(a6),a0                      	| [$197b: ld   hl,$214B]
	add.w	d3,a0                            	| [$197e: add  hl,de]
	lea	value16_8025(a6),a1                      	| [$197f: ld   de,$8025]
	move.w	#0x0008,d1                      	| [$1982: ld   bc,$0008]
	jbsr	ldir                              	| [$1985: ldir]
	rts                                    	| [$1987: ret]

move_wrap_pointer_1988:
	addq.w	#1,a0                           	| [$1988: inc  hl]
	LOAD_D5D6_FROM_A0
	move.b	d0,d1                           	| [$1989: ld   b,a]
	move.b	d6,d5                           	| [$198a: ld   a,l]
	and.b	#0x1F,d5                         	| [$198b: and  $1F]
	move.b	d1,d0                           	| [$198d: ld   a,b]
	tst.b	d5
	beq.b	0f                               	| [...]
	rts                                    	| [$198e: ret  nz] [...]
0:
	subq.w	#1,a0                           	| [$198f: dec  hl]
	LOAD_D5D6_FROM_A0
	                           	| [$1990: ld   a,l]
	and.b	#0xE0,d6                         	| [$1991: and  $E0]
	                           	| [$1993: ld   l,a]
	LOAD_A0_FROM_D5D6
	move.b	d1,d0                           	| [$1994: ld   a,b]
	rts                                    	| [$1995: ret]

l_1996:
	move.b	#0x03,d0                        	| [$1996: ld   a,$03]
	move.b	d0,l_8020(a6)                   	| [$1998: ld   ($8020),a]
	move.b	#0xEC,d0                        	| [$199b: ld   a,$EC]
	move.b	d0,l_8014(a6)                   	| [$199d: ld   ($8014),a]
	lea	l_89F4(a6),a0                      	| [$19a0: ld   hl,$89F4]
	move.b	#0x80,(a0)                      	| [$19a3: ld   (hl),$80]
	addq.w	#1,a0                           	| [$19a5: inc  hl]
	move.b	#0x08,(a0)                      	| [$19a6: ld   (hl),$08]
	jbsr	l_176e                            	| [$19a8: call $176E]
	move.b	l_8021(a6),d0                   	| [$19ab: ld   a,($8021)]
	                               	| [$19ae: and  a]
	jeq	l_068e                             	| [$19af: jp   z,$068E]
	LOAD_POINTER	pointer_8988(a6),a0             	| [$19b2: ld   hl,($8988)] [uncovered]

	subq.b	#1,(a0)                         	| [$19b5: dec  (hl)] [uncovered]
	jne	l_16f6                             	| [$19b6: jp   nz,$16F6] [uncovered]
l_19b9:
	move.b	#0xA0,d0                        	| [$19b9: ld   a,$A0] [uncovered]
	move.b	d0,l_824B(a6)                   	| [$19bb: ld   ($824B),a] [uncovered]
l_19be:
	move.b	l_824B(a6),d0                   	| [$19be: ld   a,($824B)] [uncovered]
	                               	| [$19c1: and  a] [uncovered]
	jne	l_19be                             	| [$19c2: jr   nz,$19BE] [uncovered]
	CLEAR_XC_FLAGS                         	| [$19c4: xor  a] [uncovered]
	clr.b	d0                               	| [$19c4: xor  a] [uncovered]
	move.b	d0,l_89F4(a6)                   	| [$19c5: ld   ($89F4),a] [uncovered]
	move.b	(0x0c,a2),d0                    	| [$19c8: ld   a,(ix+$0c)] [uncovered]
	sub.b	#0x08,d0                         	| [$19cb: sub  $08] [uncovered]
	move.b	d0,d1                           	| [$19cd: ld   b,a] [uncovered]
	move.b	(0x0e,a2),d0                    	| [$19ce: ld   a,(ix+$0e)] [uncovered]
	add.b	#0x08,d0                         	| [$19d1: add  a,$08] [uncovered]
	move.b	d0,d2                           	| [$19d3: ld   c,a] [uncovered]
	jbsr	l_0e7f                            	| [$19d4: call $0E7F] [uncovered]
	move.b	d5,d3                           	| [$19d7: ld   d,h] [uncovered]
	move.b	d6,d4                           	| [$19d8: ld   e,l] [uncovered]
	move.b	#0x03,d1                        	| [$19d9: ld   b,$03] [uncovered]
	move.b	#0x81,d0                        	| [$19db: ld   a,$81] [uncovered]
l_19dd:

	move.l	a0,-(sp)                        	| [$19dd: push hl] [uncovered]
	movem.w	d3/d4,-(sp)                    	| [$19de: push de] [uncovered]
	move.l	a1,-(sp)                        	| [$19de: push de] [uncovered]
	move.b	#0x03,d2                        	| [$19df: ld   c,$03] [uncovered]
l_19e1:
	move.b	d0,(a1)                         	| [$19e1: ld   (de),a] [uncovered]
	jbsr	advance_hl_and_de_0e5d                            	| [$19e2: call $0E5D] [uncovered]
	subq.b	#1,d2                           	| [$19e5: dec  c] [uncovered]
	jne	l_19e1                             	| [$19e6: jr   nz,$19E1] [uncovered]
	move.l	(sp)+,a1                        	| [$19e8: pop  de] [uncovered]
	movem.w	(sp)+,d3/d4                    	| [$19e8: pop  de] [uncovered]
	move.l	(sp)+,a0                        	| [$19e9: pop  hl] [uncovered]
	jbsr	advance_hl_and_de_0e6c                            	| [$19ea: call $0E6C] [uncovered]
	subq.b	#1,d1                           	| [...]
	jne	l_19dd                             	| [$19ed: djnz $19DD] [uncovered]
	lea	l_8014(a6),a2                      	| [$19ef: ld   ix,$8014] [uncovered]
	lea	l_8814(a6),a3                      	| [$19f3: ld   iy,$8814] [uncovered]
	move.b	l_81A8(a6),d0                   	| [$19f7: ld   a,($81A8)] [uncovered]
	                               	| [$19fa: and  a] [uncovered]
	jne	l_1a1f                             	| [$19fb: jr   nz,$1A1F] [uncovered]
	move.b	#0xE0,(0x00,a2)                 	| [$19fd: ld   (ix+$00),$E0] [uncovered]
	move.b	#0x68,(0x01,a2)                 	| [$1a01: ld   (ix+$01),$68] [uncovered]
	move.b	#0x74,(0x00,a3)                 	| [$1a05: ld   (iy+$00),$74] [uncovered]
	move.b	#0x66,(0x01,a3)                 	| [$1a09: ld   (iy+$01),$66] [uncovered]
	move.b	#0xE4,(0x02,a2)                 	| [$1a0d: ld   (ix+$02),$E4] [uncovered]
	move.b	#0x78,(0x03,a2)                 	| [$1a11: ld   (ix+$03),$78] [uncovered]
	move.b	#0x74,(0x02,a3)                 	| [$1a15: ld   (iy+$02),$74] [uncovered]
	move.b	#0x66,(0x03,a3)                 	| [$1a19: ld   (iy+$03),$66] [uncovered]
	jra	l_1a3f                             	| [$1a1d: jr   $1A3F] [uncovered]
l_1a1f:
	move.b	#0xE3,(0x00,a2)                 	| [$1a1f: ld   (ix+$00),$E3]
	move.b	#0xAC,(0x01,a2)                 	| [$1a23: ld   (ix+$01),$AC]
	move.b	#0xE7,(0x02,a2)                 	| [$1a27: ld   (ix+$02),$E7]
	move.b	#0x9C,(0x03,a2)                 	| [$1a2b: ld   (ix+$03),$9C]
	move.b	#0x7C,(0x00,a3)                 	| [$1a2f: ld   (iy+$00),$7C]
	move.b	#0x66,(0x01,a3)                 	| [$1a33: ld   (iy+$01),$66]
	move.b	#0x7C,(0x02,a3)                 	| [$1a37: ld   (iy+$02),$7C]
	move.b	#0x66,(0x03,a3)                 	| [$1a3b: ld   (iy+$03),$66]
l_1a3f:
	move.b	#0x01,d0                        	| [$1a3f: ld   a,$01]
	move.b	d0,l_824B(a6)                   	| [$1a41: ld   ($824B),a]
l_1a44:
	move.b	l_824B(a6),d0                   	| [$1a44: ld   a,($824B)]
	and.b	#0x3F,d0                         	| [$1a47: and  $3F]
	jne	l_1a44                             	| [$1a49: jr   nz,$1A44]
	move.b	l_82D0(a6),d0                   	| [$1a4b: ld   a,($82D0)]
	                               	| [$1a4e: and  a]
	jeq	l_1ad8                             	| [$1a4f: jp   z,$1AD8]
	move.b	#0x75,d0                        	| [$1a52: ld   a,$75]
	jbsr	clear_screen_and_reset_scroll_1dcb                            	| [$1a54: call $1DCB]
	lea	l_1B29(a6),a0                      	| [$1a57: ld   hl,$1B29]
	lea	l_8507(a6),a1                      	| [$1a5a: ld   de,$8507]
	jbsr	l_1b15                            	| [$1a5d: call $1B15]
	lea	l_8586(a6),a1                      	| [$1a60: ld   de,$8586]
	jbsr	l_1b15                            	| [$1a63: call $1B15]
	lea	l_85C9(a6),a1                      	| [$1a66: ld   de,$85C9]
	jbsr	l_1b15                            	| [$1a69: call $1B15]
	lea	l_8686(a6),a1                      	| [$1a6c: ld   de,$8686]
	jbsr	l_1b15                            	| [$1a6f: call $1B15]
	lea	l_86C8(a6),a1                      	| [$1a72: ld   de,$86C8]
	jbsr	l_1b15                            	| [$1a75: call $1B15]
	move.b	#0x83,d0                        	| [$1a78: ld   a,$83]
	move.b	d0,l_862F(a6)                   	| [$1a7a: ld   ($862F),a]
	lea	l_89F5(a6),a0                      	| [$1a7d: ld   hl,$89F5]
	bset.b	#2,(a0)                         	| [$1a80: set  2,(hl)]
l_1a82:
	move.b	#0x01,d0                        	| [$1a82: ld   a,$01]
	move.b	d0,l_824B(a6)                   	| [$1a84: ld   ($824B),a]
l_1a87:
	move.b	l_824B(a6),d0                   	| [$1a87: ld   a,($824B)]
	and.b	#0x0F,d0                         	| [$1a8a: and  $0F]
	jne	l_1a87                             	| [$1a8c: jr   nz,$1A87]
	btst.b	#0,(a0)                         	| [$1a8e: bit  0,(hl)]
	jne	l_1ad8                             	| [$1a90: jr   nz,$1AD8]
	lea	l_8860(a6),a1                      	| [$1a92: ld   de,$8860]
	move.b	(a1),d0                         	| [$1a95: ld   a,(de)]
	eor.b	#0x1F,d0                         	| [$1a96: xor  $1F]
	move.b	#0x08,d1                        	| [$1a98: ld   b,$08]
l_1a9a:
	move.b	d0,(a1)                         	| [$1a9a: ld   (de),a]
	addq.w	#1,a1                           	| [$1a9b: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_1a9a                             	| [$1a9c: djnz $1A9A]

	move.l	a0,-(sp)                        	| [$1a9e: push hl]
	lea	l_862F(a6),a1                      	| [$1a9f: ld   de,$862F]
	move.b	(a1),d0                         	| [$1aa2: ld   a,(de)]
	lea	l_8628(a6),a1                      	| [$1aa3: ld   de,$8628]
	cmp.b	#0x40,d0                         	| [$1aa6: cp   $40]
	jne	l_1ac7                             	| [$1aa8: jr   nz,$1AC7]
	lea	l_8064(a6),a0                      	| [$1aaa: ld   hl,$8064]
	move.w	#0x0004,d1                      	| [$1aad: ld   bc,$0004]
	jbsr	ldir                              	| [$1ab0: ldir]
	move.b	#0x04,d2                        	| [$1ab2: ld   c,$04]
	lea	l_8060(a6),a0                      	| [$1ab4: ld   hl,$8060]
	jbsr	ldir                              	| [$1ab7: ldir]
	move.b	#0x22,d0                        	| [$1ab9: ld   a,$22]
	move.b	d0,(a1)                         	| [$1abb: ld   (de),a]
l_1abc:
	subq.w	#1,a1                           	| [$1abc: dec  de]
	move.b	(a1),d0                         	| [$1abd: ld   a,(de)]
	cmp.b	#0x40,d0                         	| [$1abe: cp   $40]
	jne	l_1abc                             	| [$1ac0: jr   nz,$1ABC]
	move.b	#0x22,d0                        	| [$1ac2: ld   a,$22]
	move.b	d0,(a1)                         	| [$1ac4: ld   (de),a]
	jra	l_1acf                             	| [$1ac5: jr   $1ACF]
l_1ac7:
	move.b	#0x09,d1                        	| [$1ac7: ld   b,$09]
	move.b	#0x40,d0                        	| [$1ac9: ld   a,$40]
l_1acb:
	move.b	d0,(a1)                         	| [$1acb: ld   (de),a]
	addq.w	#1,a1                           	| [$1acc: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_1acb                             	| [$1acd: djnz $1ACB]
l_1acf:
	jbsr	l_04e0                            	| [$1acf: call $04E0]
	jbsr	l_1af5                            	| [$1ad2: call $1AF5]
	move.l	(sp)+,a0                        	| [$1ad5: pop  hl]
	jra	l_1a82                             	| [$1ad6: jr   $1A82]
l_1ad8:
	jbsr	l_17a3                            	| [$1ad8: call $17A3]
	jbsr	l_1b06                            	| [$1adb: call $1B06]
	lea	l_8860(a6),a0                      	| [$1ade: ld   hl,$8860]
	move.b	#0x08,d1                        	| [$1ae1: ld   b,$08]
l_1ae3:
	move.b	#0x70,(a0)                      	| [$1ae3: ld   (hl),$70]
	addq.w	#1,a0                           	| [$1ae5: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_1ae3                             	| [$1ae6: djnz $1AE3]
	lea	l_81AA(a6),a0                      	| [$1ae8: ld   hl,$81AA]
	move.b	(a0)+,d0                         	| [$1aeb: ld   a,(hl)]
	                           	| [$1aec: inc  hl]
	and.b	(a0),d0                          	| [$1aed: and  (hl)]
	move.b	d0,(a0)                         	| [$1aee: ld   (hl),a]
	jne	l_16f6                             	| [$1aef: jp   nz,$16F6]
	jra	l_068e                             	| [$1af2: jp   $068E]
l_1af5:
	LOAD_POINTER	pointer_8998(a6),a0             	| [$1af5: ld   hl,($8998)]

	move.w	#0x001C,d1                      	| [$1af8: ld   bc,$001C]
	add.w	d1,a0                            	| [$1afb: add  hl,bc]
	move.b	#0x08,d1                        	| [$1afc: ld   b,$08]
	move.b	(a0),d0                         	| [$1afe: ld   a,(hl)]
	eor.b	#0x15,d0                         	| [$1aff: xor  $15]
l_1b01:
	move.b	d0,(a0)                         	| [$1b01: ld   (hl),a]
	addq.w	#1,a0                           	| [$1b02: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_1b01                             	| [$1b03: djnz $1B01]
	rts                                    	| [$1b05: ret]
l_1b06:
	LOAD_POINTER	pointer_8998(a6),a0             	| [$1b06: ld   hl,($8998)]

	move.w	#0x001C,d1                      	| [$1b09: ld   bc,$001C]
	add.w	d1,a0                            	| [$1b0c: add  hl,bc]
	move.b	#0x08,d1                        	| [$1b0d: ld   b,$08]
l_1b0f:
	move.b	#0x72,(a0)                      	| [$1b0f: ld   (hl),$72]
	addq.w	#1,a0                           	| [$1b11: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_1b0f                             	| [$1b12: djnz $1B0F]
	rts                                    	| [$1b14: ret]
l_1b15:
	move.w	d0,-(sp)                        	| [$1b15: push af]
	movem.w	d1/d2,-(sp)                    	| [$1b16: push bc]
	movem.w	d3/d4,-(sp)                    	| [$1b17: push de]
	move.l	a1,-(sp)                        	| [$1b17: push de]
	move.b	(a0),d0                         	| [$1b18: ld   a,(hl)]
	bset.b	#3,d3                           	| [$1b19: set  3,d]
	addq.w	#1,a0                           	| [$1b1b: inc  hl]
	move.b	(a0),d1                         	| [$1b1c: ld   b,(hl)]
l_1b1d:
	move.b	d0,(a1)+                         	| [$1b1d: ld   (de),a]
											| [$1b1e: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_1b1d                             	| [$1b1f: djnz $1B1D]
	move.b	(a0),d2                         	| [$1b21: ld   c,(hl)]
	move.l	(sp)+,a1                        	| [$1b22: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$1b22: pop  de]
	addq.w	#1,a0                           	| [$1b23: inc  hl]
	LOAD_D1_16_FROM_D1D2
	jbsr	ldir                              	| [$1b24: ldir]
	movem.w	(sp)+,d1/d2                    	| [$1b26: pop  bc]
	move.w	(sp)+,d0                        	| [$1b27: pop  af]
	rts                                    	| [$1b28: ret]

l_1b76:

	move.l	a0,-(sp)                        	| [$1b76: push hl]
	movem.w	d1/d2,-(sp)                    	| [$1b77: push bc]
	lea	l_8834(a6),a0                      	| [$1b78: ld   hl,$8834]
	move.b	#0x0C,d1                        	| [$1b7b: ld   b,$0C]
	clr.b	d2                               	| [$1b7d: ld   c,$00]
l_1b7f:
	move.b	d2,(a0)                         	| [$1b7f: ld   (hl),c]
	addq.w	#1,a0                           	| [$1b80: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_1b7f                             	| [$1b81: djnz $1B7F]
	movem.w	(sp)+,d1/d2                    	| [$1b83: pop  bc]
	move.l	(sp)+,a0                        	| [$1b84: pop  hl]
	rts                                    	| [$1b85: ret]

l_1b86:

	move.l	a0,-(sp)                        	| [$1b86: push hl]
	lea	l_8291(a6),a0                      	| [$1b87: ld   hl,$8291]
	move.b	#0x03,(a0)                      	| [$1b8a: ld   (hl),$03]
	move.l	(sp)+,a0                        	| [$1b8c: pop  hl]
	rts                                    	| [$1b8d: ret]

l_1b8e:
	jbsr	exx                               	| [$1b8e: exx]
	st.b	d1                                	| [$1b8f: ld   b,$FF]
	lea	enemy_car_structs_8088(a6),a3      	| [$1b91: ld   iy,enemy_car_structs_8088]
	move.b	nb_enemy_cars_824e(a6),d0       	| [$1b95: ld   a,(nb_enemy_cars_824e)]
	move.b	d0,d1                           	| [$1b98: ld   b,a]
l_1b99:
	move.b	(0x08,a2),d0                    	| [$1b99: ld   a,(ix+$08)]
	sub.b	(0x08,a3),d0                     	| [$1b9c: sub  (iy+$08)]
	jcc	l_1ba3                             	| [$1b9f: jr   nc,$1BA3]
	neg.b	d0                               	| [$1ba1: neg]
l_1ba3:
	move.b	d0,d3                           	| [$1ba3: ld   d,a]
	move.b	(0x0a,a3),d0                    	| [$1ba4: ld   a,(iy+$0a)]
	sub.b	(0x0a,a2),d0                     	| [$1ba7: sub  (ix+$0a)]
	jcc	l_1bae                             	| [$1baa: jr   nc,$1BAE]
	neg.b	d0                               	| [$1bac: neg]
l_1bae:
	or.b	d3,d0                             	| [$1bae: or   d]
	cmp.b	#0x04,d0                         	| [$1baf: cp   $04]
	bcc.b	0f                               	| [...]
	jbsr	l_1b86                            	| [$1bb1: call c,$1B86]
0:
	move.w	#0x0020,d3                      	| [$1bb4: ld   de,$0020]
	add.w	d3,a3                            	| [$1bb7: add  iy,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1b99                             	| [$1bb9: djnz $1B99]
	move.b	#0x34,d0                        	| [$1bbb: ld   a,$34]
	move.b	d0,l_828F(a6)                   	| [$1bbd: ld   ($828F),a]
	st.b	d0                                	| [$1bc0: ld   a,$FF]
	jbsr	exx                               	| [$1bc2: exx]
	move.b	d0,d1                           	| [$1bc3: ld   b,a]
	rts                                    	| [$1bc4: ret]

l_1bc5:
	move.b	#0x30,d0                        	| [$1bc5: ld   a,$30]
	move.b	d0,l_828F(a6)                   	| [$1bc7: ld   ($828F),a]
	rts                                    	| [$1bca: ret]

l_1bcb:
	lea	l_8068(a6),a2                      	| [$1bcb: ld   ix,$8068]
	move.b	#0x09,d1                        	| [$1bcf: ld   b,$09]
l_1bd1:
	lea	l_2270(a6),a0                      	| [$1bd1: ld   hl,$2270]
	move.b	(0x15,a2),d0                    	| [$1bd4: ld   a,(ix+$15)]
	                               	| [$1bd7: and  a]
	jne	l_1c1d                             	| [$1bd8: jr   nz,$1C1D]
	move.b	(0x02,a2),d2                    	| [$1bda: ld   c,(ix+$02)]
	move.b	d2,d0                           	| [$1bdd: ld   a,c]
	or.b	(0x01,a2),d0                      	| [$1bde: or   (ix+$01)]
	jeq	l_1c1d                             	| [$1be1: jr   z,$1C1D]
	move.b	(0x03,a2),d0                    	| [$1be3: ld   a,(ix+$03)]
	                               	| [$1be6: and  a]
	jeq	l_1bf1                             	| [$1be7: jr   z,$1BF1]
	btst.b	#7,d2                           	| [$1be9: bit  7,c]
	jeq	l_1bfb                             	| [$1beb: jr   z,$1BFB] jumps in the middle of an instruction
	move.b	#0xFD,d2                        	| [$1bed: ld   c,$FD]
	jra	l_1bfd                             	| [$1bef: jr   $1BFD]

l_1bf1:
	btst.b	#7,d2                           	| [$1bf1: bit  7,c]
	jeq	l_1bf8                             	| [$1bf3: jr   z,$1BF8] jumps in the middle of an instruction
	move.b	#0xF2,d2                        	| [$1bf5: ld   c,$F2]
	lea	l_F00E(a6),a1                      	| [$1bf7: ld   de,$F00E] if executed, the next ld is skipped!
* crazy code interleave!
l_1bf8:
	move.b	#0xF0,d2                        	| [$1bf8: ld   c,$F0]
	move.w	#-0x3f2,d3                      	| [$1bfa: ld   de,$FC0E] if executed, the next ld is skipped!
* crazy code interleave!
* anyway, probably a mistake, as register de set value is not used
l_1bfb:
	move.b	#0xFC,d2                        	| [$1bfb: ld   c,$FC]
l_1bfd:
	move.b	(0x0f,a2),d0                    	| [$1bfd: ld   a,(ix+$0f)]
	cmp.b	d2,d0                            	| [$1c00: cp   c]
	jeq	l_1c1d                             	| [$1c01: jr   z,$1C1D]
	move.b	d2,d0                           	| [$1c03: ld   a,c]
l_1c04:
	cmp.b	(a0)+,d0                          	| [$1c04: cp   (hl)]
												| [$1c05: inc  hl]
	jne	l_1c04                             	| [$1c06: jr   nz,$1C04]
	move.b	(0x0f,a2),d0                    	| [$1c08: ld   a,(ix+$0f)]
	clr.b	d2                               	| [$1c0b: ld   c,$00]
l_1c0d:
	addq.b	#1,d2                           	| [$1c0d: inc  c]
	cmp.b	(a0)+,d0                          	| [$1c0e: cp   (hl)]
											| [$1c0f: inc  hl]
	jne	l_1c0d                             	| [$1c10: jr   nz,$1C0D]
	move.b	d2,d0                           	| [$1c12: ld   a,c]
	cmp.b	#0x06,d0                         	| [$1c13: cp   $06]
	jcc	l_1c19                             	| [$1c15: jr   nc,$1C19]
	subq.w	#2,a0                           	| [$1c17: dec  hl] * 2
l_1c19:
	move.b	(a0),d0                         	| [$1c19: ld   a,(hl)]
	move.b	d0,(0x0f,a2)                    	| [$1c1a: ld   (ix+$0f),a]
l_1c1d:
	move.w	#0x0020,d3                      	| [$1c1d: ld   de,$0020]
	add.w	d3,a2                            	| [$1c20: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1bd1                             	| [$1c22: djnz $1BD1]
	CLEAR_XC_FLAGS                         	| [$1c24: xor  a]
	clr.b	d0                               	| [$1c24: xor  a]
	move.b	d0,l_824B(a6)                   	| [$1c25: ld   ($824B),a]
	rts                                    	| [$1c28: ret]

l_1c29:
	move.b	(a0),d2                         	| [$1c29: ld   c,(hl)]
	addq.w	#1,a0                           	| [$1c2a: inc  hl]
l_1c2b:
	clr.b	d1                               	| [$1c2b: ld   b,$00]
	LOAD_D1_16_FROM_D1D2
	jbsr	ldir                              	| [$1c2d: ldir]
	rts                                    	| [$1c2f: ret]

l_1c30:
	move.b	l_8024(a6),d0                   	| [$1c30: ld   a,($8024)]
	                               	| [$1c33: and  a]
	jeq	l_1c3a                             	| [$1c34: jr   z,$1C3A]
	move.b	#0x01,d1                        	| [$1c36: ld   b,$01]
	jra	l_1c3c                             	| [$1c38: jr   $1C3C]

l_1c3a:
	clr.b	d1                               	| [$1c3a: ld   b,$00]
l_1c3c:
	lea	l_A184(a6),a0                      	| [$1c3c: ld   hl,$A184]
	move.b	d1,(a0)                         	| [$1c3f: ld   (hl),b]
	addq.w	#1,a0                           	| [$1c40: inc  hl]
	move.b	l_8024(a6),d0                   	| [$1c41: ld   a,($8024)]
	cmp.b	#0x01,d0                         	| [$1c44: cp   $01]
	jne	l_1c4a                             	| [$1c46: jr   nz,$1C4A]
	clr.b	d1                               	| [$1c48: ld   b,$00]
l_1c4a:
	move.b	d1,(a0)                         	| [$1c4a: ld   (hl),b]
	move.b	#0x01,d0                        	| [$1c4b: ld   a,$01]
	rts                                    	| [$1c4d: ret]

l_1c4e:
	move.l	a1,-(sp)                        	| [$1c4e: push de]
	movem.w	d1/d2,-(sp)                    	| [$1c4f: push bc]
	move.w	#0x0008,d1                      	| [$1c50: ld   bc,$0008]
	jbsr	ldir                              	| [$1c53: ldir]
	movem.w	(sp)+,d1/d2                    	| [$1c55: pop  bc]
	move.l	(sp)+,a1                        	| [$1c56: pop  de]

	move.l	a0,-(sp)                        	| [$1c57: push hl]
	movem.w	d3/d4,-(sp)                    	| [$1c58: push de]
	move.l	a1,-(sp)                        	| [$1c58: push de]
	exg	a1,a0                              	| [$1c59: ex   de,hl]
	LOAD_D3D4_FROM_A1
	LOAD_D5D6_FROM_A0
	bset.b	#3,d5                           	| [$1c5a: set  3,h]
	move.b	#0x08,d3                        	| [$1c5c: ld   d,$08]
	LOAD_A0_FROM_D5D6
l_1c5e:
	move.b	d2,(a0)+                         	| [$1c5e: ld   (hl),c]
	                           	| [$1c5f: inc  hl]
	subq.b	#1,d3                           	| [$1c60: dec  d]
	jne	l_1c5e                             	| [$1c61: jr   nz,$1C5E]
	move.l	(sp)+,a1                        	| [$1c63: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$1c63: pop  de]
	LOAD_D3_16_FROM_A1
	move.w	#0x0020,d5                      	| [$1c64: ld   hl,$0020]
	add.w	d3,d5                            	| [$1c67: add  hl,de]
	LOAD_A0_FROM_D5_16
	exg	a1,a0                              	| [$1c68: ex   de,hl]
	move.l	(sp)+,a0                        	| [$1c69: pop  hl]
	rts                                    	| [$1c6a: ret]

l_1c6b:
	                                    	| [$1c6b: nop]
	move.b	l_8021(a6),d0                   	| [$1c6c: ld   a,($8021)]
	                               	| [$1c6f: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1c70: ret  z] [...]
0:
	LOAD_POINTER	pointer_899c(a6),a0             	| [$1c71: ld   hl,($899C)]

	move.b	(a0),d0                         	| [$1c74: ld   a,(hl)]
	                               	| [$1c75: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1c76: ret  z] [...]
0:
	move.b	l_8269(a6),d0                   	| [$1c77: ld   a,($8269)]
	move.b	d0,d1                           	| [$1c7a: ld   b,a]
	move.b	l_826E(a6),d0                   	| [$1c7b: ld   a,($826E)]
	cmp.b	d1,d0                            	| [$1c7e: cp   b]
	beq.b	0f                               	| [...]
	rts                                    	| [$1c7f: ret  nz] [...]
0:
	CLEAR_XC_FLAGS                         	| [$1c80: xor  a]
	clr.b	d0                               	| [$1c80: xor  a]
	move.b	d0,l_8269(a6)                   	| [$1c81: ld   ($8269),a]
	LOAD_POINTER	pointer_898e(a6),a2             	| [$1c84: ld   ix,($898E)]

	move.b	(0x01,a2),d0                    	| [$1c88: ld   a,(ix+$01)]
	lea	l_1FCB(a6),a0                      	| [$1c8b: ld   hl,$1FCB]
	cmp.b	#0x0A,d0                         	| [$1c8e: cp   $0A]
	jcc	l_1c95                             	| [$1c90: jr   nc,$1C95]
	lea	l_1FD3(a6),a0                      	| [$1c92: ld   hl,$1FD3]
l_1c95:
	lea	l_8940(a6),a1                      	| [$1c95: ld   de,$8940]
	move.w	#0x0008,d1                      	| [$1c98: ld   bc,$0008]
	jbsr	ldir                              	| [$1c9b: ldir]
	move.b	(0x00,a2),d0                    	| [$1c9d: ld   a,(ix+$00)]
	                               	| [$1ca0: and  a]
	jne	l_1cb2                             	| [$1ca1: jr   nz,$1CB2]
	move.b	(0x01,a2),d0                    	| [$1ca3: ld   a,(ix+$01)]
	cmp.b	#0x0A,d0                         	| [$1ca6: cp   $0A]
	jne	l_1cb2                             	| [$1ca8: jr   nz,$1CB2]
	move.b	l_89F4(a6),d0                   	| [$1caa: ld   a,($89F4)]
	or.b	#0x20,d0                          	| [$1cad: or   $20]
	move.b	d0,l_89F4(a6)                   	| [$1caf: ld   ($89F4),a]
l_1cb2:
	LOAD_POINTER	pointer_898e(a6),a2             	| [$1cb2: ld   ix,($898E)]

	move.b	(0x01,a2),d5                    	| [$1cb6: ld   h,(ix+$01)]
	move.b	(0x00,a2),d6                    	| [$1cb9: ld   l,(ix+$00)]
	move.b	d5,d0                           	| [$1cbc: ld   a,h]
	or.b	d6,d0                             	| [$1cbd: or   l]
	bne.b	0f                               	| [...]
	rts                                    	| [$1cbe: ret  z] [...]
0:
	subq.b	#1,d6                           	| [$1cbf: dec  l]
	btst.b	#7,d6                           	| [$1cc0: bit  7,l]
	jeq	l_1cc7                             	| [$1cc2: jr   z,$1CC7]
	move.b	#0x09,d6                        	| [$1cc4: ld   l,$09]
	subq.b	#1,d5                           	| [$1cc6: dec  h]
l_1cc7:
	move.b	d6,(0x00,a2)                    	| [$1cc7: ld   (ix+$00),l]
	move.b	d5,(0x01,a2)                    	| [$1cca: ld   (ix+$01),h]
	move.b	d5,d0                           	| [$1ccd: ld   a,h]
l_1cce:
	move.b	(0x01,a2),d4                    	| [$1cce: ld   e,(ix+$01)]
	lea	l_8144(a6),a0                      	| [$1cd1: ld   hl,$8144]
	move.b	#0x36,d3                        	| [$1cd4: ld   d,$36]
	move.b	#0xC7,d2                        	| [$1cd6: ld   c,$C7]
	move.b	#0x05,d0                        	| [$1cd8: ld   a,$05]
	sub.b	d4,d0                            	| [$1cda: sub  e]
	cmp.b	#0xCF,d0                         	| [$1cdb: cp   $CF]
	jcs	l_1ce1                             	| [$1cdd: jr   c,$1CE1]
	move.b	#0xCF,d0                        	| [$1cdf: ld   a,$CF]
l_1ce1:
	move.b	d0,(a0)+                         	| [$1ce1: ld   (hl),a]
	                           	| [$1ce2: inc  l]
	move.b	#0x07,d1                        	| [$1ce3: ld   b,$07]
l_1ce5:
	move.b	d3,d0                           	| [$1ce5: ld   a,d]
	cmp.b	d4,d0                            	| [$1ce6: cp   e]
	jcc	l_1cea                             	| [$1ce7: jr   nc,$1CEA]
	move.b	d3,d4                           	| [$1ce9: ld   e,d]
l_1cea:
	sub.b	#0x08,d0                         	| [$1cea: sub  $08]
	move.b	d0,d3                           	| [$1cec: ld   d,a]
	move.b	d4,d0                           	| [$1ced: ld   a,e]
	sub.b	d3,d0                            	| [$1cee: sub  d]
	btst.b	#7,d0                           	| [$1cef: bit  7,a]
	jeq	l_1cf4                             	| [$1cf1: jr   z,$1CF4]
	                         	| [$1cf3: xor  a]
	clr.b	d0                               	| [$1cf3: xor  a]
l_1cf4:
	add.b	d2,d0                            	| [$1cf4: add  a,c]
	move.b	d0,(a0)                         	| [$1cf5: ld   (hl),a]
	LOAD_D5D6_FROM_A0
	move.b	d6,d0                           	| [$1cf6: ld   a,l]
	addq.b	#1,d0                           	| [$1cf7: inc  a]
	and.b	#0xF7,d0                         	| [$1cf8: and  $F7]
	move.b	d0,d6                           	| [$1cfa: ld   l,a]
	LOAD_A0_FROM_D5D6
	subq.b	#1,d1                           	| [...]
	jne	l_1ce5                             	| [$1cfb: djnz $1CE5]
	move.b	(0x01,a2),d0                    	| [$1cfd: ld   a,(ix+$01)]
	                               	| [$1d00: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1d01: ret  nz] [...]
0:
	move.b	(0x00,a2),d0                    	| [$1d02: ld   a,(ix+$00)]
	cmp.b	#0x01,d0                         	| [$1d05: cp   $01]
	jeq	l_1d10                             	| [$1d07: jr   z,$1D10]
	tst.b	d0                               	| [$1d09: and  a]
	beq.b	0f                               	| [...]
	rts                                    	| [$1d0a: ret  nz] [...]
0:
	addq.b	#1,d0                           	| [$1d0b: inc  a]
	move.b	d0,l_8292(a6)                   	| [$1d0c: ld   ($8292),a]
	rts                                    	| [$1d0f: ret]

l_1d10:
	LOAD_POINTER	pointer_899a(a6),a0             	| [$1d10: ld   hl,($899A)]

	move.b	#0xC7,(a0)                      	| [$1d13: ld   (hl),$C7]
	lea	l_828C(a6),a0                      	| [$1d15: ld   hl,$828C]
	move.b	#0x01,(a0)                      	| [$1d18: ld   (hl),$01]
	rts                                    	| [$1d1a: ret]

l_1d1b:
	LOAD_POINTER	pointer_898e(a6),a2             	| [$1d1b: ld   ix,($898E)]

	lea	l_1FCB(a6),a0                      	| [$1d1f: ld   hl,$1FCB]
	lea	l_8940(a6),a1                      	| [$1d22: ld   de,$8940]
	move.w	#0x0008,d1                      	| [$1d25: ld   bc,$0008]
	jbsr	ldir                              	| [$1d28: ldir]
	jra	l_1cce                             	| [$1d2a: jp   $1CCE]

l_1d2d:
	LOAD_POINTER	pointer_898e(a6),a2             	| [$1d2d: ld   ix,($898E)]

	move.b	l_8020(a6),d0                   	| [$1d31: ld   a,($8020)]
	                               	| [$1d34: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1d35: ret  z] [...]
0:
	move.b	#0x0A,d1                        	| [$1d36: ld   b,$0A]
	move.b	(0x00,a2),d0                    	| [$1d38: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$1d3b: or   (ix+$01)]
	bne.b	0f                               	| [...]
	rts                                    	| [$1d3e: ret  z] [...]
0:
	move.b	l_89F4(a6),d0                   	| [$1d3f: ld   a,($89F4)]
	and.b	#0x03,d0                         	| [$1d42: and  $03]
	or.b	#0x02,d0                          	| [$1d44: or   $02]
	move.b	d0,l_89F4(a6)                   	| [$1d46: ld   ($89F4),a]
l_1d49:
	CLEAR_XC_FLAGS                         	| [$1d49: xor  a]
	clr.b	d0                               	| [$1d49: xor  a]
	move.b	d0,l_8269(a6)                   	| [$1d4a: ld   ($8269),a]
l_1d4d:
	move.b	l_8269(a6),d0                   	| [$1d4d: ld   a,($8269)]
	subq.b	#1,d0                           	| [$1d50: dec  a]
	jne	l_1d4d                             	| [$1d51: jr   nz,$1D4D]
l_1d53:
	move.b	(0x00,a2),d0                    	| [$1d53: ld   a,(ix+$00)]
	or.b	(0x01,a2),d0                      	| [$1d56: or   (ix+$01)]
	bne.b	0f                               	| [...]
	rts                                    	| [$1d59: ret  z] [...]
0:
	movem.w	d1/d2,-(sp)                    	| [$1d5a: push bc]
	move.l	a4,-(sp)                        	| [$1d5a: push bc]
	jbsr	l_1cb2                            	| [$1d5b: call $1CB2]
	jbsr	l_1df5                            	| [$1d5e: call $1DF5]
	jbsr	l_1d6f                            	| [$1d61: call $1D6F]
	move.l	(sp)+,a4                        	| [$1d64: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$1d64: pop  bc]
	subq.b	#1,d1                           	| [$1d65: dec  b]
	jeq	l_1d2d                             	| [$1d66: jr   z,$1D2D]
	btst.b	#0,d1                           	| [$1d68: bit  0,b]
	jeq	l_1d49                             	| [$1d6a: jr   z,$1D49]
	jra	l_1d53                             	| [$1d6c: jp   $1D53]

l_1d6f:
	move.b	l_8020(a6),d0                   	| [$1d6f: ld   a,($8020)]
	                               	| [$1d72: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1d73: ret  z] [...]
0:
	move.b	l_82D0(a6),d0                   	| [$1d74: ld   a,($82D0)]
	lea	l_8060(a6),a1                      	| [$1d77: ld   de,$8060]
	LOAD_POINTER	pointer_8990(a6),a0             	| [$1d7a: ld   hl,($8990)]

	move.w	#0x0008,d1                      	| [$1d7d: ld   bc,$0008]
	cmp.b	#0x01,d0                         	| [$1d80: cp   $01]
	jne	l_1d88                             	| [$1d82: jr   nz,$1D88]
	jbsr	ldir                              	| [$1d84: ldir] [uncovered]
	jra	l_1d9a                             	| [$1d86: jr   $1D9A] [uncovered]

l_1d88:
	move.b	(a1),d0                         	| [$1d88: ld   a,(de)]
	cmp.b	#0x40,d0                         	| [$1d89: cp   $40]
	jeq	l_1d90                             	| [$1d8b: jr   z,$1D90]
	cmp.b	(a0),d0                          	| [$1d8d: cp   (hl)]
	jne	l_1d9a                             	| [$1d8e: jr   nz,$1D9A]
l_1d90:
	addq.w	#1,a0                           	| [$1d90: inc  hl]
	addq.w	#1,a1                           	| [$1d91: inc  de]
	subq.b	#1,d2                           	| [$1d92: dec  c]
	jne	l_1d88                             	| [$1d93: jr   nz,$1D88]
	move.b	#0x01,d0                        	| [$1d95: ld   a,$01] [uncovered]
	move.b	d0,l_82D0(a6)                   	| [$1d97: ld   ($82D0),a] [uncovered]
l_1d9a:
	move.b	l_81B2(a6),d0                   	| [$1d9a: ld   a,($81B2)]
	move.b	d0,d2                           	| [$1d9d: ld   c,a]
	move.b	l_81AA(a6),d0                   	| [$1d9e: ld   a,($81AA)]
	and.b	d2,d0                            	| [$1da1: and  c]
	beq.b	0f                               	| [...]
	rts                                    	| [$1da2: ret  nz] [...]
0:
	LOAD_POINTER	pointer_8990(a6),a0             	| [$1da3: ld   hl,($8990)]

	LOAD_POINTER	pointer_81b3(a6),a1             	| [$1da6: ld   de,($81B3)]

	move.b	#0x08,d1                        	| [$1daa: ld   b,$08]
l_1dac:
	move.b	(a1),d0                         	| [$1dac: ld   a,(de)]
	cmp.b	(a0),d0                          	| [$1dad: cp   (hl)]
	beq.b	0f                               	| [...]
	rts                                    	| [$1dae: ret  nz] [...]
0:
	addq.w	#1,a0                           	| [$1daf: inc  hl]
	addq.w	#1,a1                           	| [$1db0: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_1dac                             	| [$1db1: djnz $1DAC]
	move.b	l_81AA(a6),d0                   	| [$1db3: ld   a,($81AA)] [uncovered]
	or.b	d2,d0                             	| [$1db6: or   c] [uncovered]
	move.b	d0,l_81B2(a6)                   	| [$1db7: ld   ($81B2),a] [uncovered]
	LOAD_POINTER	pointer_8988(a6),a0             	| [$1dba: ld   hl,($8988)] [uncovered]

	addq.b	#1,(a0)                         	| [$1dbd: inc  (hl)] [uncovered]

	move.l	a2,-(sp)                        	| [$1dbe: push ix] [uncovered]
	jbsr	l_097d                            	| [$1dc0: call $097D] [uncovered]
	move.l	(sp)+,a2                        	| [$1dc3: pop  ix] [uncovered]
	lea	l_89F4(a6),a0                      	| [$1dc5: ld   hl,$89F4] [uncovered]
	bset.b	#0,(a0)                         	| [$1dc8: set  0,(hl)] [uncovered]
	rts                                    	| [$1dca: ret] [uncovered]

clear_screen_and_reset_scroll_1dcb:
	lea	l_8400(a6),a0                      	| [$1dcb: ld   hl,$8400]
	lea	l_8401(a6),a1                      	| [$1dce: ld   de,$8401]
	move.w	#0x03FF,d1                      	| [$1dd1: ld   bc,$03FF]
	move.b	#0x40,(a0)                      	| [$1dd4: ld   (hl),$40]
	jbsr	ldir                              	| [$1dd6: ldir]
	lea	l_8C00(a6),a0                      	| [$1dd8: ld   hl,$8C00]
	lea	l_8C01(a6),a1                      	| [$1ddb: ld   de,$8C01]
	move.w	#0x03FF,d1                      	| [$1dde: ld   bc,$03FF]
	move.b	d0,(a0)                         	| [$1de1: ld   (hl),a]
	jbsr	ldir                              	| [$1de2: ldir]
	                         	| [$1de4: xor  a]
	clr.b	d0                               	| [$1de4: xor  a]
	jbsr	osd_set_scroll_y             	| [$1de5: ld   (scrolly_a140),a]
	jbsr	osd_set_scroll_x             	| [$1de8: ld   (scrollx_a130),a]
	lea	value16_804c(a6),a0                      	| [$1deb: ld   hl,$804C]
	move.b	#0x04,d1                        	| [$1dee: ld   b,$04]
l_1df0:
	move.b	d0,(a0)+                         	| [$1df0: ld   (hl),a]
	                           	| [$1df1: inc  hl]
	subq.b	#1,d1                           	| [...]
	jne	l_1df0                             	| [$1df2: djnz $1DF0]
	rts                                    	| [$1df4: ret]

l_1df5:
	LOAD_POINTER	pointer_8990(a6),a0             	| [$1df5: ld   hl,($8990)]

	move.b	l_8020(a6),d0                   	| [$1df8: ld   a,($8020)]
	                               	| [$1dfb: and  a]
	bne.b	0f                               	| [...]
	rts                                    	| [$1dfc: ret  z] [...]
0:
	addq.w	#2,a0                           	| [$1dfd: inc  hl] * 2
l_1dff:
	move.b	(a0),d0                         	| [$1dff: ld   a,(hl)]
	addq.b	#1,d0                           	| [$1e00: inc  a]
	and.b	#0x0F,d0                         	| [$1e01: and  $0F]
	move.b	d0,(a0)                         	| [$1e03: ld   (hl),a]
	cmp.b	#0x0A,d0                         	| [$1e04: cp   $0A]
	bcc.b	0f                               	| [...]
	rts                                    	| [$1e06: ret  c] [...]
0:
	sub.b	#0x0A,d0                         	| [$1e07: sub  $0A]
	move.b	d0,(a0)                         	| [$1e09: ld   (hl),a]
	LOAD_D5D6_FROM_A0
	bset.b	#3,d6                           	| [$1e0a: set  3,l]
	subq.b	#1,d6                           	| [$1e0c: dec  l]
	bclr.b	#3,d6                           	| [$1e0d: res  3,l]
	LOAD_A0_FROM_D5D6
	jra	l_1dff                             	| [$1e0f: jr   $1DFF]

l_1e11:
	move.w	d0,-(sp)                        	| [$1e11: push af]
	move.b	d5,d0                           	| [$1e12: ld   a,h]
	not.b	d0                               	| [$1e13: cpl]
	move.b	d0,d5                           	| [$1e14: ld   h,a]
	move.b	d6,d0                           	| [$1e15: ld   a,l]
	not.b	d0                               	| [$1e16: cpl]
	move.b	d0,d6                           	| [$1e17: ld   l,a]
	addq.w	#1,d5                           	| [$1e18: inc  hl]
	move.w	(sp)+,d0                        	| [$1e19: pop  af]
	rts                                    	| [$1e1a: ret]

l_1e1b:
	move.b	nb_enemy_cars_824e(a6),d0       	| [$1e1b: ld   a,(nb_enemy_cars_824e)]
	move.w	d0,-(sp)                        	| [$1e1e: push af]
	move.b	#0x03,d0                        	| [$1e1f: ld   a,$03]
	move.b	d0,l_8048(a6)                   	| [$1e21: ld   ($8048),a]
	                   	| [$1e24: ld   ($A181),a]
	move.b	d0,l_806B(a6)                   	| [$1e27: ld   ($806B),a]
	exg	a1,a0                              	| [$1e2a: ex   de,hl]
	move.w	#0x0400,d5                      	| [$1e2b: ld   hl,$0400]
	STORE_WORD	d5,value16_8069(a6)            	| [$1e2e: ld   ($8069),hl]
	STORE_WORD	d5,previous_car_speed_802d(a6)            	| [$1e31: ld   ($802D),hl]
	                         	| [$1e34: xor  a]
	clr.b	d0                               	| [$1e34: xor  a]
	clr.w	d5                           	| [$1e35: ld   h,a]
	STORE_WORD	d5,value16_805a(a6)            	| [$1e36: ld   ($805A),hl]
	move.b	d0,l_8020(a6)                   	| [$1e39: ld   ($8020),a]
	move.b	d0,nb_enemy_cars_824e(a6)       	| [$1e3c: ld   (nb_enemy_cars_824e),a]
	lea	l_8068(a6),a2                      	| [$1e3f: ld   ix,$8068]
	movem.w	d3/d4,-(sp)                    	| [$1e43: push de]
	move.l	a1,-(sp)                        	| [$1e43: push de]
	move.b	#0x64,d0                        	| [$1e44: ld   a,$64]
	move.w	#0x0020,d3                      	| [$1e46: ld   de,$0020]
	move.b	#0x09,d1                        	| [$1e49: ld   b,$09]
l_1e4b:
	move.b	d0,(0x0a,a2)                    	| [$1e4b: ld   (ix+$0a),a]
	add.w	d3,a2                            	| [$1e4e: add  ix,de]
	subq.b	#1,d1                           	| [...]
	jne	l_1e4b                             	| [$1e50: djnz $1E4B]
	move.l	(sp)+,a1                        	| [$1e52: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$1e52: pop  de]
	lea	l_8068(a6),a2                      	| [$1e53: ld   ix,$8068]
	move.b	#0x01,(0x0b,a2)                 	| [$1e57: ld   (ix+$0b),$01]
	move.b	#0xF0,(0x0c,a2)                 	| [$1e5b: ld   (ix+$0c),$F0]
	move.b	(a1),d0                         	| [$1e5f: ld   a,(de)]
	move.b	d0,d2                           	| [$1e60: ld   c,a]
	addq.w	#1,a1                           	| [$1e61: inc  de]
	move.b	(a1),d0                         	| [$1e62: ld   a,(de)]
	move.b	d0,(0x0e,a2)                    	| [$1e63: ld   (ix+$0e),a]
	move.b	#0xFC,(0x0f,a2)                 	| [$1e66: ld   (ix+$0f),$FC]
	move.b	#0x01,(0x10,a2)                 	| [$1e6a: ld   (ix+$10),$01]
	lea	l_8073(a6),a0                      	| [$1e6e: ld   hl,$8073]
	STORE_POINTER	a0,pointer_8002(a6)            	| [$1e71: ld   ($8002),hl]
	addq.w	#1,a1                           	| [$1e74: inc  de]
	move.b	(a1)+,d0                         	| [$1e75: ld   a,(de)]
	                           	| [$1e76: inc  de]
	move.b	d0,d1                           	| [$1e77: ld   b,a]
	move.b	d2,d0                           	| [$1e78: ld   a,c]
l_1e79:
	cmp.b	(0x0c,a2),d0                     	| [$1e79: cp   (ix+$0c)]
	jne	l_1e79                             	| [$1e7c: jr   nz,$1E79]
l_1e7e:
	movem.w	d1/d2,-(sp)                    	| [$1e7e: push bc]
	move.l	a4,-(sp)                        	| [$1e7e: push bc]
	move.b	(0x0c,a2),d1                    	| [$1e7f: ld   b,(ix+$0c)]
	move.b	(0x0e,a2),d2                    	| [$1e82: ld   c,(ix+$0e)]
	jbsr	l_0e7f                            	| [$1e85: call $0E7F]
	move.l	(sp)+,a4                        	| [$1e88: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$1e88: pop  bc]
	move.b	d6,d0                           	| [$1e89: ld   a,l]
	cmp.b	d2,d0                            	| [$1e8a: cp   c]
	jeq	l_1e7e                             	| [$1e8b: jr   z,$1E7E]
	move.b	d6,d2                           	| [$1e8d: ld   c,l]
	move.b	(a1),d0                         	| [$1e8e: ld   a,(de)]
	cmp.b	#0x25,d0                         	| [$1e8f: cp   $25]
	jne	l_1eb3                             	| [$1e91: jr   nz,$1EB3]

	move.l	a0,-(sp)                        	| [$1e93: push hl] [uncovered]
	LOAD_POINTER	pointer_898a(a6),a0             	| [$1e94: ld   hl,($898A)] [uncovered]

	move.b	(a0),d0                         	| [$1e97: ld   a,(hl)] [uncovered]
	move.l	(sp)+,a0                        	| [$1e98: pop  hl] [uncovered]
	movem.w	d1/d2,-(sp)                    	| [$1e99: push bc] [uncovered]
	move.l	a4,-(sp)                        	| [$1e99: push bc] [uncovered]
	clr.b	d1                               	| [$1e9a: ld   b,$00] [uncovered]
	ror.b	#2,d0                            	| [$1e9c: rrca] [uncovered] * 2
	and.b	#0x3F,d0                         	| [$1e9e: and  $3F] [uncovered]
l_1ea0:
	cmp.b	#0x0A,d0                         	| [$1ea0: cp   $0A] [uncovered]
	jcs	l_1ea9                             	| [$1ea2: jr   c,$1EA9] [uncovered]
	sub.b	#0x0A,d0                         	| [$1ea4: sub  $0A] [uncovered]
	addq.b	#1,d1                           	| [$1ea6: inc  b] [uncovered]
	jra	l_1ea0                             	| [$1ea7: jr   $1EA0] [uncovered]
l_1ea9:
	move.b	d0,d2                           	| [$1ea9: ld   c,a]
	move.b	d1,d0                           	| [$1eaa: ld   a,b]
	                               	| [$1eab: and  a]
	jne	l_1eb1                             	| [$1eac: jr   nz,$1EB1]
	move.b	d2,d0                           	| [$1eae: ld   a,c]
	jra	l_1eb2                             	| [$1eaf: jr   $1EB2]
l_1eb1:
	move.b	d2,(a0)                         	| [$1eb1: ld   (hl),c]
l_1eb2:
	move.l	(sp)+,a4                        	| [$1eb2: pop  bc] [uncovered]
	movem.w	(sp)+,d1/d2                    	| [$1eb2: pop  bc] [uncovered]
l_1eb3:
	subq.w	#1,a0                           	| [$1eb3: dec  hl]
	move.b	d0,(a0)                         	| [$1eb4: ld   (hl),a]
	addq.w	#1,a1                           	| [$1eb5: inc  de]
	subq.b	#1,d1                           	| [...]
	jne	l_1e7e                             	| [$1eb6: djnz $1E7E]
	CLEAR_XC_FLAGS                         	| [$1eb8: xor  a]
	clr.b	d0                               	| [$1eb8: xor  a]
l_1eb9:
	cmp.b	(0x0c,a2),d0                     	| [$1eb9: cp   (ix+$0c)]
	jne	l_1eb9                             	| [$1ebc: jr   nz,$1EB9]
	move.b	d0,d5                           	| [$1ebe: ld   h,a]
	move.b	d0,d6                           	| [$1ebf: ld   l,a]
	LOAD_D5_16_FROM_D5D6
	STORE_WORD	d5,previous_car_speed_802d(a6)            	| [$1ec0: ld   ($802D),hl]
	STORE_WORD	d5,value16_8069(a6)            	| [$1ec3: ld   ($8069),hl]
	lea	l_8073(a6),a0                      	| [$1ec6: ld   hl,$8073]
	STORE_POINTER	a0,pointer_8002(a6)            	| [$1ec9: ld   ($8002),hl]
	exg	a1,a0                              	| [$1ecc: ex   de,hl]
	move.w	(sp)+,d0                        	| [$1ecd: pop  af]
	move.b	d0,nb_enemy_cars_824e(a6)       	| [$1ece: ld   (nb_enemy_cars_824e),a]
	rts                                    	| [$1ed1: ret]

l_1ed2:

	move.l	a0,-(sp)                        	| [$1ed2: push hl]
	movem.w	d3/d4,-(sp)                    	| [$1ed3: push de]
	move.l	a1,-(sp)                        	| [$1ed3: push de]
	movem.w	d1/d2,-(sp)                    	| [$1ed4: push bc]
	move.l	a4,-(sp)                        	| [$1ed4: push bc]
	lea	l_1F64(a6),a0                      	| [$1ed5: ld   hl,$1F64]
	lea	l_866A(a6),a1                      	| [$1ed8: ld   de,$866A]
	jbsr	l_1c29                            	| [$1edb: call $1C29]
	move.b	l_8024(a6),d0                   	| [$1ede: ld   a,($8024)]
	lea	l_8672(a6),a0                      	| [$1ee1: ld   hl,$8672]
	clr.b	d1                               	| [$1ee4: ld   b,$00]
	cmp.b	#0x63,d0                         	| [$1ee6: cp   $63]
	jcs	l_1eec                             	| [$1ee8: jr   c,$1EEC]
	move.b	#0x63,d0                        	| [$1eea: ld   a,$63] [uncovered]
l_1eec:
	cmp.b	#0x0A,d0                         	| [$1eec: cp   $0A]
	jcs	l_1ef5                             	| [$1eee: jr   c,$1EF5]
	addq.b	#1,d1                           	| [$1ef0: inc  b] [uncovered]
	sub.b	#0x0A,d0                         	| [$1ef1: sub  $0A] [uncovered]
	jra	l_1eec                             	| [$1ef3: jr   $1EEC] [uncovered]

l_1ef5:
	move.b	d0,(a0)                         	| [$1ef5: ld   (hl),a]
	move.b	d1,d0                           	| [$1ef6: ld   a,b]
	                               	| [$1ef7: and  a]
	jeq	l_1efc                             	| [$1ef8: jr   z,$1EFC]
	subq.w	#1,a0                           	| [$1efa: dec  hl] [uncovered]
	move.b	d0,(a0)                         	| [$1efb: ld   (hl),a] [uncovered]
l_1efc:
	move.l	(sp)+,a4                        	| [$1efc: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$1efc: pop  bc]
	move.l	(sp)+,a1                        	| [$1efd: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$1efd: pop  de]
	move.l	(sp)+,a0                        	| [$1efe: pop  hl]
	rts                                    	| [$1eff: ret]

l_2400:
	nop                                    	| [$2400: nop]

	move.l	a0,-(sp)                        	| [$2401: push hl]
	movem.w	d3/d4,-(sp)                    	| [$2402: push de]
	move.l	a1,-(sp)                        	| [$2402: push de]
	movem.w	d1/d2,-(sp)                    	| [$2403: push bc]
	move.l	a4,-(sp)                        	| [$2403: push bc]
	move.w	d0,-(sp)                        	| [$2404: push af]
	st.b	d0                                	| [$2405: ld   a,$FF]
	move.b	d0,l_A182(a6)                   	| [$2407: ld   ($A182),a]
	move.b	l_89F6(a6),d0                   	| [$240a: ld   a,($89F6)]
	lea	l_8A0D(a6),a0                      	| [$240d: ld   hl,$8A0D]
	clr.b	(a0)                             	| [$2410: ld   (hl),$00]
	btst.b	#7,d0                           	| [$2412: bit  7,a]
	jne	l_26bd                             	| [$2414: jp   nz,$26BD]
	btst.b	#6,d0                           	| [$2417: bit  6,a]
	jne	l_2639                             	| [$2419: jp   nz,$2639]
l_241c:
	nop                                    	| [$241c: nop]
	move.b	l_89F5(a6),d0                   	| [$241d: ld   a,($89F5)]
	btst.b	#7,d0                           	| [$2420: bit  7,a]
	jne	l_25d7                             	| [$2422: jp   nz,$25D7]
	btst.b	#6,d0                           	| [$2425: bit  6,a]
	jne	l_2663                             	| [$2427: jp   nz,$2663]
	btst.b	#2,d0                           	| [$242a: bit  2,a]
	jne	l_2588                             	| [$242c: jp   nz,$2588]
	move.b	l_89F4(a6),d0                   	| [$242f: ld   a,($89F4)]
	btst.b	#7,d0                           	| [$2432: bit  7,a]
	jeq	l_244c                             	| [$2434: jp   z,$244C]
	st.b	d0                                	| [$2437: ld   a,$FF]
l_2439:
	subq.b	#1,d0                           	| [$2439: dec  a]
	move.b	d0,l_A180(a6)                   	| [$243a: ld   ($A180),a]
	move.b	d0,l_A170(a6)                   	| [$243d: ld   ($A170),a]
	jne	l_2439                             	| [$2440: jr   nz,$2439]
	move.b	d0,l_A180(a6)                   	| [$2442: ld   ($A180),a]
	lea	l_89F4(a6),a0                      	| [$2445: ld   hl,$89F4]
	bclr.b	#7,(a0)                         	| [$2448: res  7,(hl)]
	jra	l_2452                             	| [$244a: jr   $2452]

l_244c:
	jbsr	l_27b3                            	| [$244c: call $27B3]
	jra	l_2487                             	| [$244f: jp   $2487]

l_2452:
	lea	l_8A0D(a6),a0                      	| [$2452: ld   hl,$8A0D]
	move.b	l_89F6(a6),d0                   	| [$2455: ld   a,($89F6)]
	move.b	#0x01,(a0)                      	| [$2458: ld   (hl),$01]
	move.b	l_89F4(a6),d0                   	| [$245a: ld   a,($89F4)]
	btst.b	#0,d0                           	| [$245d: bit  0,a]
	jne	l_26cd                             	| [$245f: jp   nz,$26CD]
	btst.b	#5,d0                           	| [$2462: bit  5,a]
	jeq	l_24af                             	| [$2464: jr   z,$24AF]
	lea	l_8AE8(a6),a0                      	| [$2466: ld   hl,$8AE8]
	lea	l_29FD(a6),a1                      	| [$2469: ld   de,$29FD]
	jbsr	l_2893                            	| [$246c: call $2893]
	jbsr	l_2845                            	| [$246f: call $2845]
	lea	l_8AE8(a6),a0                      	| [$2472: ld   hl,$8AE8]
	btst.b	#5,(a0)                         	| [$2475: bit  5,(hl)]
	jeq	l_24af                             	| [$2477: jr   z,$24AF]
	bclr.b	#5,(a0)                         	| [$2479: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$247b: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$247d: res  7,(hl)]
	lea	l_89F4(a6),a0                      	| [$247f: ld   hl,$89F4]
	bclr.b	#5,(a0)                         	| [$2482: res  5,(hl)]
	jra	l_24af                             	| [$2484: jp   $24AF]

l_2487:
	lea	l_8A0D(a6),a0                      	| [$2487: ld   hl,$8A0D]
	clr.b	(a0)                             	| [$248a: ld   (hl),$00]
	move.b	l_89F4(a6),d0                   	| [$248c: ld   a,($89F4)]
	btst.b	#3,d0                           	| [$248f: bit  3,a]
	jne	l_271f                             	| [$2491: jp   nz,$271F]
	move.b	#0x01,(a0)                      	| [$2494: ld   (hl),$01]
	btst.b	#2,d0                           	| [$2496: bit  2,a]
	jne	l_2727                             	| [$2498: jp   nz,$2727]
	move.b	#0x02,(a0)                      	| [$249b: ld   (hl),$02]
	btst.b	#1,d0                           	| [$249d: bit  1,a]
	jne	l_272f                             	| [$249f: jp   nz,$272F]
	move.b	#0x03,(a0)                      	| [$24a2: ld   (hl),$03]
	move.b	l_89F5(a6),d0                   	| [$24a4: ld   a,($89F5)]
	btst.b	#5,d0                           	| [$24a7: bit  5,a]
	jne	l_2737                             	| [$24a9: jp   nz,$2737]
	jra	l_2452                             	| [$24ac: jp   $2452]

l_24af:
	jbsr	l_251c                            	| [$24af: call $251C]
l_24b2:
	lea	l_89F5(a6),a0                      	| [$24b2: ld   hl,$89F5]
	move.b	(a0),d0                         	| [$24b5: ld   a,(hl)]
	and.b	#0xE0,d0                         	| [$24b6: and  $E0]
	jne	l_2518                             	| [$24b8: jr   nz,$2518]
	move.b	l_89F5(a6),d0                   	| [$24ba: ld   a,($89F5)]
	btst.b	#2,d0                           	| [$24bd: bit  2,a]
	jne	l_2518                             	| [$24bf: jr   nz,$2518]
	bset.b	#0,(a0)                         	| [$24c1: set  0,(hl)]
l_24c3:
	lea	l_89F4(a6),a0                      	| [$24c3: ld   hl,$89F4]
	move.b	(a0),d0                         	| [$24c6: ld   a,(hl)]
	addq.w	#1,a0                           	| [$24c7: inc  hl]
	move.b	(a0),d1                         	| [$24c8: ld   b,(hl)]
	move.w	d0,-(sp)                        	| [$24c9: push af]
	move.b	d1,d0                           	| [$24ca: ld   a,b]
	eor.b	#0x01,d0                         	| [$24cb: xor  $01]
	move.b	d0,d1                           	| [$24cd: ld   b,a]
	move.w	(sp)+,d0                        	| [$24ce: pop  af]
	addq.w	#1,a0                           	| [$24cf: inc  hl]
	move.b	(a0),d2                         	| [$24d0: ld   c,(hl)]
	or.b	d1,d0                             	| [$24d1: or   b]
	or.b	d2,d0                             	| [$24d2: or   c]
	                               	| [$24d3: cp   $00]
	jne	l_2513                             	| [$24d5: jr   nz,$2513]
	move.b	d0,l_A115(a6)                   	| [$24d7: ld   ($A115),a]
	move.b	d0,l_A11A(a6)                   	| [$24da: ld   ($A11A),a]
	move.b	d0,l_A11F(a6)                   	| [$24dd: ld   ($A11F),a]
	move.b	d0,l_8A54(a6)                   	| [$24e0: ld   ($8A54),a]
	move.b	d0,l_8A68(a6)                   	| [$24e3: ld   ($8A68),a]
	move.b	d0,l_8A74(a6)                   	| [$24e6: ld   ($8A74),a]
	move.b	d0,l_8A88(a6)                   	| [$24e9: ld   ($8A88),a]
	move.b	d0,l_8B54(a6)                   	| [$24ec: ld   ($8B54),a]
	move.b	d0,l_8AA8(a6)                   	| [$24ef: ld   ($8AA8),a]
	move.b	d0,l_8AB4(a6)                   	| [$24f2: ld   ($8AB4),a]
	move.b	d0,l_8AE8(a6)                   	| [$24f5: ld   ($8AE8),a]
	move.b	d0,l_8AF4(a6)                   	| [$24f8: ld   ($8AF4),a]
	move.b	d0,l_8A94(a6)                   	| [$24fb: ld   ($8A94),a]
	move.b	d0,l_8AC8(a6)                   	| [$24fe: ld   ($8AC8),a]
	move.b	d0,l_8AD4(a6)                   	| [$2501: ld   ($8AD4),a]
	move.b	d0,l_8A28(a6)                   	| [$2504: ld   ($8A28),a]
	move.b	d0,l_8A34(a6)                   	| [$2507: ld   ($8A34),a]
	move.b	d0,l_8A48(a6)                   	| [$250a: ld   ($8A48),a]
	move.b	d0,l_8AC8(a6)                   	| [$250d: ld   ($8AC8),a]
	move.b	d0,l_8AD4(a6)                   	| [$2510: ld   ($8AD4),a]
l_2513:
	move.w	(sp)+,d0                        	| [$2513: pop  af]
	move.l	(sp)+,a4                        	| [$2514: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$2514: pop  bc]
	move.l	(sp)+,a1                        	| [$2515: pop  de]
	movem.w	(sp)+,d3/d4                    	| [$2515: pop  de]
	move.l	(sp)+,a0                        	| [$2516: pop  hl]
	rts                                    	| [$2517: ret]

l_2518:
	bclr.b	#0,(a0)                         	| [$2518: res  0,(hl)]
	jra	l_24c3                             	| [$251a: jr   $24C3]

l_251c:
	lea	l_89F5(a6),a0                      	| [$251c: ld   hl,$89F5]
	btst.b	#3,(a0)                         	| [$251f: bit  3,(hl)]
	jeq	l_252f                             	| [$2521: jr   z,$252F]
	bclr.b	#3,(a0)                         	| [$2523: res  3,(hl)]
	bclr.b	#4,(a0)                         	| [$2525: res  4,(hl)]
	clr.b	d0                               	| [$2527: ld   a,$00]
	move.b	d0,l_A115(a6)                   	| [$2529: ld   ($A115),a]
	move.b	d0,l_A11A(a6)                   	| [$252c: ld   ($A11A),a]
l_252f:
	btst.b	#4,(a0)                         	| [$252f: bit  4,(hl)]
	jne	l_2546                             	| [$2531: jr   nz,$2546]
l_2533:
	lea	l_8AC8(a6),a0                      	| [$2533: ld   hl,$8AC8]
	bclr.b	#7,(a0)                         	| [$2536: res  7,(hl)]
	bclr.b	#6,(a0)                         	| [$2538: res  6,(hl)]
	bclr.b	#5,(a0)                         	| [$253a: res  5,(hl)]
	lea	l_8AD4(a6),a0                      	| [$253c: ld   hl,$8AD4]
	bclr.b	#7,(a0)                         	| [$253f: res  7,(hl)]
	bclr.b	#6,(a0)                         	| [$2541: res  6,(hl)]
	bclr.b	#5,(a0)                         	| [$2543: res  5,(hl)]
	rts                                    	| [$2545: ret]

l_2546:
	lea	l_8AC8(a6),a0                      	| [$2546: ld   hl,$8AC8]
	lea	l_2BA1(a6),a1                      	| [$2549: ld   de,$2BA1]
	jbsr	l_2893                            	| [$254c: call $2893]
	move.b	l_89F4(a6),d0                   	| [$254f: ld   a,($89F4)]
	and.b	#0x0E,d0                         	| [$2552: and  $0E]
	                               	| [$2554: cp   $00]
	jne	l_2562                             	| [$2556: jr   nz,$2562]
	move.b	l_89F5(a6),d0                   	| [$2558: ld   a,($89F5)]
	btst.b	#5,d0                           	| [$255b: bit  5,a]
	jne	l_2562                             	| [$255d: jr   nz,$2562]
	jbsr	l_2828                            	| [$255f: call $2828]
l_2562:
	lea	l_8AD4(a6),a0                      	| [$2562: ld   hl,$8AD4]
	lea	l_2B30(a6),a1                      	| [$2565: ld   de,$2B30]
	jbsr	l_2893                            	| [$2568: call $2893]
	move.b	l_89F4(a6),d0                   	| [$256b: ld   a,($89F4)]
	btst.b	#0,d0                           	| [$256e: bit  0,a]
	jne	l_2580                             	| [$2570: jr   nz,$2580]
	btst.b	#5,d0                           	| [$2572: bit  5,a]
	jne	l_2580                             	| [$2574: jr   nz,$2580]
	move.b	l_89F6(a6),d0                   	| [$2576: ld   a,($89F6)]
	btst.b	#7,d0                           	| [$2579: bit  7,a]
	jne	l_2580                             	| [$257b: jr   nz,$2580]
	jbsr	l_2845                            	| [$257d: call $2845]
l_2580:
	lea	l_8AD4(a6),a0                      	| [$2580: ld   hl,$8AD4]
	btst.b	#5,(a0)                         	| [$2583: bit  5,(hl)]
	bne.b	0f                               	| [...]
	rts                                    	| [$2585: ret  z] [...]
0:
	jra	l_2533                             	| [$2586: jr   $2533]
l_2588:
	lea	l_8B08(a6),a0                      	| [$2588: ld   hl,$8B08]
	lea	l_2A36(a6),a1                      	| [$258b: ld   de,$2A36]
	jbsr	l_2893                            	| [$258e: call $2893]
	jbsr	l_2828                            	| [$2591: call $2828]
	lea	l_8B14(a6),a0                      	| [$2594: ld   hl,$8B14]
	lea	l_2A97(a6),a1                      	| [$2597: ld   de,$2A97]
	jbsr	l_2893                            	| [$259a: call $2893]
	jbsr	l_2845                            	| [$259d: call $2845]
	lea	l_8B08(a6),a0                      	| [$25a0: ld   hl,$8B08]
	btst.b	#5,(a0)                         	| [$25a3: bit  5,(hl)]
	jeq	l_24b2                             	| [$25a5: jp   z,$24B2]
	lea	l_8B08(a6),a0                      	| [$25a8: ld   hl,$8B08]
	bclr.b	#5,(a0)                         	| [$25ab: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$25ad: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$25af: res  7,(hl)]
	lea	l_8B14(a6),a0                      	| [$25b1: ld   hl,$8B14]
	bclr.b	#5,(a0)                         	| [$25b4: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$25b6: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$25b8: res  7,(hl)]
	move.w	#0x0000,d3                      	| [$25ba: ld   de,$0000]
	STORE_WORD	d3,value16_8a0f(a6)            	| [$25bd: ld   ($8A0F),de]
	clr.b	d0                               	| [$25c1: ld   a,$00]
	move.b	d0,l_8A11(a6)                   	| [$25c3: ld   ($8A11),a]
	jbsr	l_2828                            	| [$25c6: call $2828]
	jbsr	l_2845                            	| [$25c9: call $2845]
	jbsr	l_285d                            	| [$25cc: call $285D]
	lea	l_89F5(a6),a0                      	| [$25cf: ld   hl,$89F5]
	bclr.b	#2,(a0)                         	| [$25d2: res  2,(hl)]
	jra	l_24b2                             	| [$25d4: jp   $24B2]
l_25d7:
	clr.b	d0                               	| [$25d7: ld   a,$00]
	move.b	d0,l_8B08(a6)                   	| [$25d9: ld   ($8B08),a]
	move.b	d0,l_8B14(a6)                   	| [$25dc: ld   ($8B14),a]
	lea	l_8AD4(a6),a0                      	| [$25df: ld   hl,$8AD4]
	lea	l_2C10(a6),a1                      	| [$25e2: ld   de,$2C10]
	jbsr	l_2893                            	| [$25e5: call $2893]
	jbsr	l_285d                            	| [$25e8: call $285D]
	lea	l_8AC8(a6),a0                      	| [$25eb: ld   hl,$8AC8]
	lea	l_2BEB(a6),a1                      	| [$25ee: ld   de,$2BEB]
	jbsr	l_2893                            	| [$25f1: call $2893]
	move.b	l_89F6(a6),d0                   	| [$25f4: ld   a,($89F6)]
	and.b	#0xC0,d0                         	| [$25f7: and  $C0]
	jne	l_25fe                             	| [$25f9: jr   nz,$25FE]
	jbsr	l_2845                            	| [$25fb: call $2845]
l_25fe:
	nop                                    	| [$25fe: nop]
	lea	l_8A94(a6),a0                      	| [$25ff: ld   hl,$8A94]
	lea	l_2BB4(a6),a1                      	| [$2602: ld   de,$2BB4]
	jbsr	l_2893                            	| [$2605: call $2893]
	jbsr	l_2828                            	| [$2608: call $2828]
	lea	l_8A94(a6),a0                      	| [$260b: ld   hl,$8A94]
	btst.b	#5,(a0)                         	| [$260e: bit  5,(hl)]
	jeq	l_24b2                             	| [$2610: jp   z,$24B2]
	jbsr	l_2774                            	| [$2613: call $2774]
	lea	l_8A94(a6),a0                      	| [$2616: ld   hl,$8A94]
	bclr.b	#5,(a0)                         	| [$2619: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$261b: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$261d: res  7,(hl)]
	lea	l_8AC8(a6),a0                      	| [$261f: ld   hl,$8AC8]
	bclr.b	#5,(a0)                         	| [$2622: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$2624: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$2626: res  7,(hl)]
	lea	l_8AD4(a6),a0                      	| [$2628: ld   hl,$8AD4]
	bclr.b	#5,(a0)                         	| [$262b: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$262d: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$262f: res  7,(hl)]
	lea	l_89F5(a6),a0                      	| [$2631: ld   hl,$89F5]
	bclr.b	#7,(a0)                         	| [$2634: res  7,(hl)]
	jra	l_24b2                             	| [$2636: jp   $24B2]
l_2639:
	lea	l_8B54(a6),a0                      	| [$2639: ld   hl,$8B54]
	lea	l_2BA6(a6),a1                      	| [$263c: ld   de,$2BA6]
	jbsr	l_2893                            	| [$263f: call $2893]
	jbsr	l_2845                            	| [$2642: call $2845]
	clr.b	d0                               	| [$2645: ld   a,$00]
	move.b	d0,l_A115(a6)                   	| [$2647: ld   ($A115),a]
	move.b	d0,l_A11F(a6)                   	| [$264a: ld   ($A11F),a]
	lea	l_8B54(a6),a0                      	| [$264d: ld   hl,$8B54]
	btst.b	#5,(a0)                         	| [$2650: bit  5,(hl)]
	jeq	l_241c                             	| [$2652: jp   z,$241C]
	bclr.b	#5,(a0)                         	| [$2655: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$2657: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$2659: res  7,(hl)]
	lea	l_89F6(a6),a0                      	| [$265b: ld   hl,$89F6]
	bclr.b	#6,(a0)                         	| [$265e: res  6,(hl)]
	jra	l_241c                             	| [$2660: jp   $241C]
l_2663:
	lea	l_8A48(a6),a0                      	| [$2663: ld   hl,$8A48]
	lea	l_2B15(a6),a1                      	| [$2666: ld   de,$2B15]
	jbsr	l_2893                            	| [$2669: call $2893]
	jbsr	l_285d                            	| [$266c: call $285D]
	lea	l_8A34(a6),a0                      	| [$266f: ld   hl,$8A34]
	lea	l_2AF8(a6),a1                      	| [$2672: ld   de,$2AF8]
	jbsr	l_2893                            	| [$2675: call $2893]
	move.b	l_89F6(a6),d0                   	| [$2678: ld   a,($89F6)]
	and.b	#0xC0,d0                         	| [$267b: and  $C0]
	jne	l_2682                             	| [$267d: jr   nz,$2682]
	jbsr	l_2845                            	| [$267f: call $2845]
l_2682:
	nop                                    	| [$2682: nop]
	lea	l_8A28(a6),a0                      	| [$2683: ld   hl,$8A28]
	lea	l_2AE3(a6),a1                      	| [$2686: ld   de,$2AE3]
	jbsr	l_2893                            	| [$2689: call $2893]
	jbsr	l_2828                            	| [$268c: call $2828]
	lea	l_8A28(a6),a0                      	| [$268f: ld   hl,$8A28]
	btst.b	#5,(a0)                         	| [$2692: bit  5,(hl)]
	jeq	l_24b2                             	| [$2694: jp   z,$24B2]
	jbsr	l_2774                            	| [$2697: call $2774]
	lea	l_8A28(a6),a0                      	| [$269a: ld   hl,$8A28]
	bclr.b	#5,(a0)                         	| [$269d: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$269f: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$26a1: res  7,(hl)]
	lea	l_8A34(a6),a0                      	| [$26a3: ld   hl,$8A34]
	bclr.b	#5,(a0)                         	| [$26a6: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$26a8: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$26aa: res  7,(hl)]
	lea	l_8A48(a6),a0                      	| [$26ac: ld   hl,$8A48]
	bclr.b	#5,(a0)                         	| [$26af: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$26b1: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$26b3: res  7,(hl)]
	lea	l_89F5(a6),a0                      	| [$26b5: ld   hl,$89F5]
	bclr.b	#6,(a0)                         	| [$26b8: res  6,(hl)]
	jra	l_24b2                             	| [$26ba: jp   $24B2]
l_26bd:
	lea	l_8A54(a6),a0                      	| [$26bd: ld   hl,$8A54]
	lea	l_29C9(a6),a1                      	| [$26c0: ld   de,$29C9]
	clr.b	d0                               	| [$26c3: ld   a,$00]
	move.b	d0,l_A11F(a6)                   	| [$26c5: ld   ($A11F),a]
	move.b	d0,l_A115(a6)                   	| [$26c8: ld   ($A115),a]
	jra	l_26f8                             	| [$26cb: jr   $26F8]
l_26cd:
	lea	l_8A68(a6),a0                      	| [$26cd: ld   hl,$8A68]
	lea	l_2A17(a6),a1                      	| [$26d0: ld   de,$2A17]
	jbsr	l_2893                            	| [$26d3: call $2893]
	jbsr	l_2845                            	| [$26d6: call $2845]
	clr.b	d0                               	| [$26d9: ld   a,$00]
	move.b	d0,l_A115(a6)                   	| [$26db: ld   ($A115),a]
	btst.b	#5,(a0)                         	| [$26de: bit  5,(hl)]
	jeq	l_24af                             	| [$26e0: jp   z,$24AF]
	bclr.b	#5,(a0)                         	| [$26e3: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$26e5: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$26e7: res  7,(hl)]
	move.b	l_8A0D(a6),d0                   	| [$26e9: ld   a,($8A0D)]
	                               	| [$26ec: cp   $00]
	jne	l_2717                             	| [$26ee: jr   nz,$2717]
	lea	l_89F6(a6),a0                      	| [$26f0: ld   hl,$89F6]
	bclr.b	#7,(a0)                         	| [$26f3: res  7,(hl)]
	jra	l_24af                             	| [$26f5: jp   $24AF]
l_26f8:
	jbsr	l_2893                            	| [$26f8: call $2893]
	jbsr	l_2845                            	| [$26fb: call $2845]
	move.b	l_8A54(a6),d0                   	| [$26fe: ld   a,($8A54)]
	btst.b	#5,(a0)                         	| [$2701: bit  5,(hl)]
	jeq	l_241c                             	| [$2703: jp   z,$241C]
	lea	l_8A54(a6),a0                      	| [$2706: ld   hl,$8A54]
	bclr.b	#5,(a0)                         	| [$2709: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$270b: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$270d: res  7,(hl)]
	lea	l_89F6(a6),a0                      	| [$270f: ld   hl,$89F6]
	bclr.b	#7,(a0)                         	| [$2712: res  7,(hl)]
	jra	l_241c                             	| [$2714: jp   $241C]
l_2717:
	lea	l_89F4(a6),a0                      	| [$2717: ld   hl,$89F4]
	bclr.b	#0,(a0)                         	| [$271a: res  0,(hl)]
	jra	l_24af                             	| [$271c: jp   $24AF]
l_271f:
	lea	l_8A74(a6),a0                      	| [$271f: ld   hl,$8A74]
	lea	l_298E(a6),a1                      	| [$2722: ld   de,$298E]
	jra	l_273d                             	| [$2725: jr   $273D]

l_2727:
	lea	l_8A88(a6),a0                      	| [$2727: ld   hl,$8A88]
	lea	l_29F0(a6),a1                      	| [$272a: ld   de,$29F0]
	jra	l_273d                             	| [$272d: jr   $273D]

l_272f:
	lea	l_8AA8(a6),a0                      	| [$272f: ld   hl,$8AA8]
	lea	l_2A10(a6),a1                      	| [$2732: ld   de,$2A10]
	jra	l_273d                             	| [$2735: jr   $273D]

l_2737:
	lea	l_29DA(a6),a1                      	| [$2737: ld   de,$29DA]
	lea	l_8AB4(a6),a0                      	| [$273a: ld   hl,$8AB4]
l_273d:
	jbsr	l_2893                            	| [$273d: call $2893]
	jbsr	l_2828                            	| [$2740: call $2828]
	btst.b	#5,(a0)                         	| [$2743: bit  5,(hl)]
	jeq	l_24af                             	| [$2745: jp   z,$24AF]
	bclr.b	#6,(a0)                         	| [$2748: res  6,(hl)]
	bclr.b	#5,(a0)                         	| [$274a: res  5,(hl)]
	bclr.b	#7,(a0)                         	| [$274c: res  7,(hl)]
	move.b	l_8A0D(a6),d0                   	| [$274e: ld   a,($8A0D)]
	lea	l_89F4(a6),a0                      	| [$2751: ld   hl,$89F4]
	tst.b	d0                               	| [$2754: cp   $00]
	jeq	l_2770                             	| [$2756: jr   z,$2770]
	cmp.b	#0x01,d0                         	| [$2758: cp   $01]
	jeq	l_276c                             	| [$275a: jr   z,$276C]
	cmp.b	#0x02,d0                         	| [$275c: cp   $02]
	jeq	l_2768                             	| [$275e: jr   z,$2768]
	lea	l_89F5(a6),a0                      	| [$2760: ld   hl,$89F5]
	bclr.b	#5,(a0)                         	| [$2763: res  5,(hl)]
l_2765:
	jra	l_24af                             	| [$2765: jp   $24AF]

l_2768:
	bclr.b	#1,(a0)                         	| [$2768: res  1,(hl)]
	jra	l_2765                             	| [$276a: jr   $2765]

l_276c:
	bclr.b	#2,(a0)                         	| [$276c: res  2,(hl)]
	jra	l_2765                             	| [$276e: jr   $2765]

l_2770:
	bclr.b	#3,(a0)                         	| [$2770: res  3,(hl)]
	jra	l_2765                             	| [$2772: jr   $2765]

l_2774:
	clr.b	d0                               	| [$2774: ld   a,$00]
	move.b	d0,l_A115(a6)                   	| [$2776: ld   ($A115),a]
	move.b	d0,l_A11A(a6)                   	| [$2779: ld   ($A11A),a]
	move.b	d0,l_A11F(a6)                   	| [$277c: ld   ($A11F),a]
	rts                                    	| [$277f: ret]

l_2780:
	lea	l_8AF4(a6),a0                      	| [$2780: ld   hl,$8AF4]
	lea	l_2ADC(a6),a1                      	| [$2783: ld   de,$2ADC]
	jbsr	l_2893                            	| [$2786: call $2893]
	jbsr	l_285d                            	| [$2789: call $285D]
	lea	l_8AF4(a6),a0                      	| [$278c: ld   hl,$8AF4]
	btst.b	#7,d0                           	| [$278f: bit  7,a]
	jeq	l_279a                             	| [$2791: jr   z,$279A]
	move.b	#0x01,d0                        	| [$2793: ld   a,$01] [uncovered]
	move.b	d0,l_A180(a6)                   	| [$2795: ld   ($A180),a] [uncovered]
	jra	l_27a0                             	| [$2798: jr   $27A0] [uncovered]

l_279a:
	nop                                    	| [$279a: nop]
	clr.b	d0                               	| [$279b: ld   a,$00]
	move.b	d0,l_A180(a6)                   	| [$279d: ld   ($A180),a]
l_27a0:
	nop                                    	| [$27a0: nop]
	lea	l_8AF4(a6),a0                      	| [$27a1: ld   hl,$8AF4]
	btst.b	#5,(a0)                         	| [$27a4: bit  5,(hl)]
	bne.b	0f                               	| [...]
	rts                                    	| [$27a6: ret  z] [...]
0:
	bclr.b	#5,(a0)                         	| [$27a7: res  5,(hl)]
	bclr.b	#6,(a0)                         	| [$27a9: res  6,(hl)]
	bclr.b	#7,(a0)                         	| [$27ab: res  7,(hl)]
	lea	l_89F4(a6),a0                      	| [$27ad: ld   hl,$89F4]
	bclr.b	#4,(a0)                         	| [$27b0: res  4,(hl)]
	rts                                    	| [$27b2: ret]

l_27b3:
	move.b	l_89F4(a6),d0                   	| [$27b3: ld   a,($89F4)]
	btst.b	#6,d0                           	| [$27b6: bit  6,a]
	jne	l_27c0                             	| [$27b8: jr   nz,$27C0]
	clr.b	d0                               	| [$27ba: ld   a,$00]
	move.b	d0,l_A11F(a6)                   	| [$27bc: ld   ($A11F),a]
	rts                                    	| [$27bf: ret]

l_27c0:
	move.b	l_89F4(a6),d0                   	| [$27c0: ld   a,($89F4)]
	btst.b	#4,d0                           	| [$27c3: bit  4,a]
	jne	l_2780                             	| [$27c5: jp   nz,$2780]
	move.b	l_806A(a6),d0                   	| [$27c8: ld   a,($806A)]
	btst.b	#7,d0                           	| [$27cb: bit  7,a]
	jeq	l_27dd                             	| [$27cd: jr   z,$27DD]
	move.b	l_806B(a6),d0                   	| [$27cf: ld   a,($806B)]
	                               	| [$27d2: cp   $00]
	jeq	l_27d9                             	| [$27d4: jr   z,$27D9]
	CLEAR_XC_FLAGS                         	| [$27d6: xor  a]
	clr.b	d0                               	| [$27d6: xor  a]
	jra	l_27ea                             	| [$27d7: jr   $27EA]

l_27d9:
	move.b	#0x01,d0                        	| [$27d9: ld   a,$01]
	jra	l_27ea                             	| [$27db: jr   $27EA]

* sound code?
l_27dd:
*	move.b	l_806B(a6),d0                   	| [$27dd: ld   a,($806B)]
*	                               	| [$27e0: cp   $00]
*	jeq	l_27e8                             	| [$27e2: jr   z,$27E8]
*	move.b	#0x02,d0                        	| [$27e4: ld   a,$02]
*	jra	l_27ea                             	| [$27e6: jr   $27EA]
*
*l_27e8:
*	move.b	#0x03,d0                        	| [$27e8: ld   a,$03]
*l_27ea:
*	move.b	d0,l_A10F(a6)                   	| [$27ea: ld   ($A10F),a]
*	move.b	#0x04,d0                        	| [$27ed: ld   a,$04]
*	move.b	d0,l_A11F(a6)                   	| [$27ef: ld   ($A11F),a]
*	move.w	#0x0050,d3                      	| [$27f2: ld   de,$0050]
*	LOAD_WORD	value16_8069(a6),d5             	| [$27f5: ld   hl,($8069)]
*	LOAD_D5D6_FROM_D5_16
*	btst.b	#7,d5                           	| [$27f8: bit  7,h]
*	jeq	l_2803                             	| [$27fa: jr   z,$2803]
*	move.b	d5,d0                           	| [$27fc: ld   a,h]
*	not.b	d0                               	| [$27fd: cpl]
*	move.b	d0,d5                           	| [$27fe: ld   h,a]
*	move.b	d6,d0                           	| [$27ff: ld   a,l]
*	not.b	d0                               	| [$2800: cpl]
*	move.b	d0,d6                           	| [$2801: ld   l,a]
*	LOAD_D5_16_FROM_D5D6
*	addq.w	#1,d5                           	| [$2802: inc  hl]
*l_2803:
*	add.w	d3,d5                            	| [$2803: add  hl,de]
*	move.b	d6,d0                           	| [$2804: ld   a,l]
*	lsr.b	#4,d0                            	| [$2805: srl  a] * 4
*	move.b	d0,l_A11B(a6)                   	| [$280d: ld   ($A11B),a]
*	move.b	d5,d0                           	| [$2810: ld   a,h]
*	and.b	#0x0F,d0                         	| [$2811: and  $0F]
*	move.b	d0,l_A11C(a6)                   	| [$2813: ld   ($A11C),a]
*	move.b	d5,d0                           	| [$2816: ld   a,h]
*	lsr.b	#4,d0                            	| [$2817: srl  a] * 4
*	move.b	d0,l_A11D(a6)                   	| [$281f: ld   ($A11D),a]
*	clr.b	d0                               	| [$2822: ld   a,$00]
*	move.b	d0,l_A11E(a6)                   	| [$2824: ld   ($A11E),a]
	rts                                    	| [$2827: ret]

l_2828:
	move.b	l_8A0E(a6),d0                   	| [$2828: ld   a,($8A0E)]

	move.l	a0,-(sp)                        	| [$282b: push hl]
	move.b	d0,l_A105(a6)                   	| [$282c: ld   ($A105),a]
	move.b	l_8A11(a6),d0                   	| [$282f: ld   a,($8A11)]
	move.b	d0,l_A115(a6)                   	| [$2832: ld   ($A115),a]
	LOAD_POINTER	value16_8a0f(a6),a0             	| [$2835: ld   hl,($8A0F)]

	lea	l_A110(a6),a1                      	| [$2838: ld   de,$A110]
	move.b	d6,d0                           	| [$283b: ld   a,l]
	and.b	#0x0F,d0                         	| [$283c: and  $0F]
	move.b	d0,(a1)                         	| [$283e: ld   (de),a]
	addq.w	#1,a1                           	| [$283f: inc  de]
	jbsr	l_2875                            	| [$2840: call $2875]
	move.l	(sp)+,a0                        	| [$2843: pop  hl]
	rts                                    	| [$2844: ret]

l_2845:
	move.b	l_8A0E(a6),d0                   	| [$2845: ld   a,($8A0E)]

	move.l	a0,-(sp)                        	| [$2848: push hl]
	move.b	d0,l_A10A(a6)                   	| [$2849: ld   ($A10A),a]
	move.b	l_8A11(a6),d0                   	| [$284c: ld   a,($8A11)]
	move.b	d0,l_A11A(a6)                   	| [$284f: ld   ($A11A),a]
	LOAD_POINTER	value16_8a0f(a6),a0             	| [$2852: ld   hl,($8A0F)]

	lea	l_A116(a6),a1                      	| [$2855: ld   de,$A116]
	jbsr	l_2875                            	| [$2858: call $2875]
	move.l	(sp)+,a0                        	| [$285b: pop  hl]
	rts                                    	| [$285c: ret]

l_285d:
	move.b	l_8A0E(a6),d0                   	| [$285d: ld   a,($8A0E)]

	move.l	a0,-(sp)                        	| [$2860: push hl]
	move.b	d0,l_A10F(a6)                   	| [$2861: ld   ($A10F),a]
	move.b	l_8A11(a6),d0                   	| [$2864: ld   a,($8A11)]
	move.b	d0,l_A11F(a6)                   	| [$2867: ld   ($A11F),a]
	LOAD_POINTER	value16_8a0f(a6),a0             	| [$286a: ld   hl,($8A0F)]

	lea	l_A11B(a6),a1                      	| [$286d: ld   de,$A11B]
	jbsr	l_2875                            	| [$2870: call $2875]
	move.l	(sp)+,a0                        	| [$2873: pop  hl]
	rts                                    	| [$2874: ret]

l_2875:
	move.b	d6,d0                           	| [$2875: ld   a,l]
	lsr.b	#4,d0                            	| [$2876: srl  a] * 4
	move.b	d0,(a1)                         	| [$287e: ld   (de),a]
	addq.w	#1,a1                           	| [$287f: inc  de]
	move.b	d5,d0                           	| [$2880: ld   a,h]
	and.b	#0x0F,d0                         	| [$2881: and  $0F]
	move.b	d0,(a1)                         	| [$2883: ld   (de),a]
	addq.w	#1,a1                           	| [$2884: inc  de]
	move.b	d5,d0                           	| [$2885: ld   a,h]
	lsr.b	#4,d0                            	| [$2886: srl  a] * 4
	move.b	d0,(a1)                         	| [$288e: ld   (de),a]
	addq.w	#1,a1                           	| [$288f: inc  de]
	CLEAR_XC_FLAGS                         	| [$2890: xor  a]
	clr.b	d0                               	| [$2890: xor  a]
	move.b	d0,(a1)                         	| [$2891: ld   (de),a]
	rts                                    	| [$2892: ret]

l_2893:

	move.l	a0,-(sp)                        	| [$2893: push hl]
	STORE_POINTER	a0,pointer_8A0B(a6)            	| [$2894: ld   ($8A0B),hl]
	btst.b	#7,(a0)                         	| [$2897: bit  7,(hl)]
	jne	l_28b9                             	| [$2899: jr   nz,$28B9]
	addq.w	#1,a0                           	| [$289b: inc  hl]
	move.b	d4,(a0)                         	| [$289c: ld   (hl),e]
	addq.w	#1,a0                           	| [$289d: inc  hl]
	move.b	d3,(a0)                         	| [$289e: ld   (hl),d]
	addq.w	#1,a0                           	| [$289f: inc  hl]
	subq.w	#3,a1                           	| [$28a0: dec  de] * 3
	move.b	(a1),d0                         	| [$28a3: ld   a,(de)]
	move.b	d0,(a0)                         	| [$28a4: ld   (hl),a]
	addq.w	#1,a1                           	| [$28a5: inc  de]
	move.b	(a1),d0                         	| [$28a6: ld   a,(de)]
	move.b	d0,l_8A0E(a6)                   	| [$28a7: ld   ($8A0E),a]
	addq.w	#1,a1                           	| [$28aa: inc  de]
	addq.w	#5,a0                           	| [$28ab: inc  hl] * 5
	move.b	d0,(a0)                         	| [$28b0: ld   (hl),a]
	subq.w	#1,a0                           	| [$28b1: dec  hl]
	move.b	(a1),d0                         	| [$28b2: ld   a,(de)]
	move.b	d0,(a0)                         	| [$28b3: ld   (hl),a]
	LOAD_POINTER	pointer_8A0B(a6),a0             	| [$28b4: ld   hl,($8A0B)]

	bset.b	#7,(a0)                         	| [$28b7: set  7,(hl)]
l_28b9:
	btst.b	#6,(a0)                         	| [$28b9: bit  6,(hl)]
	jne	l_292d                             	| [$28bb: jr   nz,$292D]
	LOAD_POINTER	pointer_8A0B(a6),a1             	| [$28bd: ld   de,($8A0B)]

	addq.w	#1,a1                           	| [$28c1: inc  de]
	move.b	(a1),d0                         	| [$28c2: ld   a,(de)]
	move.b	d0,d6                           	| [$28c3: ld   l,a]
	addq.w	#1,a1                           	| [$28c4: inc  de]
	move.b	(a1),d0                         	| [$28c5: ld   a,(de)]
	move.b	d0,d5                           	| [$28c6: ld   h,a]
	clr.b	d0                               	| [$28c7: ld   a,$00]
	move.b	d0,l_8A11(a6)                   	| [$28c9: ld   ($8A11),a]
	move.b	(a0),d2                         	| [$28cc: ld   c,(hl)]
	asl.b	#1,d2                            	| [$28cd: sla  c]

	move.l	a0,-(sp)                        	| [$28cf: push hl]
	clr.w	d1                               	| [$28d0: ld   b,$00]
	move.b	d2,d1
	lea	l_2C36(a6),a0                      	| [$28d2: ld   hl,$2C36]
	add.w	d1,a0                            	| [$28d5: add  hl,bc]
	move.b	(a0)+,d0                         	| [$28d6: ld   a,(hl)]
	move.b	d0,value16_8a0f(a6)                   	| [$28d7: ld   ($8A0F),a]
	                           	| [$28da: inc  hl]
	move.b	(a0),d0                         	| [$28db: ld   a,(hl)]
	move.b	d0,l_8A10(a6)                   	| [$28dc: ld   ($8A10),a]
	move.l	(sp)+,a0                        	| [$28df: pop  hl]
	addq.w	#1,a1                           	| [$28e0: inc  de]
	move.b	(a1)+,d0                         	| [$28e1: ld   a,(de)]
	                           	| [$28e2: inc  de]
	move.b	d0,(a1)+                         	| [$28e3: ld   (de),a]
	                           	| [$28e4: inc  de]
	addq.w	#1,a0                           	| [$28e5: inc  hl]
	move.b	(a0),d0                         	| [$28e6: ld   a,(hl)]
	lsr.b	#4,d0                            	| [$28e7: srl  a] * 4
	move.b	d0,(a1)                         	| [$28ef: ld   (de),a]
	addq.w	#2,a1                           	| [$28f0: inc  de] * 2
	move.b	(a1),d0                         	| [$28f2: ld   a,(de)]
	jbsr	l_2972                            	| [$28f3: call $2972]
	                           	| [$28f6: dec  de]
	move.b	d0,-(a1)                         	| [$28f7: ld   (de),a]
	addq.w	#1,a0                           	| [$28f8: inc  hl]
	LOAD_POINTER	pointer_8A0B(a6),a1             	| [$28f9: ld   de,($8A0B)]

	LOAD_D5D6_FROM_A0
	addq.w	#1,a1                           	| [$28fd: inc  de]
	move.b	d6,d0                           	| [$28fe: ld   a,l]
	move.b	d0,(a1)+                         	| [$28ff: ld   (de),a]
	                           	| [$2900: inc  de]
	move.b	d5,d0                           	| [$2901: ld   a,h]
	move.b	d0,(a1)                         	| [$2902: ld   (de),a]
	move.b	value16_8a0f(a6),d0                   	| [$2903: ld   a,($8A0F)]
	                               	| [$2906: cp   $00]
	jne	l_291a                             	| [$2908: jr   nz,$291A]
	move.b	l_8A10(a6),d0                   	| [$290a: ld   a,($8A10)]
	                               	| [$290d: cp   $00]
	jne	l_291a                             	| [$290f: jr   nz,$291A]
	LOAD_POINTER	pointer_8A0B(a6),a0             	| [$2911: ld   hl,($8A0B)]

	bset.b	#5,(a0)                         	| [$2914: set  5,(hl)]
	bclr.b	#7,(a0)                         	| [$2916: res  7,(hl)]
	move.l	(sp)+,a0                        	| [$2918: pop  hl]
	rts                                    	| [$2919: ret]

l_291a:
	LOAD_POINTER	pointer_8A0B(a6),a0             	| [$291a: ld   hl,($8A0B)]

	bset.b	#6,(a0)                         	| [$291d: set  6,(hl)]
	LOAD_POINTER	pointer_8A0B(a6),a0             	| [$291f: ld   hl,($8A0B)]

	move.w	#0x0009,d3                      	| [$2922: ld   de,$0009]
	add.w	d3,a0                            	| [$2925: add  hl,de]
	LOAD_WORD	value16_8a0f(a6),d3             	| [$2926: ld   de,($8A0F)]
	LOAD_D3D4_FROM_D3_16
	move.b	d4,(a0)+                         	| [$292a: ld   (hl),e]
	                           	| [$292b: inc  hl]
	move.b	d3,(a0)                         	| [$292c: ld   (hl),d]
l_292d:
	LOAD_POINTER	pointer_8A0B(a6),a0             	| [$292d: ld   hl,($8A0B)]

	move.w	#0x0009,d3                      	| [$2930: ld   de,$0009]
	add.w	d3,a0                            	| [$2933: add  hl,de]
	move.b	(a0),d0                         	| [$2934: ld   a,(hl)]
	move.b	d0,value16_8a0f(a6)                   	| [$2935: ld   ($8A0F),a]
	addq.w	#1,a0                           	| [$2938: inc  hl]
	move.b	(a0),d0                         	| [$2939: ld   a,(hl)]
	move.b	d0,l_8A10(a6)                   	| [$293a: ld   ($8A10),a]
	LOAD_POINTER	pointer_8A0B(a6),a0             	| [$293d: ld   hl,($8A0B)]

	move.w	#0x0008,d3                      	| [$2940: ld   de,$0008]
	add.w	d3,a0                            	| [$2943: add  hl,de]
	move.b	(a0),d0                         	| [$2944: ld   a,(hl)]
	move.b	d0,l_8A0E(a6)                   	| [$2945: ld   ($8A0E),a]
	LOAD_POINTER	pointer_8A0B(a6),a0             	| [$2948: ld   hl,($8A0B)]

	move.w	#0x0005,d3                      	| [$294b: ld   de,$0005]
	add.w	d3,a0                            	| [$294e: add  hl,de]
	move.b	(a0),d0                         	| [$294f: ld   a,(hl)]
	move.b	d0,l_8A11(a6)                   	| [$2950: ld   ($8A11),a]
	tst.b	d0                               	| [$2953: cp   $00]
	jeq	l_2961                             	| [$2955: jr   z,$2961]
	subq.w	#1,a0                           	| [$2957: dec  hl]
	subq.b	#1,(a0)                         	| [$2958: dec  (hl)]
	jne	l_2967                             	| [$2959: jr   nz,$2967]
	subq.w	#1,a0                           	| [$295b: dec  hl]
	move.b	(a0),d0                         	| [$295c: ld   a,(hl)]
	addq.w	#1,a0                           	| [$295d: inc  hl]
	move.b	d0,(a0)                         	| [$295e: ld   (hl),a]
	addq.w	#1,a0                           	| [$295f: inc  hl]
	subq.b	#1,(a0)                         	| [$2960: dec  (hl)]
l_2961:
	addq.w	#1,a0                           	| [$2961: inc  hl]
	subq.b	#1,(a0)                         	| [$2962: dec  (hl)]
	jeq	l_296a                             	| [$2963: jr   z,$296A]
	move.l	(sp)+,a0                        	| [$2965: pop  hl]
	rts                                    	| [$2966: ret]

l_2967:
	addq.w	#1,a0                           	| [$2967: inc  hl]
	jra	l_2961                             	| [$2968: jr   $2961]

l_296a:
	nop                                    	| [$296a: nop]
	LOAD_POINTER	pointer_8A0B(a6),a0             	| [$296b: ld   hl,($8A0B)]

	bclr.b	#6,(a0)                         	| [$296e: res  6,(hl)]
	move.l	(sp)+,a0                        	| [$2970: pop  hl]
	rts                                    	| [$2971: ret]

l_2972:

	move.l	a0,-(sp)                        	| [$2972: push hl]
	movem.w	d1/d2,-(sp)                    	| [$2973: push bc]
	move.l	a4,-(sp)                        	| [$2973: push bc]
	and.b	#0x0F,d0                         	| [$2974: and  $0F]
	move.b	d0,d1                           	| [$2976: ld   b,a]
	move.b	(a0),d0                         	| [$2977: ld   a,(hl)]
	and.b	#0x0F,d0                         	| [$2978: and  $0F]
	move.b	d0,d2                           	| [$297a: ld   c,a]
	CLEAR_XC_FLAGS                         	| [$297b: xor  a]
	clr.b	d0                               	| [$297b: xor  a]
l_297c:
	add.b	d1,d0                            	| [$297c: add  a,b]
	move.b	d0,l_A170(a6)                   	| [$297d: ld   ($A170),a]
	subq.b	#1,d2                           	| [$2980: dec  c]
	jne	l_297c                             	| [$2981: jr   nz,$297C]
	move.l	(sp)+,a4                        	| [$2983: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$2983: pop  bc]
	move.l	(sp)+,a0                        	| [$2984: pop  hl]
	rts                                    	| [$2985: ret]

boot_3800:
	                       	| [$3800: ld   sp,$384C]
	rts                                    	| [$3803: ret] jumps to 3911

boot_sequence_384C:
	.long	reset_3911
	.long	resume_boot_3967                 	|  jump to 0003 directly to skip boot
	.long	resume_boot_39b1

	                      	| [$389e: ld   sp,$8400]
	                                    	| [$389f: nop] [uncovered]
	add.b	d5,d0                            	| [$38a0: add  a,h] [uncovered]

	lea	timer_8000(a6),a0                      	| [$38a1: ld   hl,$8000]
	lea	l_8001(a6),a1                      	| [$38a4: ld   de,$8001]
	move.w	#0x03FF,d1                      	| [$38a7: ld   bc,$03FF]
	clr.b	(a0)                             	| [$38aa: ld   (hl),$00]
	jbsr	ldir                              	| [$38ac: ldir]
	lea	l_8800(a6),a0                      	| [$38ae: ld   hl,$8800]
	lea	l_8801(a6),a1                      	| [$38b1: ld   de,$8801]
	move.w	#0x03FF,d1                      	| [$38b4: ld   bc,$03FF]
	clr.b	(a0)                             	| [$38b7: ld   (hl),$00]
	jbsr	ldir                              	| [$38b9: ldir]
	jbsr	l_391e                            	| [$38bb: call $391E]
	move.b	#0x01,d0                        	| [$38be: ld   a,$01]
	move.b	d0,l_A184(a6)                   	| [$38c0: ld   ($A184),a]
	move.b	d0,l_A185(a6)                   	| [$38c3: ld   ($A185),a]
	lea	l_02A0(a6),a0                      	| [$38c6: ld   hl,$02A0]
	STORE_POINTER	a0,value16_8069(a6)            	| [$38c9: ld   ($8069),hl]
*im   2
	move.b	#0x3F,d0                        	| [$38ce: ld   a,$3F]
	move.b	d0,i                            	| [$38d0: ld   i,a]
	move.b	#0xFE,d0                        	| [$38d2: ld   a,$FE]
*out  ($00),a
	move.b	#0x01,d0                        	| [$38d6: ld   a,$01]
	                   	| [$38d8: ld   ($A181),a]
	move.b	d0,l_A182(a6)                   	| [$38db: ld   ($A182),a]
	jbsr	osd_enable_interrupts   | ei
l_38df:
	move.b	dsw_a100(a6),d0                 	| [$38df: ld   a,(dsw_a100)]
	btst.b	#0,d0                           	| [$38e2: bit  0,a]
	jeq	l_38df                             	| [$38e4: jr   z,$38DF]
	jbsr	osd_disable_interrupts   | di
	CLEAR_XC_FLAGS                         	| [$38e7: xor  a]
	clr.b	d0                               	| [$38e7: xor  a]
	                   	| [$38e8: ld   ($A181),a]
	move.b	d0,l_A182(a6)                   	| [$38eb: ld   ($A182),a]
	jbsr	l_3dce                            	| [$38ee: call $3DCE]
	move.w	#0x0000,d1                      	| [$38f1: ld   bc,$0000]
l_38f4:
	move.b	#0x02,d0                        	| [$38f4: ld   a,$02]
l_38f6:
	            	| [$38f6: ld   (watchdog_a080),a]
	subq.b	#1,d0                           	| [$38f9: dec  a]
	jne	l_38f6                             	| [$38fa: jr   nz,$38F6]
	subq.b	#1,d2                           	| [$38fc: dec  c]
	jne	l_38f4                             	| [$38fd: jr   nz,$38F4]
	subq.b	#1,d1                           	| [...]
	jne	l_38f4                             	| [$38ff: djnz $38F4]
l_3901:
	            	| [$3901: ld   (watchdog_a080),a]
	move.b	dsw_a100(a6),d0                 	| [$3904: ld   a,(dsw_a100)]
	btst.b	#0,d0                           	| [$3907: bit  0,a]
	jeq	l_3901                             	| [$3909: jr   z,$3901]
	jbsr	l_3959                            	| [$390b: call $3959]
	jra	l_0003                             	| [$390e: jp   $0003]

* after setting the stack to a value to hide entrypoint/boot sequence
* the game jumps here
reset_3911:
* various memory fills
	lea	l_8400(a6),a0                      	| [$3911: ld   hl,$8400]
	lea	l_8401(a6),a1                      	| [$3914: ld   de,$8401]
	move.w	#0x03FF,d1                      	| [$3917: ld   bc,$03FF]
	move.b	#0x40,(a0)                      	| [$391a: ld   (hl),$40]
	jbsr	ldir                              	| [$391c: ldir] fill video with $40
l_391e:
	lea	l_8C00(a6),a0                      	| [$391e: ld   hl,$8C00]
	lea	l_8C01(a6),a1                      	| [$3921: ld   de,$8C01]
	move.w	#0x03FF,d1                      	| [$3924: ld   bc,$03FF]
	move.b	#0x66,(a0)                      	| [$3927: ld   (hl),$66] fill attibs
	jbsr	ldir                              	| [$3929: ldir]
	lea	l_8040(a6),a0                      	| [$392b: ld   hl,$8040]
	move.w	#0x1C08,d1                      	| [$392e: ld   bc,$1C08]
	LOAD_D1D2_FROM_D1_16
	move.b	#0x40,d0                        	| [$3931: ld   a,$40]
	move.b	d0,d3                           	| [$3933: ld   d,a]
	move.b	#0x20,d0                        	| [$3934: ld   a,$20]
	sub.b	d2,d0                            	| [$3936: sub  c]
	move.b	d0,d4                           	| [$3937: ld   e,a]
	move.b	d3,d0                           	| [$3938: ld   a,d]
l_3939:
	move.b	d2,d3                           	| [$3939: ld   d,c]
l_393a:
	move.b	d0,(a0)+                         	| [$393a: ld   (hl),a]
	addq.w	#1,a0                           	| [$393b: inc  hl]
	subq.b	#1,d3                           	| [$393c: dec  d]
	jne	l_393a                             	| [$393d: jr   nz,$393A]

	LOAD_D3_16_FROM_D3D4
	add.w	d3,a0                            	| [$393f: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3939                             	| [$3940: djnz $3939]
	lea	l_8840(a6),a0                      	| [$3942: ld   hl,$8840]
	move.b	#0x1C,d1                      	| [$3945: ld   bc,$1C08]
	move.b	#0x08,d2                      	| [$3945: ld   bc,$1C08]
	move.b	#0x66,d0                        	| [$3948: ld   a,$66]
	move.b	d0,d3                           	| [$394a: ld   d,a]
	move.b	#0x20,d0                        	| [$394b: ld   a,$20]
	sub.b	d2,d0                            	| [$394d: sub  c]
	move.b	d0,d4                           	| [$394e: ld   e,a]
	move.b	d3,d0                           	| [$394f: ld   a,d]
l_3950:
	move.b	d2,d3                           	| [$3950: ld   d,c]
l_3951:
	move.b	d0,(a0)+                         	| [$3951: ld   (hl),a]
	                           	| [$3952: inc  hl]
	subq.b	#1,d3                           	| [$3953: dec  d]
	jne	l_3951                             	| [$3954: jr   nz,$3951]
	LOAD_D3_16_FROM_D3D4
	add.w	d3,a0                            	| [$3956: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3950                             	| [$3957: djnz $3950]
l_3959:
	rts
	* reset registers, not needed
*	lea	p1_a000(a6),a0                     	| [$3959: ld   hl,p1_a000]
*	move.b	#2,d1                      	| [$395c: ld   bc,$0200]
*	moveq	#0,d2                      	| [$395c: ld   bc,$0200]
*l_395f:
*	move.b	d2,(a0)+                         	| [$395f: ld   (hl),c]
*	                           	| [$3960: inc  l]
*	jne	l_395f                             	| [$3961: jr   nz,$395F]
*	add.w	#0x100,a0                           	| [$3963: inc  h]
*	subq.b	#1,d1                           	| [...]
*	jne	l_395f                             	| [$3964: djnz $395F]
*	rts                                    	| [$3966: ret] [disabled] continues to 3967

* another memory copy sequence
resume_boot_3967:
	lea	l_3FF9(a6),a1                      	| [$3967: ld   de,$3FF9]
	move.w	#0x0000,d5                      	| [$396a: ld   hl,$0000]
l_396d:
	move.b	#1,d1                      	| [$396d: ld   bc,$1000]
	move.b	#0,d2                      	| [$396d: ld   bc,$1000]
l_3970:
	            	| [$3970: ld   (watchdog_a080),a]
l_3973:
	move.b	d2,d0                           	| [$3973: ld   a,c]
	add.b	(a0)+,d0                          	| [$3974: add  a,(hl)]
	move.b	d0,d2                           	| [$3975: ld   c,a]
	                           	| [$3976: inc  l]
	jne	l_3973                             	| [$3977: jr   nz,$3973]
	addq.b	#1,d5                           	| [$3979: inc  h]
	subq.b	#1,d1                           	| [...]
	jne	l_3970                             	| [$397a: djnz $3970]
	move.b	(a1),d0                         	| [$397c: ld   a,(de)]
	cmp.b	d2,d0                            	| [$397d: cp   c]
	jne	l_398f                             	| [$397e: jr   nz,$398F]
	addq.w	#1,a1                           	| [$3980: inc  de]
	LOAD_D3D4_FROM_A1
	move.b	d4,d0                           	| [$3981: ld   a,e]
	cmp.b	#0xFD,d0                         	| [$3982: cp   $FD]
	jcs	l_396d                             	| [$3984: jr   c,$396D]
	move.b	#0x4F,d0                        	| [$3986: ld   a,$4F]
	move.b	d0,l_848B(a6)                   	| [$3988: ld   ($848B),a]
	move.b	#0x4B,d0                        	| [$398b: ld   a,$4B]
	jra	l_3992                             	| [$398d: jr   $3992]

* displays "ROM OK"
l_3992:
	move.b	d0,l_848C(a6)                   	| [$3992: ld   ($848C),a]
	move.b	#0x4F,d1                        	| [$3995: ld   b,$4F]
	lea	l_8486(a6),a0                      	| [$3997: ld   hl,$8486]
l_399a:
	move.b	#0x4D,(a0)                      	| [$399a: ld   (hl),$4D]
	                           	| [$399c: dec  l]
	move.b	d1,-(a0)                         	| [$399d: ld   (hl),b]
	                           	| [$399e: dec  l]
	move.b	#0x52,-(a0)                      	| [$399f: ld   (hl),$52]
	cmp.b	#0x4B,d0                         	| [$39a1: cp   $4B]
	bne.b	0f                               	| [...]
	rts                                    	| [$39a3: ret  z] jumps to 39B1 [...]
0:
* problem: reset
l_39a4:
	            	| [$39a4: ld   (watchdog_a080),a] [uncovered]
	move.b	dsw_a100(a6),d0                 	| [$39a7: ld   a,(dsw_a100)] [uncovered]
	btst.b	#0,d0                           	| [$39aa: bit  0,a] [uncovered]
	jeq	l_39a4                             	| [$39ac: jr   z,$39A4] [uncovered]
	jra	l_0000                             	| [$39ae: jp   $0000] [uncovered]

resume_boot_39b1:
	move.b	#0x0F,d3                        	| [$39b1: ld   d,$0F]
l_39b3:
	move.l	(sp)+,a0                        	| [$39b3: pop  hl]
	move.l	(sp)+,a4                        	| [$39b4: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$39b4: pop  bc]
	move.b	d3,d4                           	| [$39b5: ld   e,d]
l_39b6:
	            	| [$39b6: ld   (watchdog_a080),a]
l_39b9:
	ILLEGAL
	move.b	d4,d0                           	| [$39b9: ld   a,e]
	ror.b	#4,d0                            	| [$39ba: rrca] * 4
	add.b	d4,d0                            	| [$39be: add  a,e]
	add.b	d1,d0                            	| [$39bf: add  a,b]
	and.b	d2,d0                            	| [$39c0: and  c]
	move.b	d0,(a0)                         	| [$39c1: ld   (hl),a]
	move.b	d4,d0                           	| [$39c2: ld   a,e]
	add.b	d0,d0                            	| [$39c3: add  a,a]
	add.b	d0,d0                            	| [$39c4: add  a,a]
	add.b	d4,d0                            	| [$39c5: add  a,e]
	addq.b	#1,d0                           	| [$39c6: inc  a]
	move.b	d0,d4                           	| [$39c7: ld   e,a]
	addq	#1,a0											| [$39c8: inc  l]
	jne	l_39b9                             	| [$39c9: jr   nz,$39B9]
	addq.b	#1,d5                           	| [$39cb: inc  h]
	subq.b	#1,d1                           	| [...]
	jne	l_39b6                             	| [$39cc: djnz $39B6]
	                           	| [$39ce: dec  sp] * 4
	move.l	(sp)+,a0                        	| [$39d2: pop  hl]
	move.l	(sp)+,a4                        	| [$39d3: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$39d3: pop  bc]
	move.b	d3,d4                           	| [$39d4: ld   e,d]
l_39d5:
	            	| [$39d5: ld   (watchdog_a080),a]
l_39d8:
	move.b	d4,d0                           	| [$39d8: ld   a,e]
	ror.b	#4,d0                            	| [$39d9: rrca] * 4
	add.b	d4,d0                            	| [$39dd: add  a,e]
	add.b	d1,d0                            	| [$39de: add  a,b]
	move.b	(a0),d7
	eor.b	d7,d0                            	| [$39df: xor  (hl)]
	and.b	d2,d0                            	| [$39e0: and  c]
	jne	l_39fa                             	| [$39e1: jr   nz,$39FA]
	move.b	d4,d0                           	| [$39e3: ld   a,e]
	add.b	d0,d0                            	| [$39e4: add  a,a]
	add.b	d0,d0                            	| [$39e5: add  a,a]
	add.b	d4,d0                            	| [$39e6: add  a,e]
	addq.b	#1,d0                           	| [$39e7: inc  a]
	move.b	d0,d4                           	| [$39e8: ld   e,a]
	addq.w	#1,a0                           	| [$39e9: inc  l]
	jne	l_39d8                             	| [$39ea: jr   nz,$39D8]
	addq.b	#1,d5                           	| [$39ec: inc  h]
	subq.b	#1,d1                           	| [...]
	jne	l_39d5                             	| [$39ed: djnz $39D5]
	BREAKPOINT	"WTF"
	subq.b	#1,d3                           	| [$39f3: dec  d]
	jpl	l_39b3                             	| [$39f4: jp   p,$39B3]
	move.l	(sp)+,a0                        	| [$39f7: pop  hl]
	move.l	(sp)+,a4                        	| [$39f8: pop  bc]
	movem.w	(sp)+,d1/d2                    	| [$39f8: pop  bc]
	rts                                    	| [$39f9: ret]

l_3a27:
	move.b	d0,l_84CC(a6)                   	| [$3a27: ld   ($84CC),a]
	move.b	#0x0A,d1                        	| [$3a2a: ld   b,$0A]
	lea	l_84C6(a6),a0                      	| [$3a2c: ld   hl,$84C6]
	jra	l_399a                             	| [$3a2f: jp   $399A]

	lea	l_9C00(a6),a0                      	| [$3a32: ld   hl,$9C00]
	lea	l_8400(a6),a1                      	| [$3a35: ld   de,$8400]
	move.w	#0x0400,d1                      	| [$3a38: ld   bc,$0400]
	jbsr	ldir                              	| [$3a3b: ldir]
	move.b	#0x4F,d0                        	| [$3a3d: ld   a,$4F]
	move.b	d0,l_84CB(a6)                   	| [$3a3f: ld   ($84CB),a]
	move.b	#0x4B,d0                        	| [$3a42: ld   a,$4B]
	jra	l_3a27                             	| [$3a44: jr   $3A27]

	lea	l_8400(a6),a0                      	| [$3a46: ld   hl,$8400]
	lea	l_9C00(a6),a1                      	| [$3a49: ld   de,$9C00]
	move.w	#0x0400,d1                      	| [$3a4c: ld   bc,$0400]
	jbsr	ldir                              	| [$3a4f: ldir]
	rts                                    	| [$3a51: ret]

l_3dce:
	move.b	#0x03,d0                        	| [$3dce: ld   a,$03]
	jbsr	osd_set_scroll_x             	| [$3dd0: ld   (scrollx_a130),a]
	lea	l_8400(a6),a0                      	| [$3dd3: ld   hl,$8400]
	lea	l_8401(a6),a1                      	| [$3dd6: ld   de,$8401]
	move.w	#0x03FF,d1                      	| [$3dd9: ld   bc,$03FF]
	move.b	#0x5B,(a0)                      	| [$3ddc: ld   (hl),$5B]
	jbsr	ldir                              	| [$3dde: ldir]
	lea	l_8040(a6),a0                      	| [$3de0: ld   hl,$8040]
	lea	l_1C08(a6),a4                      	| [$3de3: ld   bc,$1C08]
	move.b	#0x5B,d0                        	| [$3de6: ld   a,$5B]
	jbsr	l_3e20                            	| [$3de8: call $3E20]
	lea	l_8C00(a6),a0                      	| [$3deb: ld   hl,$8C00]
	moveq	#0,d2                      	| [$3dee: ld   bc,$0400]
	moveq	#4,d1                      	| [$3dee: ld   bc,$0400]
l_3df1:
	jbsr	l_3e10                            	| [$3df1: call $3E10]
	addq.w	#1,a0                           	| [$3df4: inc  hl]
	subq.b	#1,d2                           	| [$3df5: dec  bc]
	move.b	d2,d0                           	| [$3df6: ld   a,c]
	or.b	d1,d0                             	| [$3df7: or   b]
	jne	l_3df1                             	| [$3df8: jr   nz,$3DF1]
	lea	l_8840(a6),a0                      	| [$3dfa: ld   hl,$8840]
	move.b	#0x1C,d1                      	| [$3dfd: ld   bc,$1C08]
	move.b	#0x8,d2                      	| [$3dfd: ld   bc,$1C08]
	move.b	#0x20,d0                        	| [$3e00: ld   a,$20]
	sub.b	d2,d0                            	| [$3e02: sub  c]
	move.b	d0,d4                           	| [$3e03: ld   e,a]
l_3e04:
	move.b	d2,d3                           	| [$3e04: ld   d,c]
l_3e05:
	jbsr	l_3e10                            	| [$3e05: call $3E10]
	addq.w	#1,a0                           	| [$3e08: inc  hl]
	subq.b	#1,d3                           	| [$3e09: dec  d]
	jne	l_3e05                             	| [$3e0a: jr   nz,$3E05]
	LOAD_D3_16_FROM_D3D4
	add.w	d3,a0                            	| [$3e0c: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3e04                             	| [$3e0d: djnz $3E04]
	rts                                    	| [$3e0f: ret]

l_3e10:
	LOAD_D5D6_FROM_A0
	bset.b	#6,(a0)                         	| [$3e12: set  6,(hl)]
	btst.b	#0,d6                           	| [$3e10: bit  0,l]
	jeq	l_3e18                             	| [$3e14: jr   z,$3E18]
	bclr.b	#6,(a0)                         	| [$3e16: res  6,(hl)]
l_3e18:
	bclr.b	#7,(a0)                         	| [$3e1a: res  7,(hl)]
	btst.b	#5,d6                           	| [$3e18: bit  5,l]
	bne.b	0f                               	| [...]
	rts                                    	| [$3e1c: ret  z] [...]
0:
	bset.b	#7,(a0)                         	| [$3e1d: set  7,(hl)]
	rts                                    	| [$3e1f: ret]

l_3e20:
	move.b	d0,d3                           	| [$3e20: ld   d,a]
	move.b	#0x20,d0                        	| [$3e21: ld   a,$20]
	sub.b	d2,d0                            	| [$3e23: sub  c]
	move.b	d0,d4                           	| [$3e24: ld   e,a]
	move.b	d3,d0                           	| [$3e25: ld   a,d]
l_3e26:
	move.b	d2,d3                           	| [$3e26: ld   d,c]
l_3e27:
	move.b	d0,(a0)+                         	| [$3e27: ld   (hl),a]
	                           	| [$3e28: inc  hl]
	subq.b	#1,d3                           	| [$3e29: dec  d]
	jne	l_3e27                             	| [$3e2a: jr   nz,$3E27]
	add.w	d3,a0                            	| [$3e2c: add  hl,de]
	subq.b	#1,d1                           	| [...]
	jne	l_3e26                             	| [$3e2d: djnz $3E26]
	rts                                    	| [$3e2f: ret]

* < D0: byte possibly containing lowernibble > 9
* > D0: value corrected to full BCD
daa:
    move.w    d1,-(a7)
    move.b    d0,d1
    and.w    #0xF,d1
    sub.b    #10,d1
    bcs.b    daa_out        | no need to do anything
    * D1 = A-F: correct
    add.b    #0x16,d0
daa_out:
    move.w    (a7)+,d1
    rts

* < A0: source (HL)
* < A1: destination (DE)
* < D1: length (16 bit)
ldir:
    subq.w    #1,d1
0:
    move.b    (a0)+,(a1)+
    dbf        d1,0b
    clr.w    d1
    rts

* < all registers d1-d4/a0/a1/a4
* > all registers swapped
*: note regscopy must be defined somewhere in RAM
*: with a size of 56
exx:
	move.l	a6,-(a7)
    lea     regscopy+28,a6
    * save current regs in region 1
    movem.l d1-d4/a0/a1/a4,-(a6)
    * restore old regs from region 2
    lea     regscopy+28,a6
    movem.l (a6),d1-d4/a0/a1/a4
    * now copy region 1 to region 2
    movem.l d1-d4/a0/a1/a4,-(a7)
    lea     regscopy,a6
    movem.l (a6)+,d1-d4/a0/a1/a4
    movem.l d1-d4/a0/a1/a4,(a6)
    movem.l (a7)+,d1-d4/a0/a1/a4
	move.l	(a7)+,a6
    rts
